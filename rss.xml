<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>burningdaylight</title>
        <link>https://burningdaylight.io</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://burningdaylight.io/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 02 Apr 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>An Interlude</title>
            <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/an-interlude/</link>
            <guid>https://burningdaylight.io/posts/an-interlude/</guid>
            <description>&lt;p&gt;I started collecting notes here almost 3 years ago at my first PyCon. I had been
working in Python for 3 years at that point and wanted to share some notes with
anybody that might find them useful.&lt;&#x2F;p&gt;
&lt;p&gt;Since then I&#x27;ve veered into building a homelab, C#, rust, infrastructure, gardening
and all kinds of other fun experiences.&lt;&#x2F;p&gt;
&lt;p&gt;More importantly my daughter was born, and is turning 3 this year. Over 2020 I
became more and more aware of what I spent time on, and started to evaluate if
I wanted to keep spending time on these activities. Many things have fallen to
the cutting room floor, and writing up a post each month is one of those. I still
do a lot of writing for work, and maybe if something from there manifest itself
as a good topic I&#x27;ll share it, but I am not going to make myself sit down each
month as I have in the past.&lt;&#x2F;p&gt;
&lt;p&gt;I do plan to have short journal snippets I capture each day that I will link to
here eventually. Many of them will be software related as that&#x27;s what I spend so
much time on each day, but all of them won&#x27;t be.&lt;&#x2F;p&gt;
&lt;p&gt;So yeah, hopefully the notes here have helped somebody. They will stay up, but I
need to give myself permission to let this sit while I spend time elsewhere, maybe
to return one day :)&lt;&#x2F;p&gt;
&lt;p&gt;As always if you read something interesting, or find a code snippet that could use
expounding send me a message.&lt;&#x2F;p&gt;
&lt;p&gt;Till the next post surfaces 👋&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Reading highlights from Q1 2021</title>
            <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/2021-q1-reading/</link>
            <guid>https://burningdaylight.io/posts/2021-q1-reading/</guid>
            <description>&lt;p&gt;I read a lot of books throughout the year, but rarely write anything up
after finishing them. While I don&#x27;t think I have enough to say about
any one book after my first read, I want to capture a sentence or two
about them to look back on, and to share with others. If I mention a book
here that you want to talk about send me a &lt;a href=&quot;mailto:alexander@burningdaylight.io&quot;&gt;message&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;q1-2021-list&quot;&gt;Q1 2021 List&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;A Philosophy of Software Design - a good read that will impact how you think
about writing your code. Many of these ideas have permeated out into general
software culture (I think, maybe I&#x27;m in a bubble), but I would recommend this.&lt;&#x2F;li&gt;
&lt;li&gt;Why we make things and why it matters - an interesting read on crafts and
why we should embrace them.&lt;&#x2F;li&gt;
&lt;li&gt;Humankind - good, but long at many points&lt;&#x2F;li&gt;
&lt;li&gt;Kubernetes Getting Started - as advertised&lt;&#x2F;li&gt;
&lt;li&gt;The Unix Administrators Handbook - I had a former manager recommend this book
to me. I&#x27;ve read it through twice now and I always learn something new.&lt;&#x2F;li&gt;
&lt;li&gt;Fluent Python 2nd Edition - A really good book on Python exploring areas that
are not always tread, and Luciano does a great job of answering &amp;quot;why&amp;quot; as he goes.&lt;&#x2F;li&gt;
&lt;li&gt;Django Crash Course - as advertised, a good alternative or secondary first
Django tutorial.&lt;&#x2F;li&gt;
&lt;li&gt;A Scoop of Django - A good read. I don&#x27;t feel like the answer of why is always
explained to the level I would like. It&#x27;s hit and miss, sometimes it is, sometimes
there is a link to a blog that I may get around to reading one day. A good book
none the less.&lt;&#x2F;li&gt;
&lt;li&gt;How to Invent Everything - probably my favorite book so far this year. This is
a lot of fun and I look forward to reading it with my daughter one day.&lt;&#x2F;li&gt;
&lt;li&gt;Think Julia - I&#x27;ve heard a bit about Julia and decided to check this out. A
pretty good book revisiting a lot of programming first principles in the context
of learning them with Julia.&lt;&#x2F;li&gt;
&lt;li&gt;Math for Programmers - I really enjoyed this. I try to keep math as a regular
reading topic, and I like it when math is demonstrated via programming.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Entropy</title>
            <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/entropy/</link>
            <guid>https://burningdaylight.io/posts/entropy/</guid>
            <description>&lt;p&gt;noun: entropy; plural noun: entropies; symbol: S&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;a thermodynamic quantity representing the unavailability of a system&#x27;s thermal
energy for conversion into mechanical work, often interpreted as the degree of
disorder or randomness in the system. &amp;quot;the second law of thermodynamics says that
entropy always increases with time&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;lack of order or predictability; gradual decline into disorder.
&amp;quot;a marketplace where entropy reigns supreme&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;(in information theory) a logarithmic measure of the rate of transfer of
information in a particular message or language.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Everything we build and learn requires constant maintenance and labor.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Finding good defaults</title>
            <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/using-good-defaults/</link>
            <guid>https://burningdaylight.io/posts/using-good-defaults/</guid>
            <description>&lt;p&gt;At heart many of us are tinkerers. We like to take things apart and see how they
work. We enjoy spending hours customizing our tools, scripts and applications.
But all of this adds up. It means that our tool works different from all the
others. For somebody else coming behind us it may mean piecing together all the
flags and tweaks no matter how well we documented or versioned tweaks in our repo,
time will bring a divergence between the system and the repo.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of this has set in for me over the years teaching programming, speaking
with family about their devices, and onboarding to new code bases as I change
teams.&lt;&#x2F;p&gt;
&lt;p&gt;I want to try out something new over the next few years, and that is finding
good defaults. If I feel the need to tweak&#x2F;change a tool out of the box, I&#x27;ll
try other options. I have some theories around this.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Good defaults save us time&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t require extra conversations for team consensus&lt;&#x2F;li&gt;
&lt;li&gt;Help manage complexity&lt;&#x2F;li&gt;
&lt;li&gt;Build on expertise&lt;&#x2F;li&gt;
&lt;li&gt;Teach us to expect good defaults, and to build our software with good defaults&lt;&#x2F;li&gt;
&lt;li&gt;Good defaults help others join in&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Against this list I also believe there is a counter culture around defaults
wrapped up in programmer&#x2F;hacker&#x2F;software engineer reputation that drives us to
distrust or question anything we haven&#x27;t pulled apart and customized. This creates
an extra challenge.&lt;&#x2F;p&gt;
&lt;p&gt;I know that each domains &amp;quot;good defaults&amp;quot; will be different, but that doesn&#x27;t
mean they don&#x27;t exist. My hypothesis is that they can save us time, help us
build what matters, and help those who are join in, or come after. Lets find out.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Setting up a CI pipeline for Rust in Teamcity</title>
            <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/teamcity-rust-ci/</link>
            <guid>https://burningdaylight.io/posts/teamcity-rust-ci/</guid>
            <description>&lt;p&gt;Towards the end of last year I started working on a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;&quot;&gt;project&lt;&#x2F;a&gt;
in rust that would listen to a message queue and send an email. Additionally it
used &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&#x2F;&quot;&gt;rocket&lt;&#x2F;a&gt; to expose some diagnostic endpoints to check
on the health of the service, change log levels, etc. When starting new projects
I default to setting up a build pipeline for them to. For this project I setup
pipelines in teamcity which was overall pretty easy, but sharing here for anybody
else that may go down this path.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-make&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sagiegurari&#x2F;cargo-make&quot;&gt;cargo-make&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For new projects I like to capture the build, admin and CI steps in a way that makes
it convenient for others to run on their local machine. Make and it&#x27;s derivatives
(cmake, cake, etc) provide a useful task abstraction and Rust has the powerful
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sagiegurari&#x2F;cargo-make&quot;&gt;cargo-make&lt;&#x2F;a&gt; project that lets us capture
task and mix together inline simple commands with scripts, dependencies etc.&lt;&#x2F;p&gt;
&lt;p&gt;For this project you can find my cargo make file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;tree&#x2F;Makefile.toml&quot;&gt;here&lt;&#x2F;a&gt;.
I also experimented with using Powershell for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;tree&#x2F;tools&quot;&gt;scripts&#x2F;wrappers&lt;&#x2F;a&gt;.
I&#x27;ve been using this in my day job where our projects run on Win, macOS and Linux.
Overall I&#x27;m pretty happy with the experience, but it is another tool to install and
maintain along with various platforms missing support.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-test&quot;&gt;cargo test&lt;&#x2F;h2&gt;
&lt;p&gt;Rust comes with a build tool and test runner built in via cargo. Running test
is easy out of the box, but I needed to make use of a couple tools to get the
cargo test output into a format that a CI tool parses. I ended getting test and
coverage data in the junit and lcov formats that way various tools and platforms
can be used across time and projects.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;grcov&quot;&gt;grcov&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;johnterickson&#x2F;cargo2junit&quot;&gt;cargo2junit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;teamcity&quot;&gt;Teamcity&lt;&#x2F;h2&gt;
&lt;p&gt;With those tools orchestrated via &lt;code&gt;cargo make&lt;&#x2F;code&gt; it&#x27;s time to setup the build and
test steps in Teamcity. Overall the process was pretty easy, but I ran into a couple
bumps I&#x27;ll highlight.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;cargo&lt;&#x2F;code&gt; step doesn&#x27;t support custom commands, so I don&#x27;t use that by default
&lt;ul&gt;
&lt;li&gt;I wrote &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;tree&#x2F;tools&#x2F;CI.ps1&quot;&gt;CI.ps1&lt;&#x2F;a&gt;
as a wrapper to use in each &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;tree&#x2F;.teamcity&#x2F;settings.kts#n88&quot;&gt;step&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Enable the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;tree&#x2F;.teamcity&#x2F;settings.kts#n186&quot;&gt;xml-report-plugin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And with those two things the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;artemis&#x2F;tree&#x2F;.teamcity&#x2F;settings.kts&quot;&gt;pipeline&lt;&#x2F;a&gt;
is ready to &lt;a href=&quot;https:&#x2F;&#x2F;teamcity.burningdaylight.io&#x2F;&quot;&gt;go&lt;&#x2F;a&gt;. From there you may want
to add your own environment variables, plugin, agent deps etc.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;With this pipeline up an running the next steps are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setup build caching with something like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sccache&quot;&gt;sccache&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Work on local and CI build times
&lt;ul&gt;
&lt;li&gt;This has been &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;rust-compile-times&#x2F;&quot;&gt;written&lt;&#x2F;a&gt; about
a &lt;a href=&quot;https:&#x2F;&#x2F;blog.mozilla.org&#x2F;nnethercote&#x2F;2020&#x2F;04&#x2F;24&#x2F;how-to-speed-up-the-rust-compiler-in-2020&#x2F;&quot;&gt;number&lt;&#x2F;a&gt;
of &lt;a href=&quot;https:&#x2F;&#x2F;pingcap.com&#x2F;blog&#x2F;rust-compilation-model-calamity&quot;&gt;times&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I would need to make both of these better before taking the project further. As
the project grows these would only get worse, and make the project unpleasant for
others to work on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;done&quot;&gt;Done&lt;&#x2F;h2&gt;
&lt;p&gt;That&#x27;s it for now. I learned a lot along the way about Rust, cargo, and hooking
it up with Teamcity. I&#x27;m not sure I&#x27;ll have a write up on artemis anytime soon.
It was a good project, but I ultimately took another path. Hopefully this helps
somebody, and as always feel free to &lt;a href=&quot;mailto:alexander@burningdaylight.io&quot;&gt;reach out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>recommended reading</title>
            <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/docs/shelf/</link>
            <guid>https://burningdaylight.io/docs/shelf/</guid>
            <description>&lt;h1 id=&quot;the-book-shelf&quot;&gt;The Book Shelf&lt;&#x2F;h1&gt;
&lt;p&gt;Here is a collection of books and writing that I have enjoyed or found useful.
Let me know if you have recommendations for my next read.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;books&quot;&gt;Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;37564.A_Different_Mirror&quot;&gt;A Different Mirror&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;A_Pattern_Language&quot;&gt;A Pattern Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.algorist.com&quot;&gt;The Algorithm Design Manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;us.macmillan.com&#x2F;books&#x2F;9780374538668&quot;&gt;Blockchain Chicken Farm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;citation.cfm?id=3153875&quot;&gt;Computer Organization and Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;the-phoenix-project&#x2F;9781457191350&#x2F;&quot;&gt;The Phoenix Project&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;classic-computer-science-problems-in-python&quot;&gt;Classic Computer Science Problems in Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;design-patterns-elements&#x2F;0201633612&#x2F;&quot;&gt;Design Patterns Elements of Reusable Object Oriented Software&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dataintensive.net&#x2F;&quot;&gt;Designing Data-Intensive Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pearson.com&#x2F;us&#x2F;higher-education&#x2F;program&#x2F;Spinellis-Effective-Debugging-66-Specific-Ways-to-Debug-Software-and-Systems&#x2F;PGM328356.html&quot;&gt;Effective Debugging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.howtoinventeverything.com&quot;&gt;How to Invent Everything&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;203&quot;&gt;Make Electronics 2nd Edition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;shop.oreilly.com&#x2F;product&#x2F;0636920017776.do&quot;&gt;Making Embedded Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pragprog.com&#x2F;book&#x2F;jbmaze&#x2F;mazes-for-programmers&quot;&gt;Mazes for Programmers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imagecomics.com&#x2F;comics&#x2F;releases&#x2F;monstress&quot;&gt;Monstress&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;gtfo&quot;&gt;PoC || GTGO 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pragprog.com&#x2F;book&#x2F;tpp20&#x2F;the-pragmatic-programmer-20th-anniversary-edition&quot;&gt;The Pragmatic Programmer 2nd Edition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mitpress.mit.edu&#x2F;sites&#x2F;default&#x2F;files&#x2F;sicp&#x2F;index.html&quot;&gt;SICP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pragprog.com&#x2F;book&#x2F;jgade&#x2F;test-driven-development-for-embedded-c&quot;&gt;Test Driven Development for Embeddedd C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;tlcl2&quot;&gt;The Linux Command Line 2nd Edition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;unix-and-linux&#x2F;9780134278308&#x2F;&quot;&gt;Unix and Unix System Administration Handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imagecomics.com&#x2F;comics&#x2F;series&#x2F;saga&quot;&gt;Saga&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Culture_series&quot;&gt;The Culture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zen_and_the_Art_of_Motorcycle_Maintenance&quot;&gt;Zen and the Art of Motorcycle Maintenance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;newsletters&quot;&gt;Newsletters&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;eepurl.com&#x2F;bQmQqD&quot;&gt;Hackaday&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ganssle.com&#x2F;tem-subunsub.html&quot;&gt;The Embedded Muse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theprepared.org&#x2F;newsletter&quot;&gt;The Prepared&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;my-feed&quot;&gt;My Feed&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;feed&quot;&gt;RSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;n0mn0m.newsblur.com&quot;&gt;Favorites&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>The joy of repair</title>
            <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/joy-of-repair/</link>
            <guid>https://burningdaylight.io/posts/joy-of-repair/</guid>
            <description>&lt;p&gt;A few weeks ago the Z Upper Right Assembly broke on my Mini 2. At first,
I wasn&#x27;t quite sure what was wrong I only knew that the tool head couldn&#x27;t
raise on the right-hand side. In an email to Adrian (at Lulzbot) we figured
out the part had a hairline crack. In a year without covid I could have gone
down to &lt;a href=&quot;https:&#x2F;&#x2F;www.lvl1.org&#x2F;&quot;&gt;LVL1&lt;&#x2F;a&gt; to make a replacement part, but not
this year. Luckily Lulzbot was easy to get a print from, and really fast
too (kudos to them, and that&#x27;s nice to know for the future).&lt;&#x2F;p&gt;
&lt;p&gt;With this being my first repair I was a bit nervous. I had never taken my
mini apart or tinkered too much instead opting for that with my prints.
The good news is Lulzbot has amazing &lt;a href=&quot;https:&#x2F;&#x2F;ohai.lulzbot.com&#x2F;&quot;&gt;documentation&lt;&#x2F;a&gt;
for each printer that make repairs relatively straight forward. Beginning
to end taking things apart and getting them back together per the &lt;a href=&quot;https:&#x2F;&#x2F;ohai.lulzbot.com&#x2F;project&#x2F;z-axis-right-assembly-mini2&#x2F;mini-2&#x2F;&quot;&gt;doc&lt;&#x2F;a&gt;
took me an hour, and then it was go time. My first print
was &lt;a href=&quot;https:&#x2F;&#x2F;www.lulzbot.com&#x2F;content&#x2F;meet-rocktopus&quot;&gt;rocktopus&lt;&#x2F;a&gt; which
came out great. Seeing the right-hand axis work as expected was a huge
relief, and gives me some confidence that I could do more for in the realm
of mods and repairs in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Why does this matter? Because &lt;a href=&quot;https:&#x2F;&#x2F;www.ifixit.com&#x2F;Manifesto&quot;&gt;if you can&#x27;t fix it, you don&#x27;t own it&lt;&#x2F;a&gt;,
and I was blown away how easy it was to fix my Lulzbot. On top of that
it was fun. Outside of gardening I don&#x27;t have the opportunity to just fix
stuff with my hands that much, and I miss that. Something to look into this
year maybe?&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Reading highlights from Q4 2020</title>
            <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/2020-q4-reading/</link>
            <guid>https://burningdaylight.io/posts/2020-q4-reading/</guid>
            <description>&lt;p&gt;I read a lot of books throughout the year, but rarely write anything up
after finishing them. While I don&#x27;t think I have enough to say about
any one book after my first read, I want to capture a sentence or two
about them to look back on, and to share with others. If I mention a book
here that you want to talk about send me a &lt;a href=&quot;mailto:alexander@burningdaylight.io&quot;&gt;message&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;q4-2020-list&quot;&gt;Q4 2020 List&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Zen and the Art of Motorcycle Maintenance
&lt;ul&gt;
&lt;li&gt;I&#x27;ve been really interested in the idea of quality and how we achieve
it in what we build. Everybody uses a different definition of &amp;quot;good&amp;quot;,
and I enjoyed the exploration of the topic in this book.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Blockchain Chicken Farm
&lt;ul&gt;
&lt;li&gt;Having grown up in rural kentucky and working
in industrial chicken farming, then pivoting to writing software after
high school this was a fantastic read. A lot to reflect on, the shared
humanity, and the audacity of the software industry shined beginning to
end.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Subprime Attention Crisis
&lt;ul&gt;
&lt;li&gt;A good exploration of the dangers in the ad
based internet economy. While the ad industry has made a lot of tools available
to those who couldn&#x27;t afford them outright, I think we can do better than
the current ad economy. While shrinking sectors can hurt, I think we need
to be careful not to accidentally lead individuals to believe we need to
maintain the ad economy at the invasive scale we are at today.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Understanding Computation
&lt;ul&gt;
&lt;li&gt;As advertised. Computational theory using
Ruby. I enjoyed the read and will probably revisit Part II sometime. It
is a big book covering a wide range of topics and I don&#x27;t think I internalized
Part II enough.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The Hardware Hacker
&lt;ul&gt;
&lt;li&gt;A collection of articles from &amp;quot;bunnie&amp;quot; relaying
his experience and some philosophies while manufacturing in the open. The
term &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shanzhai&quot;&gt;shanzhai&lt;&#x2F;a&gt; has popped up here
and in other reading over the last few years.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Angular Development with Typescript, Second Edition
&lt;ul&gt;
&lt;li&gt;What it sounds like. Reading this for work, and it was helpful as I
got going with Angular.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Programming Typescript
&lt;ul&gt;
&lt;li&gt;What it sounds like. A good read after going
through the docs at typescriptlang.org.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Vader Down
&lt;ul&gt;
&lt;li&gt;Vader being Vader. Fun short read.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Shadowfall
&lt;ul&gt;
&lt;li&gt;This popped up as new at the library, and I was a few chapters
in when I realized I had missed the first book in a series. So far I like
it. It&#x27;s in the same vein as rogue squadron, and the author is working to
write characters in a complicated environment. Curious to see how the series
wraps up and if the character arcs land.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Org templates and checklist</title>
            <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/org-templates/</link>
            <guid>https://burningdaylight.io/posts/org-templates/</guid>
            <description>&lt;p&gt;Last year I read the &lt;a href=&quot;http:&#x2F;&#x2F;atulgawande.com&#x2F;book&#x2F;the-checklist-manifesto&#x2F;&quot;&gt;&amp;quot;The Checklist Manifesto&amp;quot;&lt;&#x2F;a&gt;
about the outsized impact a checklist can have on an individual and teams.&lt;&#x2F;p&gt;
&lt;p&gt;I also started using &lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;&lt;code&gt;org-mode&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to keep a daily
journal of what I&#x27;m working on, design notes, todos etc. Having spent
a few weeks with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bastibe&#x2F;org-journal&quot;&gt;&lt;code&gt;org-journal&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
I decided it was time to create my own &lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;manual&#x2F;Capture-templates.html&quot;&gt;templates&lt;&#x2F;a&gt;.
For my first template a checklist seemed like an easy target. I made
a few like PR Review, and New Service which can be found in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;dotfiles&#x2F;tree&#x2F;s&#x2F;.emacs.d&#x2F;org-templates&quot;&gt;dotfiles&lt;&#x2F;a&gt;
along with their bindings.&lt;&#x2F;p&gt;
&lt;p&gt;True to the goal, I&#x27;ve got a lot more consistent in my reviews and with
capturing review artifacts. The service checklist has been turned into a
dotnet template that saves even more time.&lt;&#x2F;p&gt;
&lt;p&gt;Yay checklist!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>projects</title>
            <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/docs/projects/</link>
            <guid>https://burningdaylight.io/docs/projects/</guid>
            <description>&lt;h1 id=&quot;projects-i-have-worked-on-from-2011-present&quot;&gt;Projects I have worked on from 2011 - Present&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;professional&quot;&gt;Professional&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;renci&quot;&gt;RENCI&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rencisystems.web.unc.edu&#x2F;helx&#x2F;&quot;&gt;HeLx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;HeLx is a digital home for data science communities. RENCI leverages HeLx to
empower plant genomics, biomedical, clinical, and neuroscience researchers to
do work with their tools, close to the data, in the cloud, at scale:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python, React, bash, Kubernetes, Docker, Jenkins&lt;&#x2F;p&gt;
&lt;h3 id=&quot;samtec&quot;&gt;Samtec&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Asset Management System&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Build out an asset management platform to synchronize existing asset
data and centralize the ongoing management of assets in one location.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C# 8, .NET Core, Typescript, Angular 11, REST APIs, MongoDB, SQL Server,
AWS, SQS, SNS, Fargate, CloudFront, S3, Azure Pipelines, Docker, bash&#x2F;PowerShell,
git&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Asset Maintenance System&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Build an asset maintenance system to support global operations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C#, .NET Core, Typescript, Angular 11, Quartz.NET, REST APIs, MongoDB,
AWS, SQS, SNS, Fargate, CloudFront, S3, Azure Pipelines, Docker, bash&#x2F;PowerShell,
git&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;humana&quot;&gt;Humana&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Provider Fax Routing System&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Build out OCR as a service for provider patient record fax documents&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, REST API, Tesseract, Jupyter, Docker, docker-compose, Azure
Dev Ops, Azure Pipelines, Azure Functions, Azure Queues, Azure Blob
Storage, CosmosDB Artifactory, git, bash&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sytrue Middleware&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Support a middleware layer and rule management for Humana Sytrue initiatives&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, Django, REST API, Jupyter, NLP, Docker, docker-compose, Azure
Dev Ops, Azure Pipelines, Azure Blob Storage, Azure Datalake Storage
Gen 2, SQL Server, Databricks, Apache Spark, Artifactory, git&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sytrue Middleware&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Support a middleware layer and rule management for Humana Sytrue initiatives&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, Django, REST API, Jupyter, NLP, Docker, docker-compose, Azure
Dev Ops, Azure Pipelines, Azure Blob Storage, Azure Datalake Storage
Gen 2, SQL Server, Databricks, Apache Spark, Artifactory, git&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Breast Cancer Research Project&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Research using NLP to assist in the understanding of stage information
based on diagnosis markers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, PySpark, NLP, SQL, HDFS, bash&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Doctor Patient Note OCR&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Increase OCR post processing data throughput by migrating localized
python services to pyspark.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, PySpark, SQL, XML, HDFS, Flask, REST API, bash&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Potential Fraud Rule Detection&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Process provider documentation against a set of NLP rules to flag the
need for provider rule setup.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 2, SQL, Red Hat Linux, Netezza, SQL Server&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fraud Rule Evaluation&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Evaluate the effectiveness of provider review rules.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, SQL, SQL Server&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SIU Investigator Reports&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Build out a library of queries and reports to assist fraud investigators.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C#, SSIS, SQL, SQL Server, Excel, QuickLogic&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;elastic&quot;&gt;Elastic&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GCP Marketplace&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Integrate the Elastic Cloud offering with the GCP Marketplace so customers
can create clusters from their GCP dashboard.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 3, GCP, PubSub, Postgres, Elasticsearch, Docker, docker-compose&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Python 2 to 3 migration&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Started the migration of the Python 2 billing system to Python 3&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python 2 &amp;amp; 3, Tornado, Docker, pytest&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;aspect-software&quot;&gt;Aspect Software&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PetSafe, Delta, Jet Blue&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Build out Microsoft SSIS&#x2F;SSAS analytics infrastructure to support customer
service call center operations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C#, SSIS, SSAS, SSRS, SQL, MDX, SQL Server 2008, Excel Power BI, Powershell&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Data Visualization&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Build out web-based data visualizations to support various application
development teams focused on healthcare projects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C#, .NET Framework 3.5, Razor Pages, KendoUI, JavaScript, JQuery, REST
Apis SQL Server 2008&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;all-safe-industries&quot;&gt;All Safe Industries&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Product Catalog ETL&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Built an application to consolidate various sources of product data into
our web CMS.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C#, .NET Framework 3, Razor Pages, REST API&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;owensboro-catholic-high-school&quot;&gt;Owensboro Catholic High School&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Printer fleet management&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Scripted out the install and management of printers across computer
labs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;VB6, COM&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Active Directory Group Policy management and deployment&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Develop Active Directory group policies and role them out across school
groups&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Windows XP, Active Directory 2008&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;personal&quot;&gt;Personal&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Circuit Roomba&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Setup SMS interaction with home roomba to be able to text commands the
roomba would process and respond to.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CircuitPython, SMS, Twilio, Raspberry Pi, LoRa&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;On Air&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trained an NLP model to run on an ESP32 responding to a wake word and
command do toggle a status indicator display.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;C++, Tensorflow Lite, ESP-IDF, CircuitPython, Rust, SledDB, REST API,
bash&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Valentine&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A bluetooth sensor that changes board LED colors based on the count
of devices in local proximity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CircuitPython, Bluetooth&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Self Hosted Home Server&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A home server used to run my website, git repos, build pipelines and
more.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Core Technology&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Docker, docker-compose, traefik2, Minio, Postgres, bash, TeamCity, nginx&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;open-source&quot;&gt;Open Source&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;pymssql&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Help get the library update to cut a new release addressing several
bugs and issues users encountered.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;PRs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pymssql&#x2F;pymssql&#x2F;pull&#x2F;587&quot;&gt;2.1.4 release coordinator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pymssql&#x2F;pymssql&#x2F;pull&#x2F;577&quot;&gt;Build updates&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pymssql&#x2F;pymssql&#x2F;pull&#x2F;591&quot;&gt;Assist others to contribute to the project&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pymssql&#x2F;pymssql&#x2F;pulls?q=is%3Apr+author%3An0mn0m+&quot;&gt;etc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Firefox mobile android&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mobile browser update for a bug I and others experienced.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;PRs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.mozilla.org&#x2F;show_bug.cgi?id=769391&quot;&gt;Orientation bug fix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Apache Arrow&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Documentation and minor behavior updates based on using the library.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;PRs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;pull&#x2F;1765&#x2F;files&quot;&gt;Add hash path&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;pull&#x2F;1820&#x2F;files&quot;&gt;Documentation updates&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;pull&#x2F;2057&quot;&gt;Memory subpool allocation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;aioodbc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Documentation updates based on using the library.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;PR&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aio-libs&#x2F;aioodbc&#x2F;pull&#x2F;176&quot;&gt;Configuration tuning documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Code Louisville&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Volunteer Instructor and content creator for Python web and data analysis
tracks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
        <item>
            <title>resume</title>
            <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/docs/resume/</link>
            <guid>https://burningdaylight.io/docs/resume/</guid>
            <description>&lt;h1 id=&quot;profile&quot;&gt;Profile&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Alexander Hagerman&lt;&#x2F;strong&gt; &lt;a href=&quot;mailto:alexander@burningdaylight.io&quot;&gt;alexander@burningdaylight.io&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Portfolios: &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;&quot;&gt;burningdaylight&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&quot;&gt;github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I am a software engineer with a decade of experience across various stacks,
domains and engineering practices. I enjoy working in environments that
require continuous learning and collaboration to solve new and challenging
problems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;professional-experience&quot;&gt;Professional Experience&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Software Engineer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;02&#x2F;2021 - Current | RENCI&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Working to develop the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helxplatform&quot;&gt;helxplatform&lt;&#x2F;a&gt; to support
NIH HEAL research.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Lead Software Engineer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;06&#x2F;2020 - 02&#x2F;20201 | Samtec&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Lead&#x2F;manage the development of new asset management system to synchronize
asset data and streamline existing assets.&lt;&#x2F;li&gt;
&lt;li&gt;Created an improved asset maintenance system to support global operations.&lt;&#x2F;li&gt;
&lt;li&gt;Collaborate with engineers and internal stakeholders to execute feature
implementations and process improvement.&lt;&#x2F;li&gt;
&lt;li&gt;Provide key insights for organizational planning on long-term data management
and optimization.&lt;&#x2F;li&gt;
&lt;li&gt;Showcase leadership by mentoring, coaching, and training engineers in
new practices&#x2F;tools&#x2F;technology.&lt;&#x2F;li&gt;
&lt;li&gt;Develop and oversee continuous integration and deployment infrastructure
to increase overall productivity.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Senior Software Engineer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;08&#x2F;2019 - 06&#x2F;2020; 07&#x2F;2015 – 3&#x2F;2019 | Humana&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Spearheaded the creation of a provider fax routing system by building
out OCR as a service for patient record documents.&lt;&#x2F;li&gt;
&lt;li&gt;Facilitated the implementation of middleware layer&#x2F;rule management for
company Sytrue initiatives.&lt;&#x2F;li&gt;
&lt;li&gt;Setup, deployed, and managed first real time NLP services on Azure to
strengthen job progression and computer capabilities.&lt;&#x2F;li&gt;
&lt;li&gt;Collaborated on breast cancer research project by utilizing NLP to research
stage information based on diagnosis markers.&lt;&#x2F;li&gt;
&lt;li&gt;Increased Doctor Patient Note OCR post processing data throughput by migrating
localized python services to pyspark.&lt;&#x2F;li&gt;
&lt;li&gt;Monitored potential fraud rule detection by processing provider documentation
a set of NLP rules.&lt;&#x2F;li&gt;
&lt;li&gt;Built&#x2F;managed a library of queries and reports to assist fraud investigators.&lt;&#x2F;li&gt;
&lt;li&gt;Assisted NLP development team in the transition to Agile methodologies
through change management and team leadership skills.&lt;&#x2F;li&gt;
&lt;li&gt;Foster continuous process improvement by implementing Azure identity service
(MSAL&#x2F;AAD) into C# and Python services.&lt;&#x2F;li&gt;
&lt;li&gt;Develop prem to Azure Databricks deployment service, ADLS Generation 2
C# library, and CLI.&lt;&#x2F;li&gt;
&lt;li&gt;Served as architect and senior developer of the Retail Data Science Research
and Development platform.&lt;&#x2F;li&gt;
&lt;li&gt;Introduced and streamlined multiple software development practices like
version control, continuous integration&#x2F;deployment, code review, and dependency
management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Senior Software Engineer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;04&#x2F;2019 - 08&#x2F;2019 | Elastic&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Partnered with cross-functional teams to develop end-to-end testing framework
for customer journey through GCP marketplace to Elastic.&lt;&#x2F;li&gt;
&lt;li&gt;Provided value-added contributions in the migration of backend services
from Python 2 to Python 3.7.&lt;&#x2F;li&gt;
&lt;li&gt;Applied expansion efforts and process improvements in automated testing
practices for Python 2 and 3 code bases.&lt;&#x2F;li&gt;
&lt;li&gt;Built a tool that enabled data migration from Elasticsearch to Postgres.&lt;&#x2F;li&gt;
&lt;li&gt;Formulated the billing integration service for Elastic stack and Google
Cloud Platform Marketplace.&lt;&#x2F;li&gt;
&lt;li&gt;Delivered troubleshooting and production incident response for billing
services and clusters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Senior Analytic Consultant | Analytic Consultant | Developer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;01&#x2F;2012 - 07&#x2F;2015 | Aspect&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Built out Microsoft SSIS&#x2F;SSAS analytics infrastructure to support customer
service call center operations for PetSafe, Delta, and Jet Blue.&lt;&#x2F;li&gt;
&lt;li&gt;Created enhanced web-based data visualizations to facilitate cross-functional
application development teams on healthcare projects.&lt;&#x2F;li&gt;
&lt;li&gt;Delivered on-site consulting and guidance to clients by evaluating call
center analytic needs.&lt;&#x2F;li&gt;
&lt;li&gt;Developed new productivity KPIs for call center clients via Microsoft
BI stack to transform overall day-to-day operations and facilitate process
improvement.&lt;&#x2F;li&gt;
&lt;li&gt;Headed client training programs on business intelligence tools&#x2F;concepts
to assist in future BI projects and process improvement identification.&lt;&#x2F;li&gt;
&lt;li&gt;Served as developer on SharePoint 2013 C# Applications, C# MVP Applications,
and custom C# CLI applications to handle token management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Junior Developer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;03&#x2F;2012 - 11&#x2F;2012 | All Safe Industries&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Built a product catalog ETL to consolidate product data into a single CMS.&lt;&#x2F;li&gt;
&lt;li&gt;Analyzed historical sales trends to improve decision making for web store strategies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Intern&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;01&#x2F;2011 - 05&#x2F;2011 | Owensboro Catholic Highschool&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Developed VB6 scripts for printer fleet management by scripting out the install&#x2F;management for printers across all computer labs.&lt;&#x2F;li&gt;
&lt;li&gt;Administered active directory group policy&#x2F;deployment by developing policies and implementing across all school groups.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Education&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;08&#x2F;2011 | Bachelor of Science in Computer Information Technologies | Western Kentucky University&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;License &amp;amp; Certification&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;UT.6.10x: Embedded Systems - Shape the World: Microcontroller Input&#x2F;Output
(edX, November 2019)&lt;&#x2F;li&gt;
&lt;li&gt;MCSD: Web Applications (Microsoft, June 2014)&lt;&#x2F;li&gt;
&lt;li&gt;Developing Microsoft Azure and Web Services (Microsoft, June 2014)&lt;&#x2F;li&gt;
&lt;li&gt;Developing ASP.NET MVC 4 Web Applications (Microsoft, February 2013)&lt;&#x2F;li&gt;
&lt;li&gt;Programming in HTML5, CSS#, JavaScript 70-480 (Microsoft, January 2013)&lt;&#x2F;li&gt;
&lt;li&gt;Data Analysis with Pandas: Intermediate Course (Dataquest.io)&lt;&#x2F;li&gt;
&lt;li&gt;Data Visualization (Dataquest.io)&lt;&#x2F;li&gt;
&lt;li&gt;Triplebyte Certified Generalist Software Engineer (Triplebyte)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Technical Skills &amp;amp; Competencies&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Python, C#, Rust, SQL, Typescript, JavaScript, Bash, PowerShell, MSSQL,
Postgres, Hadoop, Spark, MongoDB, Elasticsearch, CosmosDB, RabbitMQ, Netezza,
Linux, Docker, AWS, Azure, GCP, Azure Pipelines, Azure DevOps, Software
Architecture, Software Testing, Pair Programming, Continous Intergration,
git, SQS, Fargate, CloudFront, S3, Tesseract, Jupyter, Artifactory, Django,
Azure Datalake Storage Gen 2, Databricks, Apache Spark, PubSub,
pytest, NLP, HDFS, XML, Flask, MDX,&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Awards &amp;amp; Talks&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DerbyPy&#x2F;python_for_embedded_systems&quot;&gt;Python for Embedded Hardware&lt;&#x2F;a&gt;
(DerbyPy, Louisville, KY) - June 2019&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DerbyPy&#x2F;what-is-odbc&quot;&gt;What is ODBC&lt;&#x2F;a&gt; (DerbyPy, Louisville,
KY) - March 2019&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DerbyPy&#x2F;intro-to-pyspark&quot;&gt;Intro to PySpark&lt;&#x2F;a&gt; (DerbyPy,
Louisville, KY) - October 2018&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DerbyPy&#x2F;modules-and-packages-intro&quot;&gt;Python Modules and Packages&lt;&#x2F;a&gt;
(DerbyPy, Louisville, KY) - September 2018&lt;&#x2F;li&gt;
&lt;li&gt;Column Oriented Data (DerbyPy, Louisville, KY) - June 2018&lt;&#x2F;li&gt;
&lt;li&gt;Hackaday Connected World Contest Award - Connected Roomba&lt;&#x2F;li&gt;
&lt;li&gt;2018 Humana Star Award - Data Engineering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Volunteer &amp;amp; Open-Source Experience&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Code Louisville - taught a range of topics including Python, debugging,
databases, and Django&lt;&#x2F;li&gt;
&lt;li&gt;PyMSSQL - mentor contributors, updated CI and platform builds, release
manager for 2.1.4&lt;&#x2F;li&gt;
&lt;li&gt;Apache Arrow - setup.py and API documentation updates, Subpool implementation,
and add has capabilities for scalar values in Python&lt;&#x2F;li&gt;
&lt;li&gt;aioodbc - configuration tuning documentation&lt;&#x2F;li&gt;
&lt;li&gt;Firefox Mobile - bug fix for incorrect axis locking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Memberships&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ACM&lt;&#x2F;li&gt;
&lt;li&gt;Hardware Happy Hour Louisville&lt;&#x2F;li&gt;
&lt;li&gt;DerbyPy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Use data structures for your business logic</title>
            <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/modeling-business-with-data-structures/</link>
            <guid>https://burningdaylight.io/posts/modeling-business-with-data-structures/</guid>
            <description>&lt;p&gt;A few months ago I was reviewing a PR that handled relationships between
entities. As I was working through the code I started to notice a pattern
that made me go back to the original feature ticket for a quick review of
the acceptance criteria. As I suspected there was a list of around 10
&amp;quot;if this then that&amp;quot; scenarios detailed, all of which manifested as conditions
in the code. Grabbing a pen and paper I started to draw out the criteria
and as I suspected all the scenarios were captured by relationships and
operations for a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tree_(data_structure)&quot;&gt;Tree&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Going back with this information I paired with the team on an update to
the PR where we reduced the amount of conditions tied directly to the business
domain, and refactored names so that future maintainers could interact
with the code understanding a tree, but maybe not understanding all the
business logic around the entities.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;in case it&#x27;s helpful the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sestoft&#x2F;C5&#x2F;&quot;&gt;C5&lt;&#x2F;a&gt;
project has some collections not found in the .NET Standard library for
interacting with Trees. In general an interesting project I&#x27;m glad I
learned about.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A similar opportunity emerged on the same project when we needed to make
sure a value was unique over a series of operations. In this scenario while
working on a collection of objects we were able to use a &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.collections.generic.hashset-1?view=net-5.0&quot;&gt;HashSet&lt;&#x2F;a&gt;
to exit if &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.collections.generic.hashset-1.add?view=net-5.0#System_Collections_Generic_HashSet_1_Add__0_&quot;&gt;Add&lt;&#x2F;a&gt;
returned &lt;code&gt;false&lt;&#x2F;code&gt; instead of setting up a &lt;code&gt;LINQ&lt;&#x2F;code&gt; query. This
resulted in less nesting, less code, and a simplified condition.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-point&quot;&gt;The Point&lt;&#x2F;h2&gt;
&lt;p&gt;The reason I am writing this is that we should be using data structures
to represent the business logic of our applications. This seems obvious,
but too often I have seen implementations brute force conditions leaving
data structures as an optimization, or a concern for &amp;quot;technical&amp;quot; projects.
While we can use a series of &lt;code&gt;if&lt;&#x2F;code&gt; conditions and predicates to meet requirements
in a crude way, using data structures provides an abstraction that can elevate
terse business logic to a construct future maintainers can derive extra
meaning from.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Self Hosting</title>
            <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/selfhosted/</link>
            <guid>https://burningdaylight.io/posts/selfhosted/</guid>
            <description>&lt;p&gt;Over the last few years I built up a sprawling list of dependencies
for my home project and blog workflow. Earlier this year I decided
it was time to cut down on that list and host my service dependecies
locally where I could. While it took me a while I reached a point
where I no longer tweak the setup week to week and decided it was
time to write up the process.&lt;&#x2F;p&gt;
&lt;p&gt;A quick list of the tools I used for orchestration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;shell&lt;&#x2F;li&gt;
&lt;li&gt;DNS&lt;&#x2F;li&gt;
&lt;li&gt;Traefik2&lt;&#x2F;li&gt;
&lt;li&gt;docker&#x2F;docker-compose&lt;&#x2F;li&gt;
&lt;li&gt;alpine linux&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;d-dns&quot;&gt;(D)DNS&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing I needed to do was make my services easy to reach local
and remote. Since this is all running behind my home router that also
means that my IP can change from time to time. To handle this I made
use of Gandi&#x27;s DNS API, and setup a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;georgr&#x2F;erx-gandi-nat-ddns&quot;&gt;shell script&lt;&#x2F;a&gt;
to run with cron on my router to keep my DNS records up to date. With
DNS ready I moved on to Traefik.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;traefik&quot;&gt;Traefik&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;traefik.io&quot;&gt;Traefik&lt;&#x2F;a&gt; is a really nice routing&#x2F;proxy service
that can inspect container labels and setup route forwarding while
handling certificate management, traffic metrics and more. The main
callout (other than what you will find in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.traefik.io&#x2F;traefik&#x2F;v2.3&#x2F;&quot;&gt;docs&lt;&#x2F;a&gt;
) is to keep an eye on what version you are using versus what others
used in examples, and that non http based traffic (for instance ssh)
requires a little more setup. Beyond that Traefik has been really
nice to use and made adding&#x2F;removing various services easy when coupled
with docker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker-compose&quot;&gt;docker-compose&lt;&#x2F;h2&gt;
&lt;p&gt;While k8s is the current hot orchestration tool I wanted to keep things
simple. I don&#x27;t have a need to cluster any of my home tools, and while
distributed systems are interesting they also require a lot of work. I
left those at my day job and use compose + &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;duplicity-helpers.git&#x2F;&quot;&gt;duplicity&lt;&#x2F;a&gt;
for my home setup. This makes service management easy, the labels
allow traefik to detect and handle traffic management while my
&lt;a href=&quot;http:&#x2F;&#x2F;duplicity.nongnu.org&quot;&gt;duplicty&lt;&#x2F;a&gt; ensures I won&#x27;t lose much work
and can quickly restore my data and restart any services in a few minutes
on any box with docker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;services&quot;&gt;Services&lt;&#x2F;h2&gt;
&lt;p&gt;A quick list of the services I&#x27;m hosting:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;git&lt;&#x2F;li&gt;
&lt;li&gt;cgit&lt;&#x2F;li&gt;
&lt;li&gt;minio&lt;&#x2F;li&gt;
&lt;li&gt;teamcity&lt;&#x2F;li&gt;
&lt;li&gt;youtrack&lt;&#x2F;li&gt;
&lt;li&gt;rust home services API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The service management can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;arcade.git&#x2F;tree&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve started to self host a few times in the past and backed away. This
time I think it&#x27;s here to stay. With my current setup I&#x27;m not worried about
what happens when something crashes, certificate management is automated
away and everything just works. I&#x27;ve linked to my orchestration code above,
but if you have any questions, or suggestions send them &lt;a href=&quot;mailto:contact@burningdaylight.io&quot;&gt;my way&lt;&#x2F;a&gt;.
If you are starting out on your own self hosted setup, good luck, have fun it&#x27;s
easier now than ever and I imagine it will continue to get better.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Roll your own git hook</title>
            <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/git-hooks/</link>
            <guid>https://burningdaylight.io/posts/git-hooks/</guid>
            <description>&lt;p&gt;As part of setting up &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;resharper-global-tools&#x2F;&quot;&gt;tools&lt;&#x2F;a&gt; to run in
our CI pipeline I also setup a git pre-push&lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Customizing-Git-Git-Hooks&quot;&gt;hook&lt;&#x2F;a&gt;
to run the same tools automatically in the local context. Git provides
a variety of hooks as documented in the scm book, and they can be used to
reliably automate different parts of your workflow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;In addition to the official docs &lt;a href=&quot;https:&#x2F;&#x2F;githooks.com&quot;&gt;this&lt;&#x2F;a&gt;
page has a nice summary&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code&quot;&gt;Code&lt;&#x2F;h2&gt;
&lt;p&gt;The pre-push hook I built for our project looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#!&#x2F;bin&#x2F;sh

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; rev-parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --show-toplevel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[32;1mRunning pre-push hook for${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;}\033[0m&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; restore $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[34;1mRunning resharper formatter\033[0m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; jb cleanupcode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.config&#x2F;cleanup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.editorconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --no-buildin-settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;AMS.sln
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;formatted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --porcelain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;v1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;dev&#x2F;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wc -l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;exit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;formatted

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[34;1mRunning dotnet resharper inspector\033[0m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; jb inspectcode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR AMS.sln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.editorconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;reports&#x2F;resharperInspect.xml

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;pwsh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;tools&#x2F;CheckResharperInspection.ps1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;? -eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[34;1mRunning resharper dupe finder\033[0m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[31;1mInspector Errors Found\033[0m&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;exit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; jb dupfinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR AMS.sln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;reports&#x2F;resharperDupFinder.xml

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;pwsh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROJECT_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;tools&#x2F;CheckDupeFinder.ps1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;? -eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[34;1mRunning dotnet test\033[0m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[31;1mDupe Errors Found\033[0m&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;exit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;docker-bg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dotnet-test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;? -eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;docker-down
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[34;1mGo go go!\033[0m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;docker-down
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;\033[31;1mTest failed\033[0m&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first thing that should stand out is that this is just a shell script.
Git hooks are just that, making it easy to use shell, python, powershell
or other tools with your hook. Write the script, link it to &lt;code&gt;.git&#x2F;hooks&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;script-breakdown&quot;&gt;Script Breakdown&lt;&#x2F;h2&gt;
&lt;p&gt;In this script the first thing I do is find the root of our project. This
makes it easy to reference paths in a manner compatible with scripts
and tools that are used throughout in other parts of our workflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install&quot;&gt;Install&lt;&#x2F;h2&gt;
&lt;p&gt;Since the hook above is just a shell script I like to keep it (and other hooks)
in a &lt;code&gt;tools&lt;&#x2F;code&gt; subdirectory in the root project directory. Because &lt;code&gt;git&lt;&#x2F;code&gt; expects
hooks to be under &lt;code&gt;.git&#x2F;hooks&lt;&#x2F;code&gt; we can make it executable with a symlink. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ln -s -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ..&#x2F;..&#x2F;tools&#x2F;pre-push.sh .git&#x2F;hooks&#x2F;pre-push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this in place we get feedback before each push so that we don&#x27;t have
to correct linting issues later, and we have can be confident our commit(s)
will run through CI successfully.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;While you may have heard of projects like &lt;a href=&quot;https:&#x2F;&#x2F;pre-commit.com&quot;&gt;pre-commit&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;typicode.github.io&#x2F;husky&#x2F;#&#x2F;&quot;&gt;husky&lt;&#x2F;a&gt; rolling your own hook is
relatively straight forward. While wrappers may help with complex hook setups
I personally like the low amount of indirection and abstraction that helps with
debugging when rolling your own.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Getting started with Resharper Global Tools</title>
            <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/resharper-global-tools/</link>
            <guid>https://burningdaylight.io/posts/resharper-global-tools/</guid>
            <description>&lt;p&gt;For a while now I&#x27;ve been interested in build tools, CI and code quality. I
think I got a taste for it as a member of the PyMSSQL project and it has
continued on from there. Recently I worked on the initial CI setup for a C#
project. As part of the setup I took the time to look at what lint and
analysis tools we wanted to integrate into our project.&lt;&#x2F;p&gt;
&lt;p&gt;For C# some of the more common tools appear to be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;roslyn-analyzers&quot;&gt;Roslyn Analyzers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.sonarsource.com&quot;&gt;Sonarsource&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ndepend.com&quot;&gt;NDepend&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;resharper&#x2F;&quot;&gt;Jetbrains Resharper&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I won&#x27;t go into the full criteria for our choice of Resharper (I&#x27;ll update this post
if I end up writing that up one day), instead I&#x27;ll summarize that Resharper provided:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;easy cross platform setup&lt;&#x2F;li&gt;
&lt;li&gt;ide&#x2F;editor and shell agnostic&lt;&#x2F;li&gt;
&lt;li&gt;works the same locally and in CI.&lt;&#x2F;li&gt;
&lt;li&gt;opinionated by default&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;resharper-command-line-tools&quot;&gt;Resharper Command Line Tools&lt;&#x2F;h2&gt;
&lt;p&gt;From the &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;help&#x2F;resharper&#x2F;ReSharper_Command_Line_Tools.html&quot;&gt;docs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ReSharper Command Line Tools is a set of free cross-platform standalone tools
that help you integrate automatic code quality procedures into your CI, version
control, or any other server.

You can also run coverage analysis from the command line.

The Command Line Tools package includes the following tools:

- InspectCode, which executes hundreds of ReSharper code inspections
- dupFinder, which detects duplicated code in the whole solution or narrower
scope
- CleanupCode, which instantly eliminates code style violations and ensures a
uniform code base
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;install&quot;&gt;Install&lt;&#x2F;h2&gt;
&lt;p&gt;To get started with Resharper tools (assuming you already have .NET Core
installed) run&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dotnet new tool-manifest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tool install JetBrains.ReSharper.GlobalTools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 2020.2.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which installs the &lt;a href=&quot;https:&#x2F;&#x2F;www.nuget.org&#x2F;packages&#x2F;JetBrains.ReSharper.GlobalTools&#x2F;2020.2.4&quot;&gt;Resharper Global Tools&lt;&#x2F;a&gt;
at the project level. This then allows CI and other contributors to use
&lt;code&gt;dotnet tool restore&lt;&#x2F;code&gt; in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Out of the box inspect, format, and dupefinder all have default configurations
that work well. That said each team has their own needs and preferences you
may want these tools to promote. While there are a few ways to configure
these tools I found using &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;help&#x2F;resharper&#x2F;Using_EditorConfig.html&quot;&gt;editorconfig&lt;&#x2F;a&gt;
to be the most human readable approach.&lt;&#x2F;p&gt;
&lt;p&gt;For additional details on the editorconfig format see the &lt;a href=&quot;https:&#x2F;&#x2F;editorconfig.org&quot;&gt;docs&lt;&#x2F;a&gt;
and this property &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;help&#x2F;rider&#x2F;EditorConfig_Index.html&quot;&gt;index&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;running&quot;&gt;Running&lt;&#x2F;h2&gt;
&lt;p&gt;Running the tools from a shell is relatively easy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;jb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cleanupcode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;.config&#x2F;cleanup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;.editorconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --no-buildin-settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&#x2F;Project.sln
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;jb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; inspectcode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR Project.sln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;reports&#x2F;resharperInspect.xml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;jb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; dupfinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR Project..sln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;reports&#x2F;resharperDupFinder.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing to note is that by default the autoformatting will attempt to enforce
line endings. If you have a team working across multiple platforms and using &lt;code&gt;git&lt;&#x2F;code&gt;
to automatically handle line endings these can come into conflict. It&#x27;s up to
you and your team to decide if you want to handle this by tweaking &lt;code&gt;git&lt;&#x2F;code&gt; behavior,
&lt;code&gt;editorconfig&lt;&#x2F;code&gt; or another method.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ci&quot;&gt;CI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;If your using Team City see &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;help&#x2F;resharper&#x2F;Detect_code_issues_in_a_build_using_ReSharper_and_TeamCity.html&quot;&gt;this&lt;&#x2F;a&gt;
doc for details.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With everything running in our shell locally we can also set things up to run
in our CI pipeline. Running the tools is easy as long as your CI platform has
a shell like task&#x2F;step&#x2F;operator:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; script: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dotnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tool restore
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;jb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cleanupcode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;.config&#x2F;cleanup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;.editorconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --no-buildin-settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&#x2F;Project.sln
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;jb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; inspectcode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR Project.sln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;reports&#x2F;resharperInspect.xml
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;jb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; dupfinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ERROR Project..sln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&#x2F;reports&#x2F;resharperDupFinder.xml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;displayName: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;Resharper&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course you will probably break these up for easier maintenance and
reporting.&lt;&#x2F;p&gt;
&lt;p&gt;Running the tools is easy. The trick is detecting when these tools find
an issue. I&#x27;ll share what I did in case it&#x27;s helpful, but long term it
would be great if Jetbrains had the tools exit with documented status
codes for different issues. As it stands the tools only exit with an
error if the tool fails, not when issues are reported.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cleanupcode&quot;&gt;CleanupCode&lt;&#x2F;h3&gt;
&lt;p&gt;Since &lt;code&gt;CleanupCode&lt;&#x2F;code&gt; will format our file rewriting it on disk we can use
git to detect the change.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;formatted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --porcelain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;v1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;dev&#x2F;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wc -l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;exit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;formatted
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;dupfinder&quot;&gt;dupFinder&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;dupFinder&lt;&#x2F;code&gt; outputs an XML file highlighting any issues found. Powershell&#x27;s
built in XML support makes it easy enough to query this file and see if any
issues exist.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;Select-Xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Path $(System.DefaultWorkingDirectory)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;reports&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;resharperDupFinder.xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;XPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&#x2F;DuplicatesReport&#x2F;Duplicates&#x2F;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;If &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;$null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;inspectcode&quot;&gt;InspectCode&lt;&#x2F;h3&gt;
&lt;p&gt;Similar to &lt;code&gt;dupFinder&lt;&#x2F;code&gt; &lt;code&gt;InspectCode&lt;&#x2F;code&gt; documents issues with an XML file, and
once again we can use Powershell to detect if there are any issues to fix.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;Select-Xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Path $(System.DefaultWorkingDirectory)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;reports&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;resharperInspect.xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;XPath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&#x2F;Report&#x2F;Issues&#x2F;Project&#x2F;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;If &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;$null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) { [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And since &lt;code&gt;dupFinder&lt;&#x2F;code&gt; and &lt;code&gt;InspectCode&lt;&#x2F;code&gt; output XML it can be useful to save
these as CI artifacts for review. In Azure Pipelines this looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PublishPipelineArtifact@1
  inputs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;targetPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;$(System.DefaultWorkingDirectory)&#x2F;reports&#x2F;&amp;#39;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;artifactName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;measurements&amp;#39;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;always()
  displayName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;Save ReSharper Results For Review.&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve been using the ReSharper tools for a few months now and I have to say they
provided what I was looking for in the beginning. The tools have been easy
to use, help us maintain our code and haven&#x27;t boxed us in or required a lot
of extra time on configuration and unseen gotchas. The only criticism I have is
cold start time is pretty slow for &lt;code&gt;cleanupcode&lt;&#x2F;code&gt;, and the return exit codes
could be better. Both of these would also help with CI, and our git hook setup.
Otherwise I think these will continue to serve us well and let us focus
on our project delivery.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>GroupBy Fun with SQL and Python</title>
            <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/group-by-python/</link>
            <guid>https://burningdaylight.io/posts/group-by-python/</guid>
            <description>&lt;p&gt;A few months ago I had the opportunity to collaborate with some Data Scientist
porting PySpark queries to raw Python. One of the primary areas of concern was
aggregation statements. These were seen as functionality that would be
particularly troublesome to write in Python. As an example I was provided a
Spark SQL query similar to this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ocr_data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;lvl&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e05252;color:#ffffff;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(txt_cols) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;c_txt&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;case_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;tk_pos&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;wrd_nm&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;c_txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;groupBy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(ln_cols) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;agg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sort_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;collect_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;tk_pos&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt_array&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt_ln&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;concat_ws&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt_array.case_std&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))) \
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;txt_array&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This query was transforming token data generated by Tesseract into lines.
Beyond the aggregation operation there was also some concern that the
operation may be ran against quite large datasets depending on how much
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tesseract-ocr&quot;&gt;Tesseract&lt;&#x2F;a&gt; output was being manipulated
at once.&lt;&#x2F;p&gt;
&lt;p&gt;Outside of the raw functionality I was asked if the data could be structured
to provide an interface with named columns in a style similar to SQL rather
than having to reference positional data.&lt;&#x2F;p&gt;
&lt;p&gt;All of this seemed fairly straightforward. Provided with some sample data I
pulled in the UDF that was already in Python and set out to apply the
transformations first illustrating how we could interact with the data in a way
similar to SQL with pipeline transformations and named references.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;porting-transformations&quot;&gt;Porting Transformations&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;itertools

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;csv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;DictReader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;collections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;namedtuple

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;case_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isupper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;():
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;islower&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;and not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isupper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;():
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;sampledata&#x2F;export.csv&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sample:
    reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;DictReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(sample)
    data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;reader]

a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;level&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, data)
filtered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, a)
fixed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;row, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;text&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;case_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;filtered)

tk_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;named_tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;tk_pos&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;word_num, text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;tk_pos&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tk_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;wrd_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;fixed)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To start I read the data in with a &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.7&#x2F;library&#x2F;csv.html#csv.DictReader&quot;&gt;DictReader&lt;&#x2F;a&gt;
which allowed me to reference values by name like &amp;quot;level&amp;quot; and &amp;quot;text&amp;quot;. I then
applied similar data transformations making use of &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.7&#x2F;library&#x2F;functions.html#filter&quot;&gt;filter&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;datastructures.html#list-comprehensions&quot;&gt;comprehensions&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;expressions.html&quot;&gt;unpacking&lt;&#x2F;a&gt; to try and
keep a style similar to some PySpark operations.&lt;&#x2F;p&gt;
&lt;p&gt;Finally I put the rest of the transformations into a &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0289&#x2F;&quot;&gt;generator expression&lt;&#x2F;a&gt;
containing a dict of &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.7&#x2F;library&#x2F;collections.html#collections.namedtuple&quot;&gt;namedtuple&lt;&#x2F;a&gt;
values so that later operations could continue working on named values in a
manner similar to SQL columns.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;groupby&quot;&gt;GROUPBY&lt;&#x2F;h2&gt;
&lt;p&gt;With the transformation and named values part out of the way I moved onto the
&lt;code&gt;GROUPBY&lt;&#x2F;code&gt; aggregations. Thinking about &lt;code&gt;GROUPBY&lt;&#x2F;code&gt; the goal is to apply an
aggregation function to a unique value. That unique value can be represented
multiple ways, but I wanted to show the idea behind what was happening to help
with future port efforts. So on my first pass I wrote:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grouped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]
seen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Order is known because it represents data generated by tesseract
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;fixed:
    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;page_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;block_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;par_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;line_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;seen:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;continue

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;seen.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(key)

    line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;fixed:
        rkey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(r[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;page_num&amp;#39;, r[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;block_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;], r[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;par_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;], r[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;])&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e05252;color:#ffffff;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rkey:
            line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(r[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;c_txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])

    txt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(line)
    clean_txt = txt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;clean_txt:
        grouped.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
            {
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;page_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;page_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;block_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;block_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;par_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;par_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ln_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;line_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: clean_txt,
            }
        )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Keeping in mind that this was to conceptualize what could be happening behind
the scenes for the &lt;code&gt;GROUPBY&lt;&#x2F;code&gt; and &lt;code&gt;AGG&lt;&#x2F;code&gt; operation here we loop over our rows
generating a hash from some values. Once we have this hash we check if we have
seen it before by referencing a &lt;code&gt;set&lt;&#x2F;code&gt;. If this is a new value we find all
values of the hash in our transformed data, append the tokens, handle empty
tokens and finally add the data to our final dataset. At the end we have lines
of text (instead of individual tokens) that can be referenced by page, block,
paragraph and line number.&lt;&#x2F;p&gt;
&lt;p&gt;While this works it&#x27;s horribly inefficient. It stands out that we are
reiterating our transformed data every time we find a new key. But the goal for
this wasn&#x27;t to be efficient. It was to show the ideas expressed in SQL with
Python. Specifically it was highlighting how to express a &lt;code&gt;GROUPBY&#x2F;AGG&lt;&#x2F;code&gt;
operation manually using hashes of values and tracking what we have and have
not seen providing a final dataset that was the same as the output of the SQL
statement.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;itertools&quot;&gt;itertools&lt;&#x2F;h2&gt;
&lt;p&gt;Continuing on from that point one of my favorite Python modules is &lt;code&gt;itertools&lt;&#x2F;code&gt;.
If you haven&#x27;t spent much time with it I highly recommend taking some of your
existing code and looking over it while scanning the itertools docs. I&#x27;ve used
&lt;code&gt;islice&lt;&#x2F;code&gt;, &lt;code&gt;chain&lt;&#x2F;code&gt; and &lt;code&gt;zip_longest&lt;&#x2F;code&gt; innumberable times. Because of that I knew
there was a handy &lt;code&gt;groupby&lt;&#x2F;code&gt; function stowed in there too:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Make an iterator that returns consecutive keys and groups from the iterable.
The key is a function computing a key value for each element. If not specified
or is None, key defaults to an identity function and returns the element
unchanged.

Generally, the iterable needs to already be sorted on the same key function.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replacing the block above:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;key, group &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;itertools.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;groupby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
    req, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: (x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;page_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;block_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;par_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], x[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;line_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])
):
    line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([row[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;text&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;group])
    final.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;page_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: key[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;block_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: key[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;par_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: key[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;line_num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: key[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: line,
                })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that change we have a clean, faster implementation. Additionally since
this was a port of Spark SQL if the data was to get truly large it wouldn&#x27;t be
much work to start iterating through all of the pipeline in batches since we
can use generators all the way through.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;So what was the point of sharing that here? Nothing specific. It was a fun
exercise at the time, and it made me pause to consider how I would express
&lt;code&gt;GROUPBY&lt;&#x2F;code&gt; on my own. The exercise also helped introduce some of my colleagues
to the &lt;code&gt;filter&lt;&#x2F;code&gt; expression and in turn &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;reduce&lt;&#x2F;code&gt;. Using those they
were able to express a lot of their pipeline concepts without a lot of the
iteration structures they were used to having abstracted away. If you find
yourself doing a lot of pipelining I recommend checking out &lt;code&gt;itertools&lt;&#x2F;code&gt; and
&lt;code&gt;functools&lt;&#x2F;code&gt;. Both are built into the Python stdlib and provide a lot of helpful
functionality.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Speed Bumps</title>
            <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-dependencies-and-bugs/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-dependencies-and-bugs/</guid>
            <description>&lt;p&gt;As part of getting started on my project a couple months back I took a look at
what boards were supported by
&lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;lite&#x2F;microcontrollers#supported_platforms&quot;&gt;Tensorflow lite&lt;&#x2F;a&gt;
. Seeing an esp board I went that route since I&#x27;ve heard alot from the
maker&#x2F;hacker community and thought it would be a good opportunity to learn more.
Additionally it&#x27;s been quite a while since I had a project that was primarily
&lt;code&gt;C&#x2F;C++&lt;&#x2F;code&gt; so that was exciting. Like any good project I ran into multiple
unexpected bumps, bugs and issues. Some were minor, others were frustrating. I&#x27;m
capturing some of those here for anybody else that may be starting down the path
of using Tensorflow Lite and an ESP32 board.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tensorflow-speed-bumps&quot;&gt;Tensorflow speed bumps&lt;&#x2F;h2&gt;
&lt;p&gt;Getting started with TF Lite is easy enough, but something I noticed as I
continued to work on the project is just how little things are designed specific
to the platform. Instead the examples are setup with Arduino as a default, and
then work is done to make that run on X target. In the case of the &lt;code&gt;ESP-EYE&lt;&#x2F;code&gt;
this looks like packing everything into an Arduino compatible loop, and handling
that in a single FreeRTOS task. I get the reason for this, but it&#x27;s also a bit
of a headache later on as it feels like an anti pattern when addin in new task
and event handlers.&lt;&#x2F;p&gt;
&lt;p&gt;Another bump you are likely to notice is that the TF Lite examples rely on
functionality present in the TF &lt;code&gt;1.x&lt;&#x2F;code&gt; branch for training, but require TF
&lt;code&gt;&amp;gt;= 2.2&lt;&#x2F;code&gt; for micro libs. Not the end of the world, but it means your going to
manage multiple environts. If managing this using &lt;code&gt;venv&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;virtualenv&lt;&#x2F;code&gt; keep in
mind you&#x27;re going to need the &lt;code&gt;esp-idf&lt;&#x2F;code&gt; requirements in the 2.x environment, or
just install in both as you may find yourself switching back and forth. In
addition to python lib versions the examples note &lt;code&gt;esp-idf 4.0&lt;&#x2F;code&gt;, but you will
want to use &lt;code&gt;&amp;gt;=4.0&lt;&#x2F;code&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-idf&#x2F;pull&#x2F;4251&quot;&gt;this&lt;&#x2F;a&gt;
commit or you will run into compiler failures. I ended up using &lt;code&gt;4.1&lt;&#x2F;code&gt;
eventually, but something to note.&lt;&#x2F;p&gt;
&lt;p&gt;Finally interaction with the model feels flaky. It&#x27;s an example so this kind of
makes sense, but I found that while the word detected was pretty accurate the
&lt;code&gt;new_command&lt;&#x2F;code&gt; and some of the attributes of the keyword being provided by the
model weren&#x27;t matching my expectation&#x2F;use. I ended up using the &lt;code&gt;score&lt;&#x2F;code&gt; value
and monitoring the model to setup the conditionals for responding to commands in
my application.&lt;&#x2F;p&gt;
&lt;p&gt;Overall the examples are great to have, and walking you through the train, test
and load cycle is really helpful. The main thing I wish I had known was that the
TF Arduino path for ESP was pretty much the same as the ESP native path with
regards to utility and functionality just using the &lt;code&gt;esp-idf&lt;&#x2F;code&gt; toolchain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;esp-speed-bumps&quot;&gt;ESP speed bumps&lt;&#x2F;h2&gt;
&lt;p&gt;From the ESP side of things the core &lt;code&gt;idf&lt;&#x2F;code&gt; tooling is nice. I like how open it
is and how much I can understand the different pieces. This helped a few times
when I ran into unexpected behavior. One thing to note is if you follow the
documented path of cloning &lt;code&gt;esp-idf&lt;&#x2F;code&gt; you will want to consider how you manage
the release branch you use and when you merge updates. Updates are not pushed
into minor&#x2F;bug fix branches instead they go into the release branch targeted on
merge.&lt;&#x2F;p&gt;
&lt;p&gt;Being new to the esp platform something I didn&#x27;t know when I got started was
that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-idf&#x2F;releases&#x2F;tag&#x2F;v4.0&quot;&gt;&lt;code&gt;esp-idf 4.x&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
released in February of 2020. Because of this alot of the documentation and
examples such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-who&quot;&gt;&lt;code&gt;ESP-WHO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-skainet&quot;&gt;&lt;code&gt;esp-skainet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; are still based on
&lt;code&gt;3.x&lt;&#x2F;code&gt; which has a variety of differences and changes in things like
the TCP&#x2F;network stack. Because of this checking the version used in various
docs, examples etc is (as usual) important. Since the TF examples reference
version 4 that&#x27;s where I started, but a lot of what&#x27;s out there is based on v3.&lt;&#x2F;p&gt;
&lt;p&gt;One other bump somebody may run into is struct initialization in a modern
toolchain when calling the underlying esp C libraries from C++. I spent some
time digging around after transitioning the http request example into the TF C++
&lt;code&gt;command_responder&lt;&#x2F;code&gt; code and the compiler told me I was missing uninitialized
struct fields and their order made them required.&lt;&#x2F;p&gt;
&lt;p&gt;The example code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;esp_http_client_config_t config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;event_handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; _http_event_handler,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;user_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; local_response_buffer,
};
esp_http_client_handle_t client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;esp_http_client_init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;config);
esp_err_t err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;esp_http_client_perform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(client);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And how I had to do it in C++:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;esp_http_client_config_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(esp_http_client_config_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;calloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(esp_http_client_config_t), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
config-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; URL;
config-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cert_pem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; burningdaylight_io_root_cert_pem_start;
config-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;event_handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; _http_event_handler;

esp_http_client_handle_t client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;esp_http_client_init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(config);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;esp_http_client_set_method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(client, HTTP_METHOD_PUT);
esp_err_t err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;esp_http_client_perform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(client);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had a similar issue with wifi and you can see the solution
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;voice-assistant&#x2F;smalltalk&#x2F;main&#x2F;http&#x2F;wifi.cc#L40&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I really enjoyed my lite trip into &lt;code&gt;idf&lt;&#x2F;code&gt;. It&#x27;s an interesting set of components
and followed a workflow that I use and appreciate. I wrote a couple aliases
that somebody might find useful:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;adf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;export ADF_PATH=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-adf&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;idf-refresh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;rm -rf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf &amp;amp;&amp;amp; git clone --recursive git@github.com:espressif&#x2F;esp-idf.git $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf &amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf&#x2F;install.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;idf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;. $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf&#x2F;export.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;idf3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;pushd $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf &amp;amp;&amp;amp; git checkout release&#x2F;v3.3 &amp;amp;&amp;amp; popd &amp;amp;&amp;amp; . $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf&#x2F;export.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;idf4x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;pushd $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf &amp;amp;&amp;amp; git checkout release&#x2F;v4.0 &amp;amp;&amp;amp; popd &amp;amp;&amp;amp; . $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf&#x2F;export.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;idf4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;pushd $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf &amp;amp;&amp;amp; git checkout release&#x2F;v4.1 &amp;amp;&amp;amp; popd &amp;amp;&amp;amp; . $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;projects&#x2F;esp-idf&#x2F;export.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;idf-test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;idf.py --port &#x2F;dev&#x2F;cu.SLAB_USBtoUART flash monitor&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And I look forward to writing more about esp as I continue to use it in new
projects.&lt;&#x2F;p&gt;
&lt;p&gt;Approaching the end of this project it&#x27;s been a larger undertaking than I
expected, but I&#x27;ve learned a lot. It&#x27;s definitely generated a few new project
ideas. The code, docs, images etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;ll be posting updates as I
continue along to &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt; and
this blog. If you have any questions or ideas reach
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Wrapping Up</title>
            <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-finished/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-finished/</guid>
            <description>&lt;p&gt;And now I&#x27;m at &lt;code&gt;v0.1&lt;&#x2F;code&gt; of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;&lt;code&gt;on-air&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
project. I was able to achieve what I was hoping to along the way. I learned
more about model development, tensorflow and esp. While this version has some
distinct differences from what I outlined for the logic flow (keywords, VAD) it
achieves the functional goal. The code, docs, images etc for the project can be
found in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;this&lt;&#x2F;a&gt; repo, and the project details
live on &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt;. When I get back
to this project and work on &lt;code&gt;v1.x&lt;&#x2F;code&gt; I&#x27;ll make updates available to each.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transition_one.gif&quot; alt=&quot;Voice Display Demo&quot; title=&quot;Display responding to voice.&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;transition_two_speed.gif&quot; alt=&quot;Display Demo Two&quot; title=&quot;Responding to voice.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A couple thoughts having worked through this in the evening for a couple months:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I really should have outlined the states that the esp program was going to
cycle through, and then mapped those into task on the FreeRTOS event loop. While
the high level flow captures the external systems behavior the esp has the most
moving parts at the applications level, and is where most of the state is
influenced.&lt;&#x2F;li&gt;
&lt;li&gt;I want to spend some more time with C++ 14&#x2F;17 understanding the gotchas of
interfacing with C99. I ran into a few different struct init issues and found a
few ways to solve them. I&#x27;m sure there is a good reason for different solutions,
but it&#x27;s not something I&#x27;ve spent a lot of time dealing with so I need to learn.&lt;&#x2F;li&gt;
&lt;li&gt;While continuing to learn about esp-idf I want to look into some of the esp
hal work too. I briefly explored esp-adf and skainet while working through
&lt;code&gt;on-air&lt;&#x2F;code&gt;. Both focus on a couple boards but seems to have functionality that
would be interesting for a variety of devices. Understanding the HAL and
components better seems to be where to start.&lt;&#x2F;li&gt;
&lt;li&gt;Data, specifically structured data is going to continue to be a large barrier
for open models and for anybody to be able to train a model for their own
want&#x2F;need. While sources like Kaggle, arvix, data.world and others have worked
to help this there&#x27;s still a gulf between what I can get at home and what I can
get at work. Additionally many open datasets are numeric or text datasets while
video, audio and other sources are still lacking.&lt;&#x2F;li&gt;
&lt;li&gt;Document early, document often. Too many times I got so caught up in writing
code, or just getting one more thing done that by the time I did that getting
myself to do a thorough write up of issues I experienced, interesting findings,
or even successful moments was difficult. I know that I put this off sometimes,
and different parts of the project are not as well documented, or details have
been lost to the days in between.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s a lot of fun stuff left to explore here I can see why I&#x27;ve heard a lot
about esp and look forward to building more.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Version 0.1</title>
            <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-v01/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-v01/</guid>
            <description>&lt;p&gt;My first commit to &lt;code&gt;on-air&lt;&#x2F;code&gt; shows March 3, 2020. I know that the weeks leading
up to that commit I spent some time reading through the TF Lite documentation,
playing with Cloudflare Workers K&#x2F;V and getting my first setup of &lt;code&gt;esp-idf&lt;&#x2F;code&gt;
squared away. After that it was off to the races. I outlined my original goal
in the &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-planning&#x2F;&quot;&gt;planning&lt;&#x2F;a&gt; post. I didn&#x27;t quite
get to that goal. The project currently doesn&#x27;t have a VAD to handle the
scenario where I forget to activate the display before starting a call or
hangout. Additionally I wasn&#x27;t able to train a custom keyword as highlighted in
the &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-custom-model&#x2F;&quot;&gt;custom model&lt;&#x2F;a&gt; post. I was
however able to get a functional implementation of the concept. I am able to
hang the display up, and then in my lab with the &lt;code&gt;ESP-EYE&lt;&#x2F;code&gt; plugged in I can use
the wake word &lt;code&gt;visual&lt;&#x2F;code&gt; followed by &lt;code&gt;on&#x2F;off&lt;&#x2F;code&gt; to toggle the display status.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transition_one.gif&quot; alt=&quot;Voice Display Demo&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;transition_two_speed.gif&quot; alt=&quot;Voice Display Demo Two&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While it&#x27;s not quite what I had planned it&#x27;s a foundation. I&#x27;ve got a lot more
tools and knowledge under my belt. Round 2 will probably involved
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-skainet&quot;&gt;Skainet&lt;&#x2F;a&gt; just due to the limitations
in voice data that&#x27;s readily available. Keep an eye out for a couple more post
highlighting some bumps along the way and summary of lessons learned.&lt;&#x2F;p&gt;
&lt;p&gt;The code, docs, images etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;ll be posting any further updates
to &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt;. For anybody that
might be interested in building this the instructions below provide a brief
outline. Updated versions will be hosted in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;docs&quot;&gt;repo&lt;&#x2F;a&gt;. If you have any
questions or ideas reach &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Required Hardware:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.espressif.com&#x2F;en&#x2F;products&#x2F;hardware&#x2F;esp-eye&#x2F;overview&quot;&gt;ESP-EYE&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;Optional &lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;thing:3586384&quot;&gt;ESP-EYE case&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;4116&quot;&gt;PyPortal&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;Optional &lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;thing:3469747&quot;&gt;PyPortal case&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Two 3.3v usb to outler adapters and two usb to usb mini cables&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;OR&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Two 3.3v micro usb wall outlet chargers&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Build Steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;on-air&lt;&#x2F;a&gt; repo.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Cloudflare Worker:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Setup &lt;a href=&quot;https:&#x2F;&#x2F;www.cloudflare.com&#x2F;dns&#x2F;&quot;&gt;Cloudflare&lt;&#x2F;a&gt;
DNS records for your domain and endpoint, or setup a new &lt;a href=&quot;https:&#x2F;&#x2F;www.cloudflare.com&#x2F;products&#x2F;registrar&#x2F;&quot;&gt;domain&lt;&#x2F;a&gt;
with Cloudflare if you don&#x27;t have one to resolve the endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Setup a &lt;a href=&quot;https:&#x2F;&#x2F;workers.cloudflare.com&#x2F;&quot;&gt;Cloudflare workers&lt;&#x2F;a&gt; account with
worker K&#x2F;V.&lt;&#x2F;li&gt;
&lt;li&gt;Setup the &lt;a href=&quot;https:&#x2F;&#x2F;developers.cloudflare.com&#x2F;workers&#x2F;tooling&#x2F;wrangler&quot;&gt;Wrangler&lt;&#x2F;a&gt;
CLI tool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;&#x2F;code&gt; into the &lt;code&gt;on-air&#x2F;sighandler&lt;&#x2F;code&gt; directory.&lt;&#x2F;li&gt;
&lt;li&gt;Update &lt;code&gt;[toml](https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;sighandler&#x2F;wrangler.toml)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;wrangler preview&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wrangler publish&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Update &lt;code&gt;[Makefile](https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;sighandler&#x2F;Makefile)&lt;&#x2F;code&gt;
with your domain and test calling.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;PyPortal:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Setup CircuitPython 5.x on the &lt;a href=&quot;https:&#x2F;&#x2F;circuitpython.org&#x2F;board&#x2F;pyportal&#x2F;&quot;&gt;PyPortal&lt;&#x2F;a&gt;.
&lt;ol&gt;
&lt;li&gt;If you&#x27;re new to CircuitPython you should &lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;welcome-to-circuitpython&#x2F;circuitpython-essentials&quot;&gt;read&lt;&#x2F;a&gt;
this first.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Go to the directory where you cloned on-air.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;&#x2F;code&gt; into display.&lt;&#x2F;li&gt;
&lt;li&gt;Update &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;display&#x2F;secrets.py&quot;&gt;secrets.py`&lt;&#x2F;a&gt;
with your wifi information and status URL endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Copy &lt;code&gt;code.py&lt;&#x2F;code&gt;, &lt;code&gt;secrets.py&lt;&#x2F;code&gt; and the bitmap files in &lt;code&gt;screens&#x2F;&lt;&#x2F;code&gt; to the root
of the PyPortal.&lt;&#x2F;li&gt;
&lt;li&gt;The display is now good to go.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;ESP-EYE:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Setup &lt;code&gt;[esp-idf](https:&#x2F;&#x2F;docs.espressif.com&#x2F;projects&#x2F;esp-idf&#x2F;en&#x2F;latest&#x2F;esp32&#x2F;get-started&#x2F;)&lt;&#x2F;code&gt;
using the 4.1 release branch.&lt;&#x2F;li&gt;
&lt;li&gt;Install &lt;a href=&quot;http:&#x2F;&#x2F;espeak.sourceforge.net&#x2F;&quot;&gt;espeak&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;sox.sourceforge.net&#x2F;&quot;&gt;sox&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Setup a Python 3.7 virtual environment and install Tensorflow 1.15.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;&#x2F;code&gt; into &lt;code&gt;on-air&#x2F;voice-assistant&#x2F;train&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;chmod +x orchestrate.sh&lt;&#x2F;code&gt; and &lt;code&gt;.&#x2F;orchestrate.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Once training completes &lt;code&gt;cd ..&#x2F;smalltalk&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Activate the &lt;code&gt;esp-idf&lt;&#x2F;code&gt; tooling so that &lt;code&gt;$IDF_PATH&lt;&#x2F;code&gt; is set correctly and all
requirements are met.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;&#x2F;code&gt; and set your wifi settings.&lt;&#x2F;li&gt;
&lt;li&gt;Update the URL in &lt;code&gt;[toggle\_status.cc](https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;voice-assistant&#x2F;smalltalk&#x2F;main&#x2F;http&#x2F;toggle_status.cc)&lt;&#x2F;code&gt;
&lt;ol&gt;
&lt;li&gt;This should match the host and endpoint you deployed the Cloudflare
worker to above&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;idf.py build&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;idf.py --port \&amp;amp;lt;device port\&amp;amp;gt; flash monitor&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;You should see the device start, attach to WiFi and begin listening for the
wake word &amp;quot;visual&amp;quot; followed by &amp;quot;on&amp;quot; or &amp;quot;off&amp;quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Model Training</title>
            <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-custom-model/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-custom-model/</guid>
            <description>&lt;p&gt;Recently I spent some time learning how to generate synthetic voices using
&lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-data-generation&#x2F;&quot;&gt;espeak&lt;&#x2F;a&gt;. After working with the
tools to aligning with the Tensorflow keyword models expectations I was ready
for training, and to see how well the synthetic data performed. TLDR: not well
:)&lt;&#x2F;p&gt;
&lt;p&gt;I started by training using the keywords &lt;code&gt;hi&lt;&#x2F;code&gt;, &lt;code&gt;smalltalk&lt;&#x2F;code&gt; and &lt;code&gt;on&lt;&#x2F;code&gt;. This let me
have a known working word while testing two synthetic words. Although training
went well:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;INFO:tensorflow:Saving to &amp;quot;&#x2F;Users&#x2F;n0mn0m&#x2F;projects&#x2F;on-air&#x2F;voice-assistant&#x2F;train&#x2F;model&#x2F;speech_commands_train&#x2F;tiny_conv.ckpt-18000&amp;quot;
I0330 10:34:28.514455 4629171648 train.py:297] Saving to &amp;quot;&#x2F;Users&#x2F;n0mn0m&#x2F;projects&#x2F;on-air&#x2F;voice-assistant&#x2F;train&#x2F;model&#x2F;speech_commands_train&#x2F;tiny_conv.ckpt-18000&amp;quot;
INFO:tensorflow:set_size=1445
I0330 10:34:28.570324 4629171648 train.py:301] set_size=1445
WARNING:tensorflow:Confusion Matrix:
 [[231   3   3   0   4]
 [  2 178   6  29  26]
 [  3  12 146   2   2]
 [  4  17   2 352  21]
 [  2  16   7  16 361]]
W0330 10:34:32.116044 4629171648 train.py:320] Confusion Matrix:
 [[231   3   3   0   4]
 [  2 178   6  29  26]
 [  3  12 146   2   2]
 [  4  17   2 352  21]
 [  2  16   7  16 361]]
WARNING:tensorflow:Final test accuracy = 87.8% (N=1445)
W0330 10:34:32.116887 4629171648 train.py:322] Final test accuracy = 87.8% (N=1445)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The model didn&#x27;t respond well once it was loaded onto the ESP-EYE. I tried a
couple more rounds with other keywords and spectrogram samples with similar
results.&lt;&#x2F;p&gt;
&lt;p&gt;Because of the brute force nature that I used to generate audio the synthetic
training data isn&#x27;t very representative of real human voices. While the
experiment didn&#x27;t work out, I do think that generating data this way could be
useful with the right amount of time and research. Instead of scaling parameters
in a loop I think researching the characteristic of various human voices and
using those to tune the data generated via espeak could actually work out well.
That said it&#x27;s possible the model may pick up on characteristics of the espeak
program too. Regardless, voice data that is ready for training is still a hard
problem in need of more open solutions.&lt;&#x2F;p&gt;
&lt;p&gt;Along with the way I scaled the espeak parameters another monkey wrench is that
the microspeech model makes use of a CNN and spectrogram of the input audio
instead of full signal processing. This means it&#x27;s highly likely the model will
work with voices around the comparison spectrogram well, but not generalize.
This makes picking the right spectrogram relative to the user another key task.&lt;&#x2F;p&gt;
&lt;p&gt;Because of these results and bigger issues I ended up tweaking my approach and
used
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;voice-assistant&#x2F;smalltalk&#x2F;main&#x2F;main_functions.cc&quot;&gt;&lt;code&gt;visual&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
as my wake word followed by on&#x2F;off. All of these are available in the TF command
words dataset, and visual seems like an ok wake word when controlling a display.
For somebody working on a generic voice assistant you will want to work on audio
segmentation since many datasets are sentences, or consider using something like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-skainet&quot;&gt;Skainet&lt;&#x2F;a&gt;. All of this was less fun
than running my own model from synthtetic data, but I needed to continue
forward. After a final round of training with all three words I followed the TF
&lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;lite&#x2F;microcontrollers?hl=he&quot;&gt;docs&lt;&#x2F;a&gt; to represent the
model as a C array and then flashed it onto the board with the rest of the
program. Using &lt;code&gt;idf monitor&lt;&#x2F;code&gt; I was able to observe the model working as
expected:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;I (31) boot: ESP-IDF v4.1
I (31) boot: compile time 13:35:43
I (704) wifi: config NVS flash: enabled
I (734) WIFI STATION: Setting WiFi configuration SSID Hallow...
I (824) WIFI STATION: wifi_init_sta finished.
I (1014) TF_LITE_AUDIO_PROVIDER: Audio Recording started
Waking up
Recognized on
I (20434) HTTPS_HANDLING: HTTPS Status = 200, content_length = 1
I (20434) HTTPS_HANDLING: HTTP_EVENT_DISCONNECTED
I (20444) HTTPS_HANDLING: HTTP_EVENT_DISCONNECTED
Going back to sleep.
Waking up
Recognized off
I (45624) HTTPS_HANDLING: HTTPS Status = 200, content_length = 1
I (45624) HTTPS_HANDLING: HTTP_EVENT_DISCONNECTED
I (45634) HTTPS_HANDLING: HTTP_EVENT_DISCONNECTED
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was an educational experiment. It helped me put some new tools in my belt
while thinking further about the problem of voice and audio processing. I
developed some
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&#x2F;tree&#x2F;main&#x2F;voice-assistant&#x2F;train&quot;&gt;scripts&lt;&#x2F;a&gt; to
run through the full data generation, train and export cycle. Training will need
to be done based on the architecture somebody is using, but hopefully it&#x27;s
useful.&lt;&#x2F;p&gt;
&lt;p&gt;The code, docs, images etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;ll be posting updates as I
continue along to &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt; and
this blog. If you have any questions or ideas reach
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Synthetic Generation</title>
            <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-data-generation/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-data-generation/</guid>
            <description>&lt;p&gt;After getting the display and worker up and running I started down the path of
training my model for keyword recognition. Right now I&#x27;ve settled on the wake
words &lt;code&gt;Hi Smalltalk&lt;&#x2F;code&gt;. After the wake word is detected the model will then
detect &lt;code&gt;silence&lt;&#x2F;code&gt;, &lt;code&gt;on&lt;&#x2F;code&gt;, &lt;code&gt;off&lt;&#x2F;code&gt;, or &lt;code&gt;unknown&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My starting point for training the model was the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;tensorflow&#x2F;tree&#x2F;master&#x2F;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;micro_speech&quot;&gt;&lt;code&gt;micro_speech&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;docs&#x2F;blob&#x2F;master&#x2F;site&#x2F;en&#x2F;r1&#x2F;tutorials&#x2F;sequences&#x2F;audio_recognition&quot;&gt;&lt;code&gt;speech_commands&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
tutorials that are part of the Tensorflow project. One of the first things I
noticed while planning out this step was the lack of good wake words in the
speech command dataset. There are
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jim-schwoebel&#x2F;voice_datasets&quot;&gt;many&lt;&#x2F;a&gt; voice datasets available
online, but many are unlabeled or conversational. Since digging didn&#x27;t turn up
much in the way of open labeled word datasets I decided to use &lt;code&gt;on&lt;&#x2F;code&gt; and &lt;code&gt;off&lt;&#x2F;code&gt;
from the speech commands
&lt;a href=&quot;https:&#x2F;&#x2F;ai.googleblog.com&#x2F;2017&#x2F;08&#x2F;launching-speech-commands-dataset.html&quot;&gt;dataset&lt;&#x2F;a&gt;
since that gave me a baseline for comparison with my custom words. After
recording myself saying &lt;code&gt;hi&lt;&#x2F;code&gt; and &lt;code&gt;smalltalk&lt;&#x2F;code&gt; less then ten times I knew I did
not want to generate my own samples at the scale of the other labeled keywords.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of giving up on my wake word combination I started digging around for
options and found an interesting
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JohannesBuchner&#x2F;spoken-command-recognition&quot;&gt;project&lt;&#x2F;a&gt; where
somebody had started down the path of generating labeled words with text to
speech. After reading through the repo I ended up using
&lt;a href=&quot;http:&#x2F;&#x2F;espeak.sourceforge.net&#x2F;&quot;&gt;espeak&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;sox.sourceforge.net&#x2F;&quot;&gt;sox&lt;&#x2F;a&gt;
to generate my labeled dataset.&lt;&#x2F;p&gt;
&lt;p&gt;The first step was to generate the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Phoneme&quot;&gt;phonemes&lt;&#x2F;a&gt; for the wake words:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; espeak&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; en&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; smalltalk
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;O:ltO:k
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then stored the phoneme in a word file that will be used by &lt;code&gt;generate.sh&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cat words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 001 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;aI]]
busy 002 [[b&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Izi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 003 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[fr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;i:]]
smalltalk 004 [[sm&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;O:ltO:k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After modifying &lt;code&gt;generate.sh&lt;&#x2F;code&gt; from the spoken command repo (eliminating some
extra commands and extending the loop to generating more samples) I had
everything I needed to synthetically generate a new labeled word dataset.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#!&#x2F;bin&#x2F;bash
# For the various loops the variable stored in the index variable
# is used to attenuate the voices being created from espeak.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lastwordid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; word wordid phoneme

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word
    mkdir -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; db&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lastword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;versionid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lastword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Generate voices with various dialects
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; english english-north en-scottish english_rp english_wmids english-us en-westindies
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Loop changing the pitch in each iteration
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 1 99)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Change the speed of words per minute
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 80 100 120 140 160&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;versionid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;phoneme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;k
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;phoneme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;espeak -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;k -s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;j -v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i -w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; db&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;versionid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.wav
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Set sox options for Tensorflow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                sox db&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;versionid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.wav&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --endian&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; little db&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;tf_$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;versionid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.wav rate 16k
                ((versionid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;done
        done
    done
done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the run I have samples and labels with a volume comparable to the other
words provided by Google. The pitch, speed and tone of voice changes with each
loop which will hopefully provide enough variety to make this dataset useful in
training. Even if this doesn&#x27;t work out learning about &lt;code&gt;espeak&lt;&#x2F;code&gt; and &lt;code&gt;sox&lt;&#x2F;code&gt; was
interesting. I&#x27;ve already got some future ideas on how to use those. If it does
work the ability to generate training data on demand seems incredibly useful.&lt;&#x2F;p&gt;
&lt;p&gt;Next up, training the model and loading to the ESP-EYE. The code, docs, images
etc for the project can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and
I&#x27;ll be posting updates as I continue along to
&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt; and this blog. If you
have any questions or ideas reach &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Display</title>
            <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-display/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-display/</guid>
            <description>&lt;p&gt;Continuing my project with things I know the PyPortal display was up next. Last
year I spent a few weeks playing with the portal to make a badge at Gen Con and
had a lot of fun with it. Since that time
&lt;a href=&quot;https:&#x2F;&#x2F;circuitpython.org&#x2F;downloads&quot;&gt;CircuitPython 5&lt;&#x2F;a&gt; has been released and
the portal now expects a few new &lt;a href=&quot;https:&#x2F;&#x2F;circuitpython.org&#x2F;libraries&quot;&gt;modules&lt;&#x2F;a&gt;
which were easy enough to download and send to the board. The PyPortal makes it
incredibly easy to point at an endpoint to fetch data:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;board
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;adafruit_pyportal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;PyPortal

pyportal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PyPortal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;your url here&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;default_bg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;green.bmp&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyportal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(status)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that small snippet we have our status, and all we need to do is put that
in a loop to set the background depending on the bit returned.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;board
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sleep
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;adafruit_pyportal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;PyPortal

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;secrets  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# noqa
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ImportError:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;WiFi secrets are kept in secrets.py, please add them there!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;raise

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyportal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PyPortal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;secrets[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;signal&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;default_bg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;green.bmp&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
    status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(pyportal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;())
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;current:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;pass
    elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;current:
        pyportal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;set_background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;green.bmp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
        current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;current:
        pyportal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;set_background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;red.bmp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
        current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;current:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;pass
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even though it&#x27;s a small snippet I want to point out a couple things. First I&#x27;m
wrapping the return from &lt;code&gt;fetch&lt;&#x2F;code&gt; in a cast to &lt;code&gt;int&lt;&#x2F;code&gt;. If you use Python,  but you
are new to CircuitPython this may seem odd. If you don&#x27;t do this and try to
compare a &lt;code&gt;string&lt;&#x2F;code&gt; to an &lt;code&gt;int&lt;&#x2F;code&gt; you&#x27;re probably not going to get the result you
expect. Try it out in a repl and then follow up with
&lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;circuitpython-essentials&#x2F;circuitpython-essentials&quot;&gt;CircuitPython Essentials&lt;&#x2F;a&gt;
. Also I&#x27;m only changing the background if the status we fetch is different than
the current status. While repainting the screen is fast, it&#x27;s noticeable and
there&#x27;s no reason to do it every 30 seconds if nothing is different.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it. Now whenever the endpoint receives an update the portal will see
that status change and update the display.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;on-air-display-red.jpg&quot; alt=&quot;Train all the Things Display Red&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;on-air-display-green.jpg&quot; alt=&quot;Train all the Things Display Green&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to Adafruit for publishing the
&lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;search?q=pyportal&amp;amp;dwh=915e616a3fbda6e&quot;&gt;case&lt;&#x2F;a&gt; above.
The logo on display is the Jolly Wrencher of
&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;about&#x2F;&quot;&gt;Hackaday&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With the &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-sighandler&#x2F;&quot;&gt;endpoint&lt;&#x2F;a&gt; and display done
I&#x27;m off into the unknown. I&#x27;ll be setting up the ESP-EYE to update the endpoint,
training the voice model and finally running it all with FreeRTOS.&lt;&#x2F;p&gt;
&lt;p&gt;The code, docs, images etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;ll be posting updates as I
continue along to &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt; and
this blog. If you have any questions or ideas reach
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Signaling</title>
            <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-sighandler/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-sighandler/</guid>
            <description>&lt;p&gt;After &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-planning&#x2F;&quot;&gt;figuring out&lt;&#x2F;a&gt; what I was
going to use for my project I started work with things I know. I already had
some experience with Cloudflare workers building a
&lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;system-status-observer&#x2F;&quot;&gt;home system status&lt;&#x2F;a&gt; page, and Workers K&#x2F;V
makes storing and fetching data quick and easy. I ended up with a simple
endpoint that I &lt;code&gt;POST&lt;&#x2F;code&gt; to set a bit after keyword detection, and the PyPortal
retrieves that status to determine what to display:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;setCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SIGNALS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SIGNALS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;serviceStat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;serviceStat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;invalid status key&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;serviceStat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, {status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;setStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;setCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; set to &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;handleRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;psk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;PSK&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;presharedKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;URL(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;searchParams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;psk&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;URL(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;searchParams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;service&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;URL(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;searchParams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;status&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;presharedKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;psk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;POST&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;setStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;GET&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;418 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
        }
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    }
}


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;fetch&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;respondWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;handleRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nothing tricky happening above, just checking the request, and calling the
appropriate function to store or fetch the status bit. With the function
deployed to my Cloudflare Worker and verified with some &lt;code&gt;GET&lt;&#x2F;code&gt; and &lt;code&gt;POST&lt;&#x2F;code&gt; calls
I was ready to move on to the &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-display&#x2F;&quot;&gt;display&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The code, docs, images etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;ll be posting updates as I
continue along to &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt; and
this blog. If you have any questions or ideas reach
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Simple Status Page</title>
            <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/system-status-observer/</link>
            <guid>https://burningdaylight.io/posts/system-status-observer/</guid>
            <description>&lt;p&gt;I have a bad habit of creating side projects for my side projects.&lt;&#x2F;p&gt;
&lt;p&gt;A couple months ago I switched from running my blog with Pelican and Gitlab
Pages to Zola and Cloudflare Workers. I didn&#x27;t do a write up on it, but if
you&#x27;re interested there&#x27;s a good
&lt;a href=&quot;https:&#x2F;&#x2F;words.steveklabnik.com&#x2F;porting-steveklabnik-com-to-workers-sites-and-zola&quot;&gt;post by Steve Klabnik&lt;&#x2F;a&gt;
to get you started. It was a surprisingly easy switch, and gaps between
writing haven&#x27;t been as difficult with the better tools. After getting that
setup I read about
&lt;a href=&quot;https:&#x2F;&#x2F;developers.cloudflare.com&#x2F;workers&#x2F;reference&#x2F;storage&quot;&gt;Cloudflare Workers KV&lt;&#x2F;a&gt;
, thought it sounded really neat and started to think about what I might build.&lt;&#x2F;p&gt;
&lt;p&gt;On another &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;train-all-the-things-planning&#x2F;&quot;&gt;project&lt;&#x2F;a&gt; I need to signal
between different systems a simple status. Naturally that lead to me building a
status page. I setup a Cloudflare Worker that receives &lt;code&gt;POST&lt;&#x2F;code&gt; from &lt;code&gt;N&lt;&#x2F;code&gt; systems,
stores the date of the last &lt;code&gt;POST&lt;&#x2F;code&gt; uses that to provide a status when asked.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;setCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Promise(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;resolve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;));
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;dateToStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isoDateNow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dateDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isoDateNow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dateDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;180000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatuses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_STATUS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;list_complete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;numKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.length;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statuses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[];

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;numKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;epcDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{date: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;epcDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.name};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Date(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;toISOString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;dateToStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusIndicator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatusIndicator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.status);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statuses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statuses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, {
    headers: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;text&#x2F;html&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;},
    });
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;invalid status key&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;dateToStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, {status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;updateStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isoDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;setCache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isoDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Date(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isoDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;toISOString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cacheKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; set at &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Response(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, { status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;handleRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;URL(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;searchParams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;service&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;queryType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;URL(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;searchParams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;query&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;POST&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;updateStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;queryType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;simple&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;statusKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;getStatuses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;fetch&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;respondWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;handleRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that anything that can &lt;code&gt;POST&lt;&#x2F;code&gt; can &amp;quot;check in&amp;quot; with the endpoint. You can
see it working &lt;a href=&quot;https:&#x2F;&#x2F;status.burningdaylight.io&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. I also went ahead
and wrote a simple &lt;code&gt;systemd&lt;&#x2F;code&gt; service that I can drop on to different machines
I want to have report in to the endpoint.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Unit]
Description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;Regular &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Wants&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;check-in.timer

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Service]
Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;oneshot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; POST https:&#x2F;&#x2F;status.burningdaylight.io&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;service=JETSON

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Install]
WantedBy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And a timer for the service.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Unit]
Description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;checkin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; every 2 minutes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Requires&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;check-in.service

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Timer]
Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;check-in.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;OnUnitInactiveSec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;1m

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Install]
WantedBy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;timers.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was a fun &amp;quot;Serverless&#x2F;FaaS&amp;quot; experiment that actually let me know my ISP
was having an outage one morning before work. I&#x27;ve used other Functions as a
service on other cloud platforms and while they all provide slightly different
functionality (For instance Cloudflare being a CDN and the V8 isolate setup)
Cloudflare Workers has been really easy to work with and a lot of fun to build
experiments on. They even have a &lt;a href=&quot;https:&#x2F;&#x2F;cloudflareworkers.com&quot;&gt;web playground&lt;&#x2F;a&gt;
that you can start with.&lt;&#x2F;p&gt;
&lt;p&gt;Two things I do wish were easier are interacting with K&#x2F;V from Rust. This is
probably partially related to how new I am to Rust, but working with K&#x2F;V from
JS is super easy, while this
&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;fdmzyh&#x2F;serverless_rust_i_tried_it_with_cloudflare_workers&#x2F;&quot;&gt;thread&lt;&#x2F;a&gt;
documents another experience with Workers and Rust in more detail. Another mild
annoyance is working with different workers from the same machine and how API
keys are handled. There are some suggestions for this, but non of them feel
ergonomic at this time. Other than that my experience with Workers and K&#x2F;V has
been great and I&#x27;ve already got more ideas for future experiments.&lt;&#x2F;p&gt;
&lt;p&gt;The code, docs, etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;system-status&quot;&gt;here&lt;&#x2F;a&gt;. If you have any questions or
ideas reach &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Train All the Things - Planning</title>
            <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/train-all-the-things-planning/</link>
            <guid>https://burningdaylight.io/posts/train-all-the-things-planning/</guid>
            <description>&lt;p&gt;Earlier this year Hackaday announced the
&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;contest&#x2F;169421-train-all-the-things#j-discussions-title&quot;&gt;Train all the Things&lt;&#x2F;a&gt;
contest. I immediately knew I wanted to submit something, but figuring out what
to build took me a little bit. For my side projects I like to make something
that is useful to me, or somebody I know; while also learning something new. A
few days after the contest was announced my daughter was in the basement
playing outside my office&#x2F;homelab when I remembered my wife had asked me if
there was a way for her to know when I was working with somebody so that they
could avoid coming down in the basement. I thought a voice driven display could
be a fun solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choosing-tools&quot;&gt;Choosing Tools&lt;&#x2F;h2&gt;
&lt;p&gt;After deciding on the project the next thing I wanted to figure out was what
new boards I would need (if any) and how I would build my model. After doing
some research I landed on
&lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;lite&#x2F;microcontrollers&quot;&gt;Tensorflow&lt;&#x2F;a&gt; as my path
forward for deploying a model to a microcontroller. Having used Tensorflow the
barrier for model creation is a bit lower, but I am really curious about
Tensorflow Lite and the potential it provides. Additionally a relatively new
book &lt;a href=&quot;https:&#x2F;&#x2F;tinymlbook.com&#x2F;&quot;&gt;TinyML&lt;&#x2F;a&gt; looks like a good resource to use along
the way.&lt;&#x2F;p&gt;
&lt;p&gt;After settling on TF Lite the next thing was picking a board. Most of my
embedded experience has been with CircuitPython and Rust. For this project I
thought it would be fun to learn something new. The Espressif ESP-EYE caught my
eye as an interesting board known to work with TF Lite. I&#x27;ve seen the ESP32 and
8266 in a lot of other projects, so learning the ESP toolchain seems valuable.
Additionally a lot of the Espressif ecosystem seems to be built around FreeRTOS
which provides a whole other avenue of learning and hacking.&lt;&#x2F;p&gt;
&lt;p&gt;Finally I will need a way to let somebody know when the model has picked up
voice activity, to signal that I&#x27;m currently busy in the lab. The ESP32 has a
WiFi chip providing the ability to send and receive signals via TCP if we want.
The ESP-EYE has that built in, and I happend to have a PyPortal (with an ESP32)
that could make a great display checking for a status using WiFi too. To signal
from one to the other I decided to have some fun and use Cloudflare Workers K&#x2F;V
to set a bit from the ESP-EYE that would be read by the PyPortal at a given time
interval to set the display.&lt;&#x2F;p&gt;
&lt;p&gt;Putting it all together the initial idea looks something like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;on-air-grid.jpg&quot; alt=&quot;Train all the Things Project Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Which allows me to have a small board in my homelab listening and the display
above the stairwell where somebody can get a status update before they ever
come down.&lt;&#x2F;p&gt;
&lt;p&gt;The code, docs, images etc for the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;on-air&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;ll be posting updates as I
continue along to &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;170228-on-air&quot;&gt;HackadayIO&lt;&#x2F;a&gt; and
this blog. If you have any questions or ideas reach
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Create and Apply a Git Patch</title>
            <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/applying-patchsets-with-srht/</link>
            <guid>https://burningdaylight.io/posts/applying-patchsets-with-srht/</guid>
            <description>&lt;p&gt;I&#x27;ve been using Source Hut as my primary host for source control and builds for
a few months. I really enjoy it, but one of the main things I had to learn up
front was how to apply a patch in git. Unlike Github and many other git host
Source Hut makes use of the git patch work flow instead of PRs. At first I
found this to be a bit frustrating, but I&#x27;ve actually come to see the value in
the email and patch workflow that is different from the IM and PR work flow
that many of us are used to. Hopefully this helps somebody else that is
learning to use patches in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Build your feature or modify your code on a separate branch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; add ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Prepare a patchset:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; format-patch main

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Alternative for a patch directory

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; format-patch main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; patches
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or login and find the link to download the patch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;curl -O&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;circuitroomba&#x2F;commit&#x2F;ae635ce6533e33ff5277a0428a59c736a98649d6.patch

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;.patch&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ae635ce6533e33ff5277a0428a59c736a98649d6.patch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Switch back to main:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; checkout main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check the patchset changes&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --stat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ae635ce6533e33ff5277a0428a59c736a98649d6.patch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check for errors&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ae635ce6533e33ff5277a0428a59c736a98649d6.patch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assuming the above command doesn&#x27;t generate any errors you are ready to apply a
clean patch. The &lt;code&gt;git am&lt;&#x2F;code&gt; command below includes the &lt;code&gt;--signoff&lt;&#x2F;code&gt; flag for
others to view.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; am&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --signoff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ae635ce6533e33ff5277a0428a59c736a98649d6.patch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that the patch has been applied to your main branch. Run your test
again for sanity sake and push main.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>(define zero(....))</title>
            <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/zero-truth/</link>
            <guid>https://burningdaylight.io/posts/zero-truth/</guid>
            <description>&lt;p&gt;A couple weeks ago I had the opportunity to attend the
&lt;a href=&quot;https:&#x2F;&#x2F;mitpress.mit.edu&#x2F;sites&#x2F;default&#x2F;files&#x2F;sicp&#x2F;index.html&quot;&gt;SICP&lt;&#x2F;a&gt; course
taught by &lt;a href=&quot;https:&#x2F;&#x2F;www.dabeaz.com&#x2F;sicp.html&quot;&gt;David Beazley&lt;&#x2F;a&gt;. I&#x27;ve written a
short summary of my experience &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;sicp-beazley-review&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; (tldr; take
the course if you get the chance). While the course as a whole was challenging
and an interesting a couple of the exercises stood out to me, and I wanted to
take a moment to share them here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;true&quot;&gt;TRUE&lt;&#x2F;h2&gt;
&lt;p&gt;At a deep level our computer is operating super fast on a state of &lt;code&gt;ON&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;OFF&lt;&#x2F;code&gt;
with gates that define logic. Because of this it&#x27;s an area of interest for me in
how we express similar logic in our languages and the statement&#x2F;operator
capabilities we can build from that. Towards the beginning of day two we kicked
things off by defining our own boolean logic in Racket. Our first step? Defining
&lt;code&gt;TRUE&lt;&#x2F;code&gt; and &lt;code&gt;FALSE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;TRUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x y) x)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;FALSE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x y) y)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;t (TRUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
&amp;#39;t
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f (FALSE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
&amp;#39;f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Take a minute and reread that block, because the first time I did it threw me
for a loop. We just passed in the same arguments and got &lt;code&gt;TRUE&lt;&#x2F;code&gt; and &lt;code&gt;FALSE&lt;&#x2F;code&gt;. In
Racket, and in this scenario we have defined the behavior of our basic &lt;code&gt;TRUE&lt;&#x2F;code&gt;
and &lt;code&gt;FALSE&lt;&#x2F;code&gt; operators. The next challenge we were provided was to implement all
boolean logic operators.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x) (x FALSE TRUE))

(NOT TRUE)
&amp;#39;f
(NOT FALSE)
&amp;#39;t


(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x y) (x y x))
(AND TRUE FALSE)
&amp;#39;t

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;OR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x y) (x x y))
(OR FALSE FALSE)
&amp;#39;f
(OR TRUE FALSE)
&amp;#39;t
(OR FALSE TRUE)
&amp;#39;t

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;;Hint: x is not just TRUE&#x2F;FLASE above. It is a procedure, it takes two arguments.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we now have our own set of truth tables.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defining-zero&quot;&gt;Defining Zero&lt;&#x2F;h2&gt;
&lt;p&gt;Before working on boolean logic we had been discussing the substitution model
of evaluation and what you could express with it. After our truth searching
exercise it seemed like looking at how numbers could work might be fun.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;zero (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x) x)))
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;two (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x) (f (f x)))))
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;three (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x) (f (f (f x))))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Defining numbers as symbols for the application of a function N times then let
us implement addition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;plus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;a b)
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x) ((a f) ((b f) x))))
  )

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;five (plus two three))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or to make it concrete&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;inc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;x) (+ x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))

((five inc) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Numbers are weird and amazing. Ever since I realized that anything we can
express in a program (that I&#x27;m writing in letters and symbols) can be boiled
down to a series of 0s and 1s that were ultimately symbols that could be
swapped out I&#x27;ve been captivated by the question of what numbers are. We did
other interesting and exercises (mutation, building an interpreter, a register
machine VM, and generic types), but something about the above left me
considering the nature of logic and programming. It&#x27;s easy to get lost in the
day to day problem solving, but when we get the chance to step back and look
at the strangeness of what we are interacting with it can be a lot of fun.
Never Here&#x27;s one last thought to have some fun with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;; Always returns false, except for zero, because zero says don&amp;#39;t do the function so we get back true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;zero? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;n) ((n (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;#f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;#t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</description>
        </item>
        <item>
            <title>The Structure and Interpretation of Computer Programs in 2020</title>
            <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/sicp-beazley-review/</link>
            <guid>https://burningdaylight.io/posts/sicp-beazley-review/</guid>
            <description>&lt;p&gt;Last week I had the opportunity to attend a course by
&lt;a href=&quot;https:&#x2F;&#x2F;www.dabeaz.com&#x2F;sicp.html&quot;&gt;David Beazley&lt;&#x2F;a&gt; on
&lt;a href=&quot;https:&#x2F;&#x2F;mitpress.mit.edu&#x2F;sites&#x2F;default&#x2F;files&#x2F;sicp&#x2F;index.html&quot;&gt;SICP&lt;&#x2F;a&gt; (The
Structure and Interpretation of Computer Programs). SICP is a book that was
first published in 1985 and has grown to have a bit of a reputation in various
circles of software engineering. The book itself explores many areas of
computer science with a language called Scheme (a lisp). For the course we
made use of  Racket and Python to explore those same concepts working
through the book with an eye to it&#x27;s impact on modern language and design.&lt;&#x2F;p&gt;
&lt;p&gt;A quick note. This course was unlike any other I have been in so far. David is
really good at giving learners the time and space to think as he lays out
really dense material and like a tour guide provides interesting insights
about the landscape. Another great part of the class was the size and how Dave
gives people time to engage each other. Each morning we shared ideas,
experiences and other stories over breakfast before throwing ourselves into
the material breaking for lunch to contemplate what we had just built or
discovered rounded off with an afternoon coffee. Overall this was a fantastic
educational experience and I hope I get the opportunity to repeat it with
some of Dave&#x27;s other courses in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Throughout the week we engaged with various problems in the book such as
evaluation models, abstraction, symbolic data and more. Each time we
approached a problem we were encouraged to think as language designers and
implementors rather than language users. In doing so we put ourselves in a
different state approaching problem solving by extending the features of our
language. This led us to implementing object hierarchy and evaluation models,
dispatching state handling and creating custom interpreters with domain
specific features to solve problems.&lt;&#x2F;p&gt;
&lt;p&gt;One part of SICP book that stood out was the use of &#x27;wishful thinking&#x27; as our
programming model. We would look at a problem (for instance a constraints issue
for assigning tenants to floors) and ask ourselves what a procedure or feature
would look like for accepting the data and solving said problem. We would then
implement this procedure and even mock calling other procedures that did not
exist yet to model what we felt like an optimal interface might look like. From
there we would build down implementing each new layer with wishful thinking.
This came in contrast to a lot of my day to day experience approaching problems
bottom up implementing low level details and data processing logic on our way
to an isolated solution. In some ways it felt similar to TDD if you mock out
all the functionality you don&#x27;t have yet, but again with the top down mindset
of I want the langauge to do X for me.&lt;&#x2F;p&gt;
&lt;p&gt;Many other topics are covered throughout SICP. The book itself is very top down
starting with the language and going all the way down to implementing a
VM&#x2F;register machine by the end of the book. Over time I may write some more
about those topics. All in all the course was incredibly interesting. The
conversations around lunch about the nature and philosophy of computing were a
lot of fun and spawned by the material being covered as well as the various
backgrounds we all had in our day to day work. You don&#x27;t leave the course with a
new package or framework in your toolbelt. Instead you&#x27;ve examined of of the
underlying fundamentals of languages, computing and software. This equips you
with new models for thinking that will hopefully impact any future computing
that you take part in. While the material is dense I think anybody that truly
enjoys engaging with our craft would benefit from engaging with the SICP
material in this setting.&lt;&#x2F;p&gt;
&lt;p&gt;If anybody has questions about the course I&#x27;d be more than happy to talk about
the material. For those of you who don&#x27;t know
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;dabeazllc&#x2F;videos&quot;&gt;David Beazley&lt;&#x2F;a&gt; I would
encourage you to visit his site or search his name on YouTube as he has a lot
of interesting material that encourages the learner to engage the material.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Kicking off Hardware Happy Hour 2020</title>
            <pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/h3lou-q1-2020/</link>
            <guid>https://burningdaylight.io/posts/h3lou-q1-2020/</guid>
            <description>&lt;p&gt;Last year we kicked off the first Hardware Happy Hour in Louisville Kentucky,
USA. We had a lot of fun sharing our projects with each other and hearing about
all the things being built in our own back yard. If you&#x27;re building something
you should try looking for an &lt;a href=&quot;https:&#x2F;&#x2F;hardwarehappyhour.com&#x2F;events&#x2F;&quot;&gt;event&lt;&#x2F;a&gt; in
your &lt;a href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;search?client=firefox-b-1-d&amp;amp;q=hardware+happy+hour&quot;&gt;area&lt;&#x2F;a&gt;
as more and more are popping up around the world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;circuit-playground-workshop&quot;&gt;Circuit Playground Workshop&lt;&#x2F;h2&gt;
&lt;p&gt;This year we wanted to start things off by inviting everybody to build and
learn together with the &lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;3333&quot;&gt;Circuit Playground Express&lt;&#x2F;a&gt;.
On January 29th we got together &lt;a href=&quot;https:&#x2F;&#x2F;flic.kr&#x2F;s&#x2F;aHsmL8818Z&quot;&gt;15 makers and hackers&lt;&#x2F;a&gt;
to have some fun with Arduino and Circuit Python making LEDs blink and speakers
buzz. To kick things off Auystn introduced the group to the Arduino IDE,
getting it to recognize your board setup, and receiving feedback via the serial
console. As with any workshop we had plenty of fun figuring out why this and
that didn&#x27;t work on whatever OS, but in many ways I think that was exposure for
those new to working with the boards and tools that unexpected behavior may
occur, but we can find a solution.&lt;&#x2F;p&gt;
&lt;p&gt;Once everybody had a board up and working &lt;a href=&quot;https:&#x2F;&#x2F;flic.kr&#x2F;p&#x2F;2inNG6V&quot;&gt;Austyn&lt;&#x2F;a&gt;
spent some time getting everybody comfortable with the Arduino syntax and
constructs. That turned into showing how to make some
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;h3-louisville&#x2F;HardwareLou_CircuitPlayground&#x2F;blob&#x2F;main&#x2F;cricket&#x2F;lightsensor_cricket.ino&quot;&gt;noise&lt;&#x2F;a&gt;
followed by a quick on&#x2F;off switch demo. With a couple more code demos and
showing off the Arduino code library we decided to switch gears and look at
Circuit Python before having some general open make time.&lt;&#x2F;p&gt;
&lt;p&gt;With Circuit Python we had the same demos with a different approach. Instead
of using an IDE and editor we showed how you could put the board into
bootloader mode and drag and drop the UF2 and code files directly on the board
for loading. Along with that we demo&#x27;d the ability to use REPL driven
development on the boards for quick prototyping and feedback.&lt;&#x2F;p&gt;
&lt;p&gt;Armed with Arduino and Circuit Python we decided it was time for us to step
back and let people hack. Some had fun with accelerometer libraries while
others scanned colors and lit up LEDs. By the end of the night I was rick
rolled by a Circuit Playground.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;h3_a.jpg&quot; alt=&quot;H3 2020 Austyn providing instruction&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;h3_e.jpg&quot; alt=&quot;H3 2020 Group&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;h3_b.jpg&quot; alt=&quot;H3 2020 Group&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;More photos from the event &lt;a href=&quot;https:&#x2F;&#x2F;flic.kr&#x2F;ps&#x2F;3R1NR2&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;louisville-hardware-happy-hour-2020&quot;&gt;Louisville Hardware Happy Hour 2020&lt;&#x2F;h2&gt;
&lt;p&gt;As 2020 continues we have 3 more H3 events planned in Louisville. Similar to
our 2019 event we are planning to have a Q2 and Q4 social. If you&#x27;re in the
area we would love to see or hear about your project over some food and drink
at &lt;a href=&quot;https:&#x2F;&#x2F;www.greatfloodbrewing.com&#x2F;&quot;&gt;Great Flood&lt;&#x2F;a&gt;. In Q3 we are hoping to
acquire some scopes to run a scope tutorial making use of the Circuit
Playground boards and teaching attendees how they can see their programs in a
new way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;Sponsors&lt;&#x2F;h2&gt;
&lt;p&gt;We (Austyn, Brad and I) want to give a huge shout out and thank you to the
&lt;a href=&quot;https:&#x2F;&#x2F;civicdataalliance.org&#x2F;&quot;&gt;Louisville Civic Data Alliance&lt;&#x2F;a&gt;. Without their
support and sponsorship we would not be able to provide boards for all of the
attendees to use. They have helped us kickstart a set of hardware that we can
use to drive future workshops and education experiences. Thank you for
providing us with the
&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;3399&quot;&gt;Code.org Circuit Playground Express Educators&#x27; Pack&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https:&#x2F;&#x2F;www.lvl1.org&#x2F;about&#x2F;&quot;&gt;LVL1&lt;&#x2F;a&gt; for hosting. LVL1 is an
amazing local resource in the area. If you haven&#x27;t checked it out you should
definitely try to make it to one of the
&lt;a href=&quot;https:&#x2F;&#x2F;www.lvl1.org&#x2F;events&#x2F;&quot;&gt;Open Meeting and Making&lt;&#x2F;a&gt; events on Tuesday
nights.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;www.tindie.com&#x2F;&quot;&gt;Tindie&lt;&#x2F;a&gt; for some awesome stickers and swag.&lt;&#x2F;p&gt;
&lt;p&gt;And thank you to the various &lt;a href=&quot;https:&#x2F;&#x2F;code.org&#x2F;about&#x2F;donors&quot;&gt;code.org&lt;&#x2F;a&gt; donors
who made the &lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;3399&quot;&gt;Adafruit Educators Pack&lt;&#x2F;a&gt;
possible for us to purchase and use.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sponsorship-assistance&quot;&gt;Sponsorship Assistance&lt;&#x2F;h3&gt;
&lt;p&gt;As I previously mentioned we are looking to run a scopes workshop this fall. If
you or an organization you know is interested in sponsoring this event we are
looking for help in acquiring digital scopes to provide attendees with. If you
are interested in helping please reach &lt;a href=&quot;mailto:contact@h3lou.org&quot;&gt;out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;where-to-follow&quot;&gt;Where to follow&lt;&#x2F;h4&gt;
&lt;p&gt;To keep up with future H3 Louisville events we have a group setup on
&lt;a href=&quot;https:&#x2F;&#x2F;gettogether.community&#x2F;hardware-happy-hour&#x2F;&quot;&gt;gettogether.community&lt;&#x2F;a&gt; and
we are active in the &lt;code&gt;#hardware&lt;&#x2F;code&gt; channel for
&lt;a href=&quot;https:&#x2F;&#x2F;louisville.slack.com&#x2F;&quot;&gt;Louisville Slack&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Events will also be published to the
&lt;a href=&quot;https:&#x2F;&#x2F;louisvilletech.org&#x2F;&quot;&gt;Louisville Tech&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;calendar.google.com&#x2F;calendar?cid=YW51ajMyMmxlY3RzdDRqN2Zsb2xwN3J2dmNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&quot;&gt;H3 Louisville&lt;&#x2F;a&gt;
calendars.&lt;&#x2F;p&gt;
&lt;p&gt;You can find our code and presentations on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hardware-Happy-Hour-Louisville&quot;&gt;Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Connected Roomba - Managing State</title>
            <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/connected-roomba-managing-state/</link>
            <guid>https://burningdaylight.io/posts/connected-roomba-managing-state/</guid>
            <description>&lt;p&gt;Last year I started work and completed the first prototype for managing a roomba
via sms and radio. Overall the prototype was a successful, but over time highly
unreliable in the face of failure. Most of this came down to state management
for the API endpoint and the Roomba OI (Open Interface) code running on the
Feather. This week I had the opportunity to sit down and fix some of that.&lt;&#x2F;p&gt;
&lt;p&gt;The latest version of the project can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;bot_commander&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;roomba&quot;&gt;Roomba&lt;&#x2F;h2&gt;
&lt;p&gt;In previous version of the application that ran on the Feather listening for
messages over radio I had managed the application state in this class:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;OpenInterface&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tx_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rx_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;brc_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;baud_rate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;busio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;UART&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(tx_pin, rx_pin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;baud_rate)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._tx_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tx_pin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._rx_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rx_pin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;brc_pin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin.direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;digitalio.Direction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;OUTPUT
        self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._baud_rate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;baud_rate
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._stopped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had done this so that I couldn&#x27;t send the Roomba signals that were invalid
for a given state based on the Open Interface documentation. The
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;circuitroomba&quot;&gt;circuitroomba&lt;&#x2F;a&gt; project were I
originally implemented this actually did a lot more state management. Overall
maybe this would be helpful during application development, but I found it made
code on the board unreliable due to the size of the class object in memory and
other work going on causing the board to eventually crash over an extended
period of time.&lt;&#x2F;p&gt;
&lt;p&gt;The more I thought about this I also realized I had caused an even larger issue.
The Roomba itself manages state internally. It has all of the logic laid out in
the OI document impelmented internally keeping things &amp;quot;safe&amp;quot; and tracking if a
given signal is valid or not. By adding my own state management layer on top of
this I opened the door for all kinds of trouble. First if the internal Roomba
logic differed from the OI documentation, or I implemented the OI logic
incorrectly I would be sending the application developer down all kinds of
paths trying to figure out why state transistion and command signals were not
exhibiting the expected behavior. Why setup 2 FSMs when one will do, and only
one ends up being the true dispatch? If we did this at the sms API layer we
could have 3, all with the potential for bugs, unexpected behavior, logic
mismatches, timing issues etc. It&#x27;s a combinatorial explosion of state
management issues.&lt;&#x2F;p&gt;
&lt;p&gt;So stepping back, considering the separation of concerns I determined all the
board needed to do was listen for a given signal flag and pass that on to the
Roomba. From there the Roomba can determine if the signal should be acted on
based on it&#x27;s internal state.&lt;&#x2F;p&gt;
&lt;p&gt;The new implementation discards the class object and instead just uses a super
loop and signal functions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        packet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rfm9x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;receive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;packet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;is not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
            packet_txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(packet, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ascii&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(packet_txt)

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;packet_txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;command_received&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(led)
                led.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(bot)
                led.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;False
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;packet_txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;command_received&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(led)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wake_up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(brc)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(bot)
                led.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;Unknown packet: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(packet_txt))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;except&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Additionally from time to time signals can have issues that previously caused
hanging in the application. Now the logic inside the super loop is wrapped in a
&lt;code&gt;try&#x2F;except&lt;&#x2F;code&gt; to prevent corrupt date from completely crashing the application.
Instead failures are ignored and we keep listening for the next signal. While
this isn&#x27;t always a viable solution in the case of signaling the Roomba the
stakes are low and this is something I&#x27;m comfortable with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pi-zero&quot;&gt;Pi Zero&lt;&#x2F;h2&gt;
&lt;p&gt;After fixing up the Feather board code I moved onto the Pi applications.
Previously I had setup a Flask application to act as the SMS webhook for Twilio.
This worked pretty well and was consistent over time, but there was the
occasional hang running on the Zero that led me to look into managing the
Python and Ngrok application with systemd. Converting from &lt;code&gt;crontab&lt;&#x2F;code&gt; was
fairly easy. I created a few &lt;code&gt;*.service&lt;&#x2F;code&gt; files and placed them in
&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Unit]
Description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;sms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;listener
After&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;ngrok.service

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Service]
Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;simple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;pi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;WorkingDirectory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;home&#x2F;pi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;home&#x2F;pi&#x2F;.virtualenvs&#x2F;lora-pi&#x2F;bin&#x2F;python &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;&#x2F;home&#x2F;pi&#x2F;projects&#x2F;roomba_supervisor&#x2F;sms_listener.py
Restart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;on-failure

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[Install]
WantedBy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the files were created I ran the following commands:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; enable sms_listener.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; start sms_listener.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now all of the required applications (ngrok, sms listener, button listener)
are managed by systemd. This controls their startup better than the previous
crontab setup and has the added benefit of restarting the service if it fails
our.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h3&gt;
&lt;p&gt;By observing and understanding the ways in which the prototyped system failed
I was able to identify areas where behavior and functionality could be
simplified resulting in an overall more reliable system. If you have any other
tips to share &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;reach out&lt;&#x2F;a&gt; and good luck
hacking.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Providing Context with Mocks</title>
            <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/mocking-context/</link>
            <guid>https://burningdaylight.io/posts/mocking-context/</guid>
            <description>&lt;p&gt;Day to day I spend a lot of time interacting with database systems.
While this is super useful it can also create issues with testing that
have been covered many many times in many other articles.&lt;&#x2F;p&gt;
&lt;p&gt;In some languages isolating database interactions comes from dependency
injection and swapping out the interface while testing. I&#x27;ve seen this
approach when working with C# for instance, but in Python I typically
see code bases mocking out these interface points rather than passing
in interfaces to functions and classes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mocking-context&quot;&gt;Mocking context&lt;&#x2F;h2&gt;
&lt;p&gt;One of my favorite constructs in Python is the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;datamodel.html#context-managers&quot;&gt;&lt;code&gt;context manager&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
These are incredibly useful objects for defining what the creation and
destruction of different interfaces should do via&lt;code&gt;__enter__&lt;&#x2F;code&gt; and &lt;code&gt;__exit__&lt;&#x2F;code&gt;.
(Append &lt;code&gt;a&lt;&#x2F;code&gt; for async context managers)&lt;&#x2F;p&gt;
&lt;p&gt;While useful they can be a bit tricky for mocking out in your test, and
recently when I started doing just that I couldn&#x27;t find any good examples
for accomplishing this. Below I&#x27;ve provided an example of mocking out
a context manager in your test, showing when you are interacting with
different parts of your mock and the mocked context manager API.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;update_entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyodbc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(cnxn_str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;autocommit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e05252;color:#ffffff;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cnxn:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cnxn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;crsr:
            crsr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#Update&amp;quot;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;unittest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;TestCase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;unittest.mock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;patch

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;InterfaceTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;TestCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;):
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;patch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;mod.pyodbc.connect&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;test_update_entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;mock_cnxn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# result of pyodbc.connect
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mock_cnxn_context_manager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mock_cnxn.return_value
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# object assigned to in with ... as con
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mock_cm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mock_cnxn_context_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__enter__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.return_value
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# result of with ... as crsr, note the extra __enter__.return_value
      # from the context manager
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mock_crsr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mock_cm.cursor.return_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__enter__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.return_value
      mock_crsr.fetchone.return_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,)
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Or if you want to test a side_effect mock_crsr.fetchone.side_effect

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;assertEqueal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.)

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Good luck mocking, context is what you make it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;additional-reading&quot;&gt;Additional Reading&lt;&#x2F;h3&gt;
&lt;p&gt;If you want to know more about &lt;code&gt;context managers&lt;&#x2F;code&gt; in Python checkout:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0343&#x2F;&quot;&gt;PEP 343&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;contextlib.html&quot;&gt;&lt;code&gt;contextlib&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Parsing Time with Python</title>
            <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/parsing-time/</link>
            <guid>https://burningdaylight.io/posts/parsing-time/</guid>
            <description>&lt;p&gt;I recently had the need to measure time and performance on an application that
interacted with a lot of on disk files. Most of the time when talking about
timing and measurement in Python we see the use of &lt;code&gt;timeit&lt;&#x2F;code&gt; and various built
in timing techniques. For this work I wanted a little more information about
how the application was interacting with the system, and what the performance
looked like from outside the application. Getting a rough view of this is
pretty easy on a nix using
&lt;a href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;time.1.html&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;time&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing-time&quot;&gt;Parsing Time&lt;&#x2F;h2&gt;
&lt;p&gt;To make use of &lt;code&gt;time&lt;&#x2F;code&gt; you simply call it with your application as an argument.
You can find the &lt;code&gt;time&lt;&#x2F;code&gt; args with &lt;code&gt;man time&lt;&#x2F;code&gt;, but on useful one is the &lt;code&gt;-v&lt;&#x2F;code&gt; flag
for more system information in the output, and an &lt;code&gt;--output&lt;&#x2F;code&gt; file path. Doing
this you get a fair amount of page, time and system information in your output
packaged up in a file that you can parse. In my script I&#x27;m also including some
information in the file name so I can know what source file my application was
parsing relating to that &lt;code&gt;time&lt;&#x2F;code&gt; information.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#!&#x2F;bin&#x2F;bash

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SRC_DIR_PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RESULTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;profile

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SRD_DIR_FILES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;basename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt; -- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;)
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filebase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;}&amp;quot;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filebase
   &#x2F;usr&#x2F;bin&#x2F;time -v --output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PROFILE_RESULTS_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filebase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.txt cmd args
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;done&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;done

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ls -1sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SRC_DIR_PATH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; profiled_directory.size
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the application has ran you can see the output of time in your file,
but you will also probably notice that it&#x27;s just a text blob not ready for
aggregation. Overall parsing time is relatively straight forward with one
gotcha. I use the below to translate the blob into rows and columns:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;typing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Tuple, List, Any, Union


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;format_time_profile_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fpath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fobject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) -&amp;gt; List[Any]:
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Takes a directory of files containing the output of &#x2F;usr&#x2F;bin&#x2F;time
    and transforms the time blob data to a series of rows and columns.
    &amp;quot;&amp;quot;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(fpath, fobject)
    time_metrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[fobject]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tfile:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tfile:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Elapsed&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line:
                clean_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lstrip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
                metric, sep, value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;clean_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rpartition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                time_metrics.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;())
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Handling the special case of the Elapsed time
                # format using : in the time formatting.
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;clean_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lstrip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
                metric, sep, seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;clean_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rpartition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# we now have something like val = 43.45
                # metric = Elapsed (Wall Clock) time (H:MM:SS or M:ss) 1
                # partition again on metric, then combine back our time.
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;metric, sep, minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;metric.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rpartition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# put time back into metrics
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{secs}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;time_metrics.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;())
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# setup tool second metric for easier evaluation of
                # time metrics
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(minutes) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(seconds)
                seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;minutes
                time_metrics.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(seconds)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;time_metrics
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the one edge case in &lt;code&gt;Elapsed (wall clock) time...)&lt;&#x2F;code&gt;. All other
rows end with &lt;code&gt;\n&lt;&#x2F;code&gt; and seperate the metric name from the value with &lt;code&gt;:&lt;&#x2F;code&gt;.
Elapsed wall clock time however throws in a couple extra colons for fun.
Overall not a big deal, but a little gotcha waiting in the details when
going from a string to another object&#x2F;format.&lt;&#x2F;p&gt;
&lt;p&gt;Using the script above you end up with a collection of rows and columns
that you can then use to find out how your application performed for that
run instance.&lt;&#x2F;p&gt;
&lt;p&gt;A quick bonus script, since my application was reading in and writing
out new files I wanted to include the size of the input files so I
could begin to understand the impact of the input file size on the
applications time metrics.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;format_size_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fpath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fobject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) -&amp;gt; List[List[str]]:
    f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(fpath, fobject)
    size_metrics &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;r&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sfile:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sfile:
            metric, sep, filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rpartition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            size_metrics.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([metric.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), filename.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()])
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;size_metrics[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this and the above time parsing we have the input file size, name,
application command, page and time information. More than enough to begin
looking at what our application is doing from the outside.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Cleaning Airflow Logs</title>
            <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/airflow-log-cleanup/</link>
            <guid>https://burningdaylight.io/posts/airflow-log-cleanup/</guid>
            <description>&lt;p&gt;At home and work I make use of Airflow to automate various batch&#x2F;time based
task. I&#x27;ve even setup a container based Airflow
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;airflow-docker&quot;&gt;environment&lt;&#x2F;a&gt; to make it easy to
bring this up and down.&lt;&#x2F;p&gt;
&lt;p&gt;One of the things you quickly find with Airflow is that while it doesn&#x27;t need
a lot of  resources to run, it can quickly eat up whatever disk space you
provide it with logs. When this happens the first knobs to look at turning are
your log level and your schedulers dag bag refresh rate. While you may not be
refreshing dags often your may want to keep your log level low to capture more
data and use your log store to put a TTL on things at the &lt;code&gt;INFO&lt;&#x2F;code&gt; level.
Unfortunately you can&#x27;t completely turn off Airflows disk logging without
building in some custom functionality today. To help manage this I wrote a
small Python script that handles cleaning up the local logs on a given interval.
Note if you&#x27;re running Airflow in a setup other than &lt;code&gt;LocalExecutor&lt;&#x2F;code&gt; you will
want to handle this with something like Cron instead of a dag since you need
to clean logs up on the Scheduler, Worker and Webserver.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;truncate_process_manager_log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log_base_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    The scheduler records all acitivty related to dag processing in the same file.
    This file can grow large fast, and is actively in use. Intead of unlinking the
    file and pulling it out from under the scheduler truncate.
    &amp;quot;&amp;quot;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dag_process_manager_log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
        log_base_path, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dag_processor_manager&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dag_processor_manager.log&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(dag_process_manager_log, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;w&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;traverse_and_unlink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fobject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Traverse the log directory on the given airflow instance (webserver, scheduler,
    worker, etc) and remove any logs not modified in the last hour.
    &amp;quot;&amp;quot;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;scandir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(fobject):
        new_fobject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(fobject, entry)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(new_fobject):
            last_modified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(new_fobject).st_mtime
            delta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;datetime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;utcnow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;last_modified
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;delta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOURS_IN_MILLISECONDS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{new_fobject}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; has not been used in the last hour. \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;Cleaning up.&amp;quot;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;unlink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(new_fobject)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(new_fobject):
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;traverse_and_unlink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(new_fobject)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The full script is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;snippets&#x2F;tree&#x2F;main&#x2F;airflow-log-cleanup.py&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Review EdX UT601 Embedded Systems</title>
            <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/edx-ut601-review/</link>
            <guid>https://burningdaylight.io/posts/edx-ut601-review/</guid>
            <description>&lt;p&gt;I recently completed my first EdX course
&lt;a href=&quot;https:&#x2F;&#x2F;courses.edx.org&#x2F;courses&#x2F;course-v1:UTAustinX+UT.6.10x+3T2019&#x2F;course&#x2F;&quot;&gt;Embedded Systems Shape the World&lt;&#x2F;a&gt;
and wanted to share a little bit about the experience.&lt;&#x2F;p&gt;
&lt;p&gt;For a while now I&#x27;ve been exploring various venues for continuing education.
The longer I&#x27;m in my field the more I learn and then that leads to me realizing
how much more I want to learn in new areas. That said I&#x27;ve never been great at
taking courses that are not self paced partially because week to week my
schedule can change dramatically between work and family. Because of this over
time I&#x27;ve tried out multiple platforms of learning such as Pluralsight, Khan
Academy, formal online masters programs etc. All of them have their pros and
cons ranging of cost to quality to engaging content.&lt;&#x2F;p&gt;
&lt;p&gt;Last year I started learning more about SoC type hardware via Circuit
Playground. This has lead me on an adventure to learn more and more about
embedded systems, C and hardware. Most of this has been stitched together from
various sources and ad hoc as the need arose in a personal project. Towards the
end of summer I decided I wanted to formalize this learning and started to look
around. There are online programs from universities like TESU, and individuals
offering classes, but I stumbled across the UT 601 class on EdX and realized
the setup would be a good fit for me. Additionally EdX offers verified courses
with certificates which I thought might be nice in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Signing up and getting verified with EdX was easy. I was able to use my laptop
and phone to complete all the task in under 30 minutes. The layout of EdX is
very similar to other online learning platforms that I&#x27;ve used.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ut-601&quot;&gt;UT 601&lt;&#x2F;h2&gt;
&lt;p&gt;Once I started UT 601 I started to run into a few more barriers. The course
requires the purchase of a Texas Instruments kit for use throughout, which
makes sense this is an embedded systems course. What I wasn&#x27;t expecting was the
use of Keil. To complete the course I needed to be able to install Keil &lt;code&gt;4.2&lt;&#x2F;code&gt;,
and a simulator DLL (which was pretty neat) on a Windows platform. A couple
annoyances there. This is an online course with the goal of global education
opportunities, but immediately I&#x27;m locked into a platform, and additionally Arm
places Keil behind a personal information collection form. I was happy that
Microsoft provides a Windows 10 ISO that I could use within a VM to work on the
course. After downloading that though I found that VirtualBox didn&#x27;t pass
through the board USB connection so that I could make use of the Stellaris
Debugging software&#x2F;firmware that I would need. After some time fiddling with it
I ended up switching to VMWare, and after switching the USB connection to pass
through as 2.0 was able to get everything packaged up into a Windows VM with
Keil, the Stellaris software, the simulator DLL and the appropriate Keil
registry edits. In case it would ever help anybody my VMWare config file is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;snippets&#x2F;tree&#x2F;main&#x2F;Windows%2010%20x64.vmx&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After spending a couple days getting the IDE, hardware and VM all setup and
playing well together I dove into the course. Overall I enjoyed it. It exposed
me to PIN programming and doing a lot of GPIO work that I haven&#x27;t done in the
past. Additionally it was a good refresh on concepts at the beginning like
pipelining. One thing I did notice is there was a big jump from lab 5 to 6. We
went from editing template projects to writing most of the project from the
ground. Each section provded a different amount of direction (not gradually
declining, but instead seemingly random) on how to complete the lab. New
concepts were quickly introduced and some lacking explination such as using the
Keil Oscilliscope and Analyzer. Overall it was a good course, but I would
suggest dedicating a couple weeks and doing it all at once due to how much it
ramps up half way through. The accompanying book is made available in each
section and I highly recommend reading it as the videos act more as highlights
than covering the material at a level that prepares you for the labs.&lt;&#x2F;p&gt;
&lt;p&gt;The one thing that was a minor annoyance throughout was the reliance on Keil
(IDE&#x27;s have a place but often hide what the compiler and tools are doing
creating a gap in knowing how stuff works) and the problems experienced by
taking this course in a VM. Other than that the course was interesting and
challenging.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h3&gt;
&lt;p&gt;Overall I&#x27;m glad I took and &lt;a href=&quot;&#x2F;static&#x2F;certifications&#x2F;Embedded_601.pdf&quot;&gt;completed&lt;&#x2F;a&gt;
UT601. I learned a fair amount, and look forward to taking
&lt;a href=&quot;https:&#x2F;&#x2F;courses.edx.org&#x2F;courses&#x2F;course-v1:UTAustinX+UT.6.20x+3T2019&#x2F;course&#x2F;&quot;&gt;part 2&lt;&#x2F;a&gt;
after the the new year. EdX is a platform I see myself continuing to use as it&#x27;s
been super simple, has a range of interesting content, and the course
facilitators are really responsive.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>EdgeRouter X DDNS with Gandi</title>
            <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/edgerouter-x-ip-reporting/</link>
            <guid>https://burningdaylight.io/posts/edgerouter-x-ip-reporting/</guid>
            <description>&lt;p&gt;I recently &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;edgerouter-x-vpn-setup-prt-one&#x2F;&quot;&gt;setup&lt;&#x2F;a&gt; a VPN for my home
network. To make use of it from remote networks I need to be able to resolve
the public IP of my router. Instead of hard coding the IP I setup an domain
with Gandi and created an A Record that I update from my router.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fetching-and-reporting-your-ip&quot;&gt;Fetching and reporting your IP&lt;&#x2F;h2&gt;
&lt;p&gt;This part was fairly easy. With a quick search I found that somebody else had
already solved the problem of reporting the public IP from an Ubiquiti router
to Gandi! Checkout their work
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;georgr&#x2F;erx-gandi-nat-ddns&quot;&gt;here&lt;&#x2F;a&gt;. Their &lt;code&gt;README&lt;&#x2F;code&gt; provides
a nice easy walk through of the setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scheduling-it&quot;&gt;Scheduling it&lt;&#x2F;h2&gt;
&lt;p&gt;With the above script updated and working on my router the next thing to do was
schedule it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quick note only specific directories persist between firmware updates on the
EdgeRouter. Because of this I suggest putting the script above in
&lt;code&gt;config&#x2F;scripts&#x2F;&lt;&#x2F;code&gt; or &lt;code&gt;config&#x2F;user-data&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The EdgeRouter OS provides a helper utility called &lt;code&gt;task-scheduler&lt;&#x2F;code&gt; which
wraps &lt;code&gt;cron&lt;&#x2F;code&gt;. The benefit of &lt;code&gt;task-schedule&lt;&#x2F;code&gt; is that is saves our commands to
&lt;code&gt;config&lt;&#x2F;code&gt; so they persist through upgrades. &lt;code&gt;ssh&lt;&#x2F;code&gt; into your router:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ssh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;configure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; system task-scheduler task ddnsupdate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; system task-scheduler task ddnsupdate crontab-spec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;0 5 * * 0&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; system task-scheduler task ddnsupdate executable path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;config&#x2F;user-data&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;commit
save
cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;cron.d&#x2F;vyatta-crontab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</description>
        </item>
        <item>
            <title>EdgeRouter X PiHole Setup</title>
            <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/edgerouter-x-pihole-setup/</link>
            <guid>https://burningdaylight.io/posts/edgerouter-x-pihole-setup/</guid>
            <description>&lt;p&gt;I&#x27;ve seen a few post from people asking for help adding a PiHole to their
network with an EdgeRouter. One solution I&#x27;ve seen is to use
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;britannic&#x2F;blacklist&quot;&gt;brittanics black-list&lt;&#x2F;a&gt;. This is
nice for those wanting to run software on their router, but I didn&#x27;t want
the load, and I want the functionality that the PiHole provides. Hopefully
this guide help those looking to add a PiHole in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-the-pihole&quot;&gt;Setting up the PiHole&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m going to assume you&#x27;ve already installed PiHole on your device. If not the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pi-hole&#x2F;pi-hole&quot;&gt;docs&lt;&#x2F;a&gt; are a great place to start. If you
set this up on a Raspberry Pi I encourage you to disable autologin, add a new
user, add the user to the sudo group and enable ssh. For more information
checkout the RaspberryPi
&lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;documentation&#x2F;remote-access&#x2F;ssh&#x2F;&quot;&gt;docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuring-edgerouter-to-use-the-pihole&quot;&gt;Configuring EdgeRouter to use the PiHole&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;I&#x27;m assuming your edgerouter is the DHCP server on your network.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With PiHole installed, connect the device to your network (preferably wired) and
login to the Ubiquity web ui. Click on the &lt;code&gt;Services&lt;&#x2F;code&gt; tab.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ubq-services.png&quot; alt=&quot;Ubiquity OS Services Tab&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On this tab you should see an action button on the right side of the screen
across from your DHCP information. Click it, and select configure. In the pop up
window select &lt;code&gt;Leases&lt;&#x2F;code&gt;, and you should see the device your PiHole is on. Click
the &lt;code&gt;Static MAC&#x2F;IP Mapping&lt;&#x2F;code&gt; tab and give this device a static IP.&lt;&#x2F;p&gt;
&lt;p&gt;While we are here click the details tab and add the IP as &lt;code&gt;DNS 1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;dhcp-dns.png&quot; alt=&quot;Ubiquity OS DHCP DNS&quot; title=&quot;Ubiquity OS DHCP DNS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Return to the main web ui &lt;code&gt;Dashboard&lt;&#x2F;code&gt;. At the bottom of the screen you should
see a &lt;code&gt;system&lt;&#x2F;code&gt; tab with an arrow on the far right.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ubq-system.png&quot; alt=&quot;Ubiquity OS System Config Tab&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Click it and on the right side of the pop up add the IP you just assigned the
PiHole as your &lt;code&gt;Name Server&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;name-server.png&quot; alt=&quot;Ubiquity OS Name Server&quot; title=&quot;Ubiquity OS Name Server&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With this in place login to your PiHole, navigate to network and you should see
your router listed. The device should be highlighted green with a query count
indicating that traffic is flowing through the PiHole as expected.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>EdgeRouter X Home VPN Setup Pt 1</title>
            <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/edgerouter-x-vpn-setup-prt-one/</link>
            <guid>https://burningdaylight.io/posts/edgerouter-x-vpn-setup-prt-one/</guid>
            <description>&lt;p&gt;Recently I got the itch to setup a VPN for my home network to access my device
lab on the go, or share with others. My home setup isn&#x27;t too complicated, but
it&#x27;s a bit different from other setups I found when I started down this path.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Network Components: Arris Surfboard SB6141, Ubiquiti EdgeRouter X, Ubiquiti
AmplifiHD&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I am not a network or sysadmin by day. This is something I&#x27;m actively
learning on and figuring out. If you see something wrong or have suggestions I
would love to hear about it. &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;Reach out.&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;preparing-the-network&quot;&gt;Preparing the network&lt;&#x2F;h2&gt;
&lt;p&gt;As my starting point I had used the EdgeRouter wizard for initial setup way
back when. The default places the network in the 192.168.1.0&#x2F;24 range which
should be changed to prevent a conflict for devices on remote networks. To add
a new dhcp server handing out address in a new range we will use the ubiquiti
ui.&lt;&#x2F;p&gt;
&lt;p&gt;To start login to the ubiquiti ui and navigate to the &lt;code&gt;Services&lt;&#x2F;code&gt; tab.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ubq-services.png&quot; alt=&quot;Ubiquity OS Services Tab&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From here you can see &lt;code&gt;+ Add DHCP Server&lt;&#x2F;code&gt; on the left side of the screen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;add-dhcp.png&quot; alt=&quot;Ubiquity OS dhcp add button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Select &lt;code&gt;Add&lt;&#x2F;code&gt; and configure a new DHCP server leasing addresses in a new range
(&lt;code&gt;192.168.&amp;lt;x&amp;gt;.0&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;dhcp-config.png&quot; alt=&quot;Ubiquity OS add dhcp button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With this setup the next thing to do is test it works before removing the old
DHCP server settings.&lt;&#x2F;p&gt;
&lt;p&gt;Return to your Dashboard, and locate the &lt;code&gt;switch0&lt;&#x2F;code&gt; interface. To the far right
you should see an actions button.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ubq-action.png&quot; alt=&quot;Ubiquity OS actions button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Click, select config, and add a manually configured IP for the dhcp server you
just configured (192.168.x.1). With switch0 talking to our new network range
return to the &lt;code&gt;Services&lt;&#x2F;code&gt; tab. Click &lt;code&gt;actions&lt;&#x2F;code&gt; on the original DHCP server,
select disable, and then logout.&lt;&#x2F;p&gt;
&lt;p&gt;Now you can log back in on the new network range &lt;code&gt;192.168.x.1&lt;&#x2F;code&gt;. Login, select
&lt;code&gt;switch0&lt;&#x2F;code&gt; from the &lt;code&gt;Dashboard&lt;&#x2F;code&gt; tab as we did earlier, and remove the original
DHCP server. For any devices on your network that were active you will need to
do a &lt;code&gt;dhclient -r; dhclient&lt;&#x2F;code&gt; to refresh your device (on *nix) ip and lease in
the new range.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;With the network configured we are now ready to install and setup wireguard
Since this has already ran a bit long in the tooth part 2 can be found
&lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;edgerouter-x-vpn-setup-prt-two&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>EdgeRouter X Home VPN Setup Pt 2</title>
            <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/edgerouter-x-vpn-setup-prt-two/</link>
            <guid>https://burningdaylight.io/posts/edgerouter-x-vpn-setup-prt-two/</guid>
            <description>&lt;p&gt;&lt;strong&gt;I am not a network or sysadmin by day. This is something I&#x27;m actively
learning on and figuring out. If you see something wrong or have suggestions
I would love to &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;hear about it&lt;&#x2F;a&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;edgerouter-x-vpn-setup-prt-one&#x2F;&quot;&gt;part one&lt;&#x2F;a&gt; we configured the
network. Now we are ready to install Wireguard and create our interface. Before
I jumped into doing this I referenced these post and docs.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wireguard.com&#x2F;quickstart&#x2F;&quot;&gt;Wireguard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.erianna.com&#x2F;wireguard-ubiquity-edgeos&#x2F;&quot;&gt;Charles R. Portwood || Wireguard on Ubiquity OS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.erianna.com&#x2F;wireguard-ubiquity-edgeos&#x2F;&quot;&gt;David Wireguard Home Network&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To get started &lt;code&gt;ssh&lt;&#x2F;code&gt; into the EdgeRouter device.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ssh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;edgerouterip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once logged in we need to pull, install the Wireguard &lt;code&gt;.deb&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;tmp

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Download the appropriate version, pay special attention here, if you are using the Ubiquity v2 firmware
# you will need the wireguard-v2-*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;curl -qLs https:&#x2F;&#x2F;github.com&#x2F;Lochnair&#x2F;vyatta-wireguard&#x2F;releases&#x2F;download&#x2F;0.0.20190913-1&#x2F;wireguard-v2.0-e50-0.0.20190913-1.deb

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; dpkg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; wireguard.deb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An important note from the source repo&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note that since Wireguard is not software bundled with the EdgeOS firmware,
firmware upgrades necessitate re-installing the Wireguard debian package. Once
the wireguard package is re-installed re-applying the existing Vyatta config
file, or rebooting will restore your interfaces.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First things first we need to generate a private key for the router, and a
public key to share with clients.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; wg genkey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;dev&#x2F;tty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pubkey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;123ddgqeqe123123
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will output two lines. The first is your private key, the second is your
public key. Keep these secure, but ready since you will need to provide the
public key to all clients.&lt;&#x2F;p&gt;
&lt;p&gt;With our keys generated we can now configure the Wireguard interface. Ours
will be &lt;code&gt;wg0&lt;&#x2F;code&gt;. In the terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;configure

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; interfaces wireguard wg0 address 192.168.55.1&#x2F;24
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; interfaces wireguard wg0 listen-port 51820
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; interfaces wireguard wg0 route-allowed-ips true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; interfaces wireguard wg0 private-key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;private-key-from above-output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;save
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This created a new wireguard network on &lt;code&gt;192.168.55.1&#x2F;24&lt;&#x2F;code&gt;; listening to port
&lt;code&gt;51820&lt;&#x2F;code&gt; and will route all the traffic through &lt;code&gt;wg0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now keeping our public key ready we can configure a client.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuring-wireguard-on-ubuntu&quot;&gt;Configuring Wireguard on Ubuntu&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re using Ubuntu 19.10 wireguard should be available from &lt;code&gt;apt&lt;&#x2F;code&gt; by
default:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get install wireguard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With prior versions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; add-apt-repository ppa:wireguard&#x2F;wireguard
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get install wireguard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once again we need to generate our keys, now on the client:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; genkey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;dev&#x2F;tty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pubkey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, create the wireguard interface, still on the client.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;wireguard&#x2F;wg0.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;chown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; root:root &#x2F;etc&#x2F;wireguard&#x2F;wg0.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 600 &#x2F;etc&#x2F;wireguard&#x2F;wg0.conf

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; vim &#x2F;etc&#x2F;wireguard&#x2F;wg0.conf

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-------wg0.conf--------&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; = 192.168.55.5&#x2F;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PrivateKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;client-private-key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Peer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;router-public-key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;AllowedIPs = 192.168.55.0&#x2F;24
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; = public_ip_of_router:51820
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;peering-the-router-and-client&quot;&gt;Peering the router and client&lt;&#x2F;h2&gt;
&lt;p&gt;With the client configured and keeping the public key it generated, return to
the  router. &lt;code&gt;ssh&lt;&#x2F;code&gt; and run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; interfaces wireguard wg0 peer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;client-public-key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; allowed-ips 192.168.55.5&#x2F;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;commit
save
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;starting-your-client-vpn&quot;&gt;Starting your client VPN&lt;&#x2F;h2&gt;
&lt;p&gt;With &lt;code&gt;wg0&lt;&#x2F;code&gt; configured and ready bring up the VPN on our client.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; wg-quick up wg0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And verify connectivity by running &lt;code&gt;sudo wg&lt;&#x2F;code&gt; on the client, and router.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h3&gt;
&lt;p&gt;With VPN setup I&#x27;m now able to access and provide access to my device lab. This
also  keeps devices using this router that are not part of the lab separated.&lt;&#x2F;p&gt;
&lt;p&gt;Finally if you&#x27;re doing this for the first time some next steps you might want
to take include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switch devices to only allowing ssh via keys.&lt;&#x2F;li&gt;
&lt;li&gt;Switch to a non default ssh port.&lt;&#x2F;li&gt;
&lt;li&gt;Setup fail2ban.&lt;&#x2F;li&gt;
&lt;li&gt;Pickup from &lt;a href=&quot;https:&#x2F;&#x2F;opensource.com&#x2F;article&#x2F;19&#x2F;10&#x2F;linux-server-security&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title> Hackaday Connected World Follow Up</title>
            <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/hackaday-connected-world/</link>
            <guid>https://burningdaylight.io/posts/hackaday-connected-world/</guid>
            <description>&lt;p&gt;Recently Hackaday announced the results of the
&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;contest&#x2F;163251-connected-world-contest&quot;&gt;Connected World&lt;&#x2F;a&gt;
contest. It made my day when I read Sophi&#x27;s email telling me that
&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.io&#x2F;project&#x2F;167025-connected-roomba&quot;&gt;ConnectedRoomba&lt;&#x2F;a&gt; was one
of the OSHPark certificate recipients. What may have seemed like a small
announcement meant a lot to me. I&#x27;m still fairly new to this area of computing,
and without formal training. Instead I spend a lot of time reading,
listening and building to learn everything I can. Validation and
success no matter how big or small help us all stay motivated to continue
in our pursuits. Thank you to everybody at Hackaday for setting up a community
and contest for us all to continue learning, sharing and hacking together.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;Whats next&lt;&#x2F;h2&gt;
&lt;p&gt;Everybody starts somewhere and the contest pushed me to get started on my first
homebrew project. As part of this I found a lot of new areas to study up on.
I&#x27;ve enrolled in the
&lt;a href=&quot;https:&#x2F;&#x2F;courses.edx.org&#x2F;courses&#x2F;course-v1:UTAustinX+UT.6.10x+3T2019&#x2F;course&#x2F;&quot;&gt;edX Embedded Systems&lt;&#x2F;a&gt;
course. If you&#x27;re taking that too reach out as I&#x27;d love to have a group to work
with. Additionally I want to migrate the ngrok setup in my project to a route
on my own domain, understand secure LoRa transmission and expand my electronics
knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;On the board front I found &lt;a href=&quot;https:&#x2F;&#x2F;oshpark.com&#x2F;shared_projects&#x2F;XuZmZmfd&quot;&gt;this&lt;&#x2F;a&gt;
interesting Feather PCB from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tannewt&quot;&gt;@tannewt&lt;&#x2F;a&gt; while debating
what to do with the OSHPark certificate. I recently backed the &lt;a href=&quot;https:&#x2F;&#x2F;www.crowdsupply.com&#x2F;sutajio-kosagi&#x2F;fomu&quot;&gt;FOMU&lt;&#x2F;a&gt;
and learned of &lt;a href=&quot;https:&#x2F;&#x2F;fupy.github.io&#x2F;&quot;&gt;FuPy&lt;&#x2F;a&gt; so this seems like an interesting
PCB to pick up, order some components and start learning electronics at a whole
new level.&lt;&#x2F;p&gt;
&lt;p&gt;Congrats to everybody that participated in the Connected World contest. Have fun
hacking on whatever comes next! Thank you Hackaday, DigiKey and OSHPark for
kick starting this new learning path :).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;If you want to chat feel free to follow up via &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt;
or on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;gencon-portal&quot;&gt;Sourcehut&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Postgres Advisory Locks with Asyncio</title>
            <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/async-postgres-locks/</link>
            <guid>https://burningdaylight.io/posts/async-postgres-locks/</guid>
            <description>&lt;p&gt;Recently, here on the Cloud team at Elastic we started working on building a
new service in Python 3.7. This service fetches data from a Postgres database,
transforms it, and then submits that data to another service. Like many
cloud-based services, ours runs in an orchestrated container environment where
N instances can be running at any time. Often that&#x27;s a good thing, but our
service has a few critical sections where only one instance should be able to
process data. Since we are retrieving data from Postgres, we decided to go
ahead and make use of &lt;code&gt;advisory locks&lt;&#x2F;code&gt; to control these critical sections. In
this article I want to explain what advisory locks are, provide an
implementation, and test to verify functionality.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;advisory-locks&quot;&gt;Advisory locks&lt;&#x2F;h2&gt;
&lt;p&gt;Postgres provides the ability to create locks that only have meaning within
the context of your application. These are
&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;9.4&#x2F;explicit-locking.html#ADVISORY-LOCKS&quot;&gt;advisory locks&lt;&#x2F;a&gt;.
You use advisory locks to control an application’s ability to process data.
Anytime your application is about to enter a critical path, you attempt to
acquire the lock. When you acquire the lock, you can safely continue processing.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;gold_leader&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, dbconfig) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it fails, then your application may retry, wait, or exit. Since this lock is
external to the application, this allows for multiple instances of the
application to run while providing safe critical path concurrency.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-lock&quot;&gt;Building the lock&lt;&#x2F;h2&gt;
&lt;p&gt;As part of our work, we wanted to make using advisory locks easy. To do this,
we created the &lt;code&gt;PostgresAdvisoryLock&lt;&#x2F;code&gt; context manager. Since this is meant to
be used with &lt;code&gt;asyncio&lt;&#x2F;code&gt; and &lt;code&gt;asyncpg&lt;&#x2F;code&gt;, we control the acquisition and release of
the lock via &lt;code&gt;__aenter__&lt;&#x2F;code&gt; and &lt;code&gt;__aexit__&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__aenter__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) -&amp;gt; asyncpg.connection.Connection:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.locked_connection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;asyncpg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_set_lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.got_lock:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.locked_connection
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.locked_connection:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.locked_connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;AdvisoryLockException

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__aexit__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;exc_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;exc_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;exc_tb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now this can be called like any other async context manager.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(config, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;appname&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection:
    val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fetchrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;testing-the-lock&quot;&gt;Testing the lock&lt;&#x2F;h2&gt;
&lt;p&gt;Now that the &lt;code&gt;PostgresAdvisoryLock&lt;&#x2F;code&gt; class is implemented, we need to test it.
To start we verify the base functionality by acquiring the lock, running a
query, and validating we can&#x27;t get the lock inside the same scope. I recommend
using the &lt;code&gt;asynctest&lt;&#x2F;code&gt; library to help work with &lt;code&gt;asyncio&lt;&#x2F;code&gt; inside &lt;code&gt;unittest&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;test_get_results_with_lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;gold_leader&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, dbconfig) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection:
            val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fetchrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;assertEqual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(val[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;test_lock_prevents_second_lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;assertRaises&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(AdvisoryLockException):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;gold_leader&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, dbconfig) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fetchrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;gold_leader&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, dbconfig) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;second_connection:
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;second_connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fetchrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we are going to use this to control the execution of code across many
processes, we also need to verify external process behavior. To do this we use
the &lt;code&gt;asyncio&lt;&#x2F;code&gt;  &lt;code&gt;subprocess.create_subprocess_exec&lt;&#x2F;code&gt; function to create a new
process. This process attempts to get the lock our main process already has,
and it should fail.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;test_advisory_lock_prevents_access_from_separate_process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;assertRaises&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(AdvisoryLockException):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AdvisoryLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;gold_leader&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, dbconfig) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;connection:
                proc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;asyncio.subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;create_subprocess_exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
                    sys.executable,
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;-c&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
                    executable,
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;asyncio.subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PIPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
                )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h3&gt;
&lt;p&gt;When we started to build our new application, we knew we would be waiting on
the network and database. Since we also had work that could happen during the
wait, we decided to use &lt;code&gt;asyncio&lt;&#x2F;code&gt;. Additionally we identified a critical path
where we used Postgres to achieve concurrency control. To make critical path
control easier we created a module and a series of tests. Once finished we
realized this might be helpful to others looking for the same control, or as
a reference for those learning to test with asyncio.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the full implementation and Docker setup
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;PostgresAdvisoryLock&quot;&gt;on Sourcehut&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Connected Roomba - Wrapping Up</title>
            <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/connected-roomba-wrap-up/</link>
            <guid>https://burningdaylight.io/posts/connected-roomba-wrap-up/</guid>
            <description>&lt;p&gt;With everything working I wanted to make sure I didn&#x27;t have to reset everything
anytime an odd decode error occurs, something loses and regains power, etc. For
the Feather attached to the Roomba handling this is pretty straight forward.
Everything is already running in a super loop, so all I need to add is a
&lt;code&gt;try&#x2F;except&lt;&#x2F;code&gt; block to the &lt;code&gt;while&lt;&#x2F;code&gt; loop and discard errors. Doing the same thing
for the Pi was again straight forward, but since it is running Linux I needed
to make sure the applications handled failures, and that the scripts restart if
the board restarts, the OS bounces, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Similar to the Feather code I wrapped everything in a while loop, added
exception handlers, but I also added logging so that I could understand if
errors are created by the OS, the code or something else:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;logging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOG_FORMAT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;asctime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;levelname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;basicConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&#x2F;home&#x2F;pi&#x2F;logs&#x2F;button.log&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;INFO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOG_FORMAT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;datefmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%Y %I&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%S %p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
)
logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;getLogger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(__name__)

...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;BaseException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;e:
            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(e)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;pass

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And since this is running on Linux setting up &lt;code&gt;cron&lt;&#x2F;code&gt; to handle starting the
applications after reboot was one command away.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; crontab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -e

@reboot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cd &#x2F;home&#x2F;pi&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;&#x2F;home&#x2F;pi&#x2F;.virtualenvs&#x2F;lora-pi&#x2F;bin&#x2F;python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F;projects&#x2F;roomba_supervisor&#x2F;button_listener.py &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F;logs&#x2F;button.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@reboot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cd &#x2F;home&#x2F;pi&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;&#x2F;home&#x2F;pi&#x2F;.virtualenvs&#x2F;lora-pi&#x2F;bin&#x2F;python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F;projects&#x2F;roomba_supervisor&#x2F;sms_listener.py &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F;logs&#x2F;sms.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@reboot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sleep 10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;&#x2F;home&#x2F;pi&#x2F;ngrok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; http 5000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F;logs&#x2F;ngrok.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@reboot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sleep 20 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; http:&#x2F;&#x2F;127.0.0.1:4040&#x2F;api&#x2F;tunnels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;home&#x2F;pi&#x2F;logs&#x2F;ngrok_details.log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;connected-roomba-demo.gif&quot; alt=&quot;Remote Roomba Demo&quot; title=&quot;Remote Roomba Demo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;Since this was my first project interacting with an embedded system I learned
quite a bit along the way. Abstractions are something that are useful, but can
add bloat and load that won&#x27;t work in constrained environments. I wasn&#x27;t able
to use the Roomba library I built with the Circuit Playground on the Feather
that I connected to the Roomba. CircuitPython made learning and prototyping
easy with a REPL and constant connection to the Open Interface. It also allowed
me to focus on learning more about the boards and data interactions since I
wasn&#x27;t busy rebuilding my software toolchain for a new environment. That said
it has also inspired me to learn more and dig deeper into the embedded world
since there are a lot of things I can&#x27;t user (interupts). There is a lot that
I don&#x27;t know or understand yet, but with the help of some books and boards I
am sure I will be busy expanding my understanding for the next few years.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;I really enjoyed working on this project. If you want to reach out feel free
to follow up via &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt; or on
.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Connected Roomba - SMS</title>
            <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/connected-roomba-remote-commands/</link>
            <guid>https://burningdaylight.io/posts/connected-roomba-remote-commands/</guid>
            <description>&lt;p&gt;As I mentioned before one of the primary reasons for starting this project was
to let my wife and I start the Roomba when we are not at home. One device that
most of us take everywhere is our phone. An easy way to to send information
from your phone without a custom app, stack and hassle is SMS. While it&#x27;s easy
to broadcast receiving that message can take a little work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;twilio&quot;&gt;Twilio&lt;&#x2F;h2&gt;
&lt;p&gt;Luckily monitoring a number for messages is pretty much a solved problem.
Twilio offers an easy way to setup number with an attached webhook for
receiving and sending messages. They also have a nice
&lt;a href=&quot;https:&#x2F;&#x2F;www.twilio.com&#x2F;docs&#x2F;quickstart&#x2F;python&quot;&gt;Python tutorial&lt;&#x2F;a&gt; that had me up
and running in about 10 minutes. Since I was already using the Pi Zero to send
commands to the Roomba setting up a script to watch for an SMS message and pass
on the new command was simple enough.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;busio
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;board
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;adafruit_rfm9x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;digitalio &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;DigitalInOut
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Flask, request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;twilio.twiml.messaging_response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;MessagingResponse

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;DigitalInOut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(board.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CE1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RESET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;DigitalInOut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(board.D25)
spi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;busio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SPI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(board.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SCK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;MOSI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;board.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;MOSI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;MISO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;board.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;MISO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
rfm9x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;adafruit_rfm9x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RFM9x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(spi, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RESET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;433.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
rfm9x.tx_power &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;23

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(__name__)


@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&#x2F;sms&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;methods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;GET&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;sms_start_roomba&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;():
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    When a message is received determine which
    signal to send  the Roomba and reply
    to the sender.
    &amp;quot;&amp;quot;&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;request.values.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Body&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;start&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Starting the Roomba.&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ascii&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;halt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Stopping the Roomba.&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ascii&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dock&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Roomba beginning to dock.&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ascii&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Unknown command. Continuing.&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;None

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cmd:
        rfm9x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(cmd)

    resp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;MessagingResponse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
    resp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(resp)


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that the same board I had used to test sending messages in response to
button clicks can now receive SMS payloads and translate that into a command
that the Feather will use to start, stop or dock the Roomba.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h3&gt;
&lt;p&gt;With all the pieces assembled and working the last thing to do for version 1
was setup some redundancy, restart everything and make sure it all worked as
expected without my intervention.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Connected Roomba Remote - LoRa</title>
            <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/connected-roomba-lora/</link>
            <guid>https://burningdaylight.io/posts/connected-roomba-lora/</guid>
            <description>&lt;p&gt;With a basic setup working the next thing I wanted to do was make communication
wireless. Thinking about my options I ruled out using WiFi pretty quick since I
didn&#x27;t want to worry about discovery and router issues. I thought about
Bluetooth since I could send commands from my phone to the board on the Roomba,
but decided against it due to my lack of mobile programming experience and not
wanting to add yet another new thing to learn. (Side note I&#x27;ve since learned
about the
&lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;bluefruit-le-connect&#x2F;features&quot;&gt;Bluefruit app&lt;&#x2F;a&gt;)
Looking at the other &lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;feather&quot;&gt;Feather&lt;&#x2F;a&gt; options I
decided to make use of
&lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;adafruit-feather&#x2F;lora-radio-feathers&quot;&gt;LoRa&lt;&#x2F;a&gt;
for my communication layer since it would be easy to use, my packets are tiny
and I didn&#x27;t have to worry about software beyond CircuitPython.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-boards&quot;&gt;The boards&lt;&#x2F;h2&gt;
&lt;p&gt;With the protocol determined and sticking with CircuitPython I found a
&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;3179&quot;&gt;Feather&lt;&#x2F;a&gt; with LoRa built in, and a
&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;4074&quot;&gt;Pi Zero Bonnet&lt;&#x2F;a&gt; with some buttons and a
small display that would make testing easier. After reading through the
&lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;adafruit-feather-m0-radio-with-lora-radio-module&quot;&gt;docs&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;lora-and-lorawan-radio-for-raspberry-pi&#x2F;rfm9x-raspberry-pi-setup&quot;&gt;tutorials&lt;&#x2F;a&gt;
for both boards I began work on signalling the Roomba to start with the push of
a button.&lt;&#x2F;p&gt;
&lt;p&gt;One of the first road blocks I ran into was of my own creation. The Roomba
library I wrote for prototyping was too big for the Feather. The good news was
&lt;code&gt;OpenInterface&lt;&#x2F;code&gt; was still useful, and there was plenty of room for the base
class after removing the debug and abstraction code, so I only compiled the
commands I knew I was going to use for version 1 and continued moving forward.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;OpenInterface&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tx_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rx_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;brc_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;baud_rate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;busio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;UART&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(tx_pin, rx_pin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;baud_rate)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._tx_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tx_pin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._rx_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rx_pin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;brc_pin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin.direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;digitalio.Direction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;OUTPUT
        self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._baud_rate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;baud_rate
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._stopped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._stopped:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wake_up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\x80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\x83&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\x87&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._board.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(command)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;stop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\x85&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\xAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._board.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(command)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._stopped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;wake_up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;False
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._brc_pin.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;False
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;._stopped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;False

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After stripping things down and getting the Feather to start and stop the
Roomba from the REPL I turned my attention to the Pi.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;connected-roomba-full.jpg&quot; alt=&quot;Interface Connections&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the Pi Zero providing more resources installing the OS, setting up SSH and
compiling Python 3.7 took more time then getting the Circuit Python libraries
working. &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;Adafruit-Blinka&#x2F;&quot;&gt;Blinka&lt;&#x2F;a&gt; worked like a
charm and following the docs from above I had a quick
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;bot_commander&#x2F;tree&#x2F;main&#x2F;pi&#x2F;button_listener.py&quot;&gt;script&lt;&#x2F;a&gt;
to send &lt;code&gt;start&lt;&#x2F;code&gt; and &lt;code&gt;stop&lt;&#x2F;code&gt; packets via LoRa working in no time.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;start_button.value:
            msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Starting Roomba.&amp;quot;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg)
            rfm9x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ascii&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
            display.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            display.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;stop_button.value:
            msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Stopping Roomba.&amp;quot;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg)
            rfm9x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ascii&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
            display.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
            display.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The display on the bonnet was a nice touch so that I could watch the Feather in
a terminal while the Pi let me know immediately which button was pressed and
which command I should expect the Feather to receive.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;connected-roomba-pi-start.jpg&quot; alt=&quot;Pi Bonnet Display&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h3&gt;
&lt;p&gt;With the boards talking to each other and the ability to start&#x2F;stop the Roomba
with the press of a button the last thing to do was make this work when we are
not at home. While LoRa has a pretty good range I wanted this to work for my
wife and I without having to worry about where we are. In part 3 I look at
making this work with SMS.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Connected Roomba - Possibilities</title>
            <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/connected-roomba-prototype/</link>
            <guid>https://burningdaylight.io/posts/connected-roomba-prototype/</guid>
            <description>&lt;p&gt;A couple years ago at PyCon I received a kit from Adafruit containing the
&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;2769&quot;&gt;Circuit Playground Express&lt;&#x2F;a&gt;. After
going through the Hello World examples I boxed it up I didn&#x27;t have a project
ready to go. Fast forward to the winter of 2018 when I decided I would like
to be able to start our Roomba away from home because of the noise it makes,
and suddenly I had the project I was looking for. Digging around I found out
about the
&lt;a href=&quot;https:&#x2F;&#x2F;www.irobotweb.com&#x2F;%7E&#x2F;media&#x2F;MainSite&#x2F;PDFs&#x2F;About&#x2F;STEM&#x2F;Create&#x2F;iRobot_Roomba_600_Open_Interface_Spec.pdf&quot;&gt;Roomba Open Interface&lt;&#x2F;a&gt;
and set out to start talking to my Roomba with
&lt;a href=&quot;https:&#x2F;&#x2F;circuitpython.org&#x2F;&quot;&gt;CircuitPython&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;will-this-work&quot;&gt;Will this work&lt;&#x2F;h2&gt;
&lt;p&gt;After reading through the Open Interface spec I decided it should be possible
for me to control the Roomba by using the Circuit Playground Express that I had
waiting on the shelf. Getting the kit out and using the clips available I
connected the Playground Express TX to the Roomba RX, opened a REPL and tried
to wake the Roomba, but received no response.&lt;&#x2F;p&gt;
&lt;p&gt;After some more searching I
&lt;a href=&quot;https:&#x2F;&#x2F;robotics.stackexchange.com&#x2F;questions&#x2F;18302&#x2F;irobot-600-series-oi-wake-from-sleep-via-brc&quot;&gt;found out&lt;&#x2F;a&gt;
that certain series firmware will not respond to wake commands after 5 minutes
without a signal. Knowing this, and pressing the power button once to wake the
Roomba, I was able to START, STOP and DOCK the Roomba with controller code
running on the Playground Express.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;connected-roomba-proto.jpg&quot; alt=&quot;Circuit Playground Express connected to Roomba 614&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h3&gt;
&lt;p&gt;After spending some more time confirming command structures, documentation and
behavior between CircuitPython and the Roomba Open Interface I decided to make
things easier by building a &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;circuitroomba&#x2F;&quot;&gt;package&lt;&#x2F;a&gt;
to abstract the interactions. With basic wiring and command functionality
confirmed I decided it was time to start looking at making remote signalling
covered in part 2.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Creating a Con Badge with PyPortal</title>
            <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/gen-con-pyportal/</link>
            <guid>https://burningdaylight.io/posts/gen-con-pyportal/</guid>
            <description>&lt;p&gt;Recently I&#x27;ve heard about multiple people working on con badges and decided to
try my hand at a simple take on the idea. Since I had just recently received my
PyPortal Adabox I thought I would use that as my first platform to get started.&lt;&#x2F;p&gt;
&lt;p&gt;From the product &lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;product&#x2F;4116&quot;&gt;page&lt;&#x2F;a&gt; the PyPortal is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An easy-to-use IoT device that allows you to create all the things for the
“Internet of Things” in minutes. Make custom touch screen interface GUIs,
all open-source, and Python-powered using tinyJSON &#x2F; APIs to get news, stock,
weather, cat photos, and more – all over Wi-Fi with the latest technologies.
Create little pocket universes of joy that connect to something good. Rotate
it 90 degrees, it’s a web-connected conference badge #badgelife.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Like many other CircuitPython powered devices the PyPortal has a great
&lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;adafruit-pyportal&quot;&gt;Explore and Learn&lt;&#x2F;a&gt; page
available that walks you through getting the right firmware installed as well
as providing hardware breakdowns, code demos and FAQ.&lt;&#x2F;p&gt;
&lt;p&gt;Once I had the PyPortal up to date and had gone through a couple demos I landed
on having my first badge being a simple menu systems. While many badges will
contain easter eggs or ways to interact with other badges I decided to keep it
simple for this first run. I wanted my badge to be able to display a couple
pieces of static data and have a couple interactive options.&lt;&#x2F;p&gt;
&lt;p&gt;I landed on a &lt;code&gt;Button&lt;&#x2F;code&gt; menu that would show a couple maps, a photo of my
badge, a countdown to Gen Con, and a simple D20 roller.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;con-portal.jpg&quot; alt=&quot;Gen Con 2019 PyPortal Badge&quot; title=&quot;Gen Con 2019 PyPortal Badge&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Along the way I made extensive use of the
&lt;a href=&quot;https:&#x2F;&#x2F;circuitpython.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;docs&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adafruit&quot;&gt;source code&lt;&#x2F;a&gt; that
&lt;a href=&quot;https:&#x2F;&#x2F;www.adafruit.com&#x2F;&quot;&gt;Adafruit&lt;&#x2F;a&gt; provides.&lt;&#x2F;p&gt;
&lt;p&gt;I also found it easy to find documentation for the module I would pull in from
the library modules by referencing the list of submodules on
&lt;a href=&quot;https:&#x2F;&#x2F;readthedocs.org&#x2F;projects&#x2F;circuitpython&#x2F;&quot;&gt;Read the Docs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;curiosities&quot;&gt;Curiosities&lt;&#x2F;h2&gt;
&lt;p&gt;While building my badge I ran into some interesting edges that I hope to
explore further. I&#x27;m sharing these here just in case somebody else reads this
and can avoid similar pitfalls or suggest a different direction.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Large buttons seem to lead to performance and OOM errors
&lt;ul&gt;
&lt;li&gt;Originally my menu had 8 buttons (one with information about Adafruit,
another with information about the project), but that wasn&#x27;t stable.
After 3 or 4 clicks &lt;code&gt;gc&lt;&#x2F;code&gt; or something else couldn&#x27;t keep up with the
memory allocation and the badge would crash with a &lt;code&gt;MemoryError&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;My schedule was also a menu of buttons originally. This let me setup a
&lt;code&gt;list&lt;&#x2F;code&gt; of &lt;code&gt;tuples&lt;&#x2F;code&gt; I could manipulate in code, but when I had 5 buttons
span the screen render time was visibly slow, and lead to inconsistent
&lt;code&gt;OOM&lt;&#x2F;code&gt; errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Different fonts have different performance characteristics
&lt;ul&gt;
&lt;li&gt;Looking back this makes sense. Different glyphs will have different
structures. Depending on that a glyph can place different loads on the
system. I tried a few of the &amp;quot;performance&amp;quot; font from GoogleFonts, but
ultimately landed on Arial Bold for a font that looked consistent,
rendered quickly and didn&#x27;t have a large file size.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Better ways to sleep?
&lt;ul&gt;
&lt;li&gt;My badge spends a lot of time in the main super loop polling if a
button has been pressed. At this time I don&#x27;t think CircuitPython
supports interrupts. I hope in the future i can figure out a better was to
let the device sleep, but capture an interrupt type event such as the
display being touched.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;PDB for CircuitPython
&lt;ul&gt;
&lt;li&gt;I spent a lot of time running snippets in the REPL. This is a nice
experience to have for an embedded device, but I do miss having PDB or
WebPDB to drop a breakpoint in my code, let it run and then inspect the
stack, heap etc from a given point in my program. I believe MicroPython
contains this functionality so I&#x27;m guessing it&#x27;s possible with
CircuitPython I just haven&#x27;t dug in to make it happen yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;&#x2F;h2&gt;
&lt;p&gt;Similar to the interesting behaviors I found above I learned a bit about
developing with CircuitPython and how it can differ from my day to day Python
development along the way.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Python data structure sizes
&lt;ul&gt;
&lt;li&gt;Many code bases make liberal use of dictionaries. In fact some say that
Python is built on top of the &lt;code&gt;dict&lt;&#x2F;code&gt; data structure. It&#x27;s incredibly useful
to look items up by key, and provides some human readability over indexing
into a collection with no reference beyond position. That said Dictionaries
are one of the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1331471&#x2F;in-memory-size-of-a-python-structure&#x2F;1331541#1331541&quot;&gt;largest&lt;&#x2F;a&gt;
builtin Python objects. One of the reasons for this is something called a
load factor that I won&#x27;t go into now, but suffice to say as you add more
objects to a dictionary and it approaches a given load factor it will
automatically grow in size. Because of this in a memory constrained
environment I found myself removing dictionaries or list of dicts and using
more tuples and list of tuples.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Take out the garbage
&lt;ul&gt;
&lt;li&gt;Python Garbage Collection is handled via reference counting. Because of
this it&#x27;s important to think about when an object (especially large objects
) you are using come in scope, and when they leave scope. In an environment
like CircuitPython you may also want to call &lt;code&gt;gc.collect()&lt;&#x2F;code&gt; when you leave
scopes with large objects to make sure they are garbage collected before
you carry on. This can help avoid some OOM errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Careful wih that indirection.
&lt;ul&gt;
&lt;li&gt;I found myself removing helper functions and other pieces of code that
helped keep things &amp;quot;clean&amp;quot;. Often times I  did this because I was hitting
performance of OOM errors that would go away when I put the functionality
in the parent scope. Because of this I have repeated code, and code that
isn&#x27;t what I would expect to pass code review day to day, but it works,
achieved stability and gave the performance I&#x27;m looking for on my badge.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Testing and profiling for this environment is still a challenge for me.
&lt;ul&gt;
&lt;li&gt;I would love to be able to write a test for my function and then profile
that test to capture things like stack depth, object sizes, timing, etc.
And since I have a test I could do this &lt;code&gt;N&lt;&#x2F;code&gt; times to see what kind of
behaviors emerge. Instead right now I manually make a change and validate.
Because of this I think I&#x27;m building an intuition of what is happening, but
I can&#x27;t verify it which leads me to assume my understanding has gaps, and
potentially wrong assumptions today. Making this better can help me address
the point above.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;So with v1 of the badge prepared and ready for Gen Con 2019 I&#x27;m going to step
back and work on some other items in this  space. While working on the project
I found out that labels don&#x27;t support an orientation flag. After mentioning
this in discord I opened an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adafruit&#x2F;Adafruit_CircuitPython_Display_Button&#x2F;issues&#x2F;9&quot;&gt;issue&lt;&#x2F;a&gt;
on Github with some encouragement from @ladyada. Hopefully I can spend some
cycles working on that.&lt;&#x2F;p&gt;
&lt;p&gt;I also continue to think about how to write tests for CircuitPython. Since the
runtime is tied to the boards it&#x27;s not as simple as running the code in a
CPython &lt;code&gt;unittest&lt;&#x2F;code&gt; environment. While there is a lot of overlap in the API and
behavior it&#x27;s not a one to one match. I think being able to test the code would
lead to faster development cycles and would open the door to better profiling
and understanding of my applications behavior.&lt;&#x2F;p&gt;
&lt;p&gt;Finally I plan to back up and read &lt;code&gt;Making Embdedded Systems&lt;&#x2F;code&gt; by Elicia White
and visit some other embedded getting started materials. While I had a lot of
ideas for this project (and I&#x27;m happy with how it turned out) I realized that
since I&#x27;m not as familiar with this type of hardware environment I struggled at
times to get the functionality I was looking for with the performance I needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;&#x2F;h3&gt;
&lt;p&gt;Thanks to the team at Adafruit. The devices they build and the creation of
CircuitPython has lead me to pick up  a hobby that continues to be fun and
encourages me to think in new ways about hardware and the programs I&#x27;m writing.
Additionally Adafruit has a
&lt;a href=&quot;https:&#x2F;&#x2F;blog.adafruit.com&#x2F;2017&#x2F;07&#x2F;20&#x2F;adafruit-is-on-discord-discordapp-adafruit-discord-adafruit&#x2F;&quot;&gt;discord&lt;&#x2F;a&gt;
where many people have been incredibly patient and helpful as I learn and ask
questions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve really enjoyed working on this project. If you want to reach out feel free
to follow up via &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt; or on.&lt;&#x2F;p&gt;
&lt;p&gt;You can find out more about the badge and source code in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;gencon-portal&quot;&gt;repo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;more-photos&quot;&gt;More Photos&lt;&#x2F;h4&gt;
&lt;p&gt;Some additional photos of the portal. I&#x27;ve ordered a case off
&lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;search?q=pyportal&amp;amp;dwh=345d2cd0845a6f9&quot;&gt;thingiverse&lt;&#x2F;a&gt;
, but using the Adabox case while I wait.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;con-portal-with-case-home.jpg&quot; alt=&quot;Gen Con 2019 PyPortal Home&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;con-portal-with-case-d20.jpg&quot; alt=&quot;Gen Con 2019 PyPortal D20&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;con-portal-with-case-badge.jpg&quot; alt=&quot;Gen Con 2019 PyPortal Con Badge&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;con-portal-with-case-countdown.jpg&quot; alt=&quot;Gen Con 2019 PyPortal Countdown&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using Dataclasses for Configuration</title>
            <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/dataclasses-as-config-objects/</link>
            <guid>https://burningdaylight.io/posts/dataclasses-as-config-objects/</guid>
            <description>&lt;p&gt;Introduced in Python 3.7 &lt;code&gt;dataclasses&lt;&#x2F;code&gt; are normal Python classes with some
extra features for carrying around data and state. If you find yourself writing
a class that is mostly attributes it&#x27;s a dataclass.&lt;&#x2F;p&gt;
&lt;p&gt;Dataclasses have some other nifty features out of the box such as default
double underscore methods, type hinting, and more.&lt;&#x2F;p&gt;
&lt;p&gt;For more information checkout the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;dataclasses.html&quot;&gt;docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dataclasses-as-configuration-objects&quot;&gt;Dataclasses as configuration objects&lt;&#x2F;h2&gt;
&lt;p&gt;Recently I&#x27;ve had the opportunity to work on a couple of Python 3.7 projects.
In each of them I was interacting with many databases and API Endpoints.
Towards the beginning of one of the projects I did something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;elastic_config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;user&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: os.environ[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ES_USER&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;endpoint&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: os.environ[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ES_ENDPOINT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;],
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When I checked in the code I had been working on one of the reviewers commented
that this pattern was normal, but since we were using 3.7 let&#x27;s use a
&lt;code&gt;dataclass&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataclasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataclass

@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;ElasticConfiguration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;user: str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.environ[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ES_USER&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
    endpoint: str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;os.environ[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ES_ENDPOINT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Makes sense, but what&#x27;s the practical benefit? Before I wasn&#x27;t defining a class
and carrying around the class model that I&#x27;m not really using.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Class attribute autocomplete. I can&#x27;t tell you how many times I used to check
if I had the right &lt;code&gt;_&lt;&#x2F;code&gt;, casing, abbreviation etc for the key I was calling. Now
it&#x27;s a class attribute, no more guessing.&lt;&#x2F;li&gt;
&lt;li&gt;Hook up &lt;code&gt;mypy&lt;&#x2F;code&gt; and find some interesting errors.
&lt;ol&gt;
&lt;li&gt;Above you&#x27;ll notice I used &lt;code&gt;os.environ[]&lt;&#x2F;code&gt;. A lot of people like to use an
alternative &lt;code&gt;.get(&amp;lt;key&amp;gt;)&lt;&#x2F;code&gt; pattern with dictionaries. The problem is often
times a default of None gets supplied and you&#x27;re dealing with Optional[T],
but still acting like it&#x27;s str everywhere in your code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;__post_init__&lt;&#x2F;code&gt;
&lt;ol&gt;
&lt;li&gt;Dataclasses have an interesting method called
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;dataclasses.html#post-init-processing&quot;&gt;&lt;code&gt;__post_init__&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
that gets called by &lt;code&gt;__init__&lt;&#x2F;code&gt;. On configuration objects this is a handy
place to put any validation function&#x2F;method calls you might build around
attributes.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Subjectively &lt;code&gt;elastic.user&lt;&#x2F;code&gt; is faster to type, and more appealing to the eyes
than &lt;code&gt;elastic[&amp;quot;user&amp;quot;]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So the next time you find yourself passing around configuration information
remember dataclasses may be a useful and productive alternative to passing
around a dictionary.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;&#x2F;h3&gt;
&lt;p&gt;Beyond the docs here are some links I found useful when learning about
Python dataclasses.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-data-classes&#x2F;&quot;&gt;Real Python: Dataclasses&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;47955263&#x2F;what-are-data-classes-and-how-are-they-different-from-common-classes&quot;&gt;Stack Overflow: What&#x27;s the difference between a class and data class&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackernoon.com&#x2F;a-brief-tour-of-python-3-7-data-classes-22ee5e046517&quot;&gt;Hackernoon: Dataclasses tour&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;If you want to reach out feel free to follow up via
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>What is ODBC Part 3 of 3</title>
            <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/what-is-odbc-pt3/</link>
            <guid>https://burningdaylight.io/posts/what-is-odbc-pt3/</guid>
            <description>&lt;p&gt;For more information see &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;what-is-odbc&#x2F;&quot;&gt;part one&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&#x2F;posts&#x2F;what-is-odbc-pt2&#x2F;&quot;&gt;part two&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;&#x2F;h2&gt;
&lt;p&gt;Just like any other piece of software we can make use of debuggers to step
through our application code and see what is happening with ODBC. To do this
with &lt;code&gt;Python&lt;&#x2F;code&gt; you should be running a version with debug symbols included. You
can do this via:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; clone git@github.com:python&#x2F;cpython.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; debug
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; debug
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;..&#x2F;configure --with-pydebug
make
make&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Additionally you will want to clone &lt;code&gt;pyodbc&lt;&#x2F;code&gt; so that we can make use of symbols.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; clone git@github.com:mkleehammer&#x2F;pyodbc.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CFLAGS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;-Wall -O0 -g&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; setup.py build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally you&#x27;ll need some code and a database to interact with. If you want I
have an example &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;n0mn0m&#x2F;what-is-odbc&quot;&gt;repo&lt;&#x2F;a&gt; which uses
docker to start &lt;code&gt;Postgres&lt;&#x2F;code&gt; and&#x2F;or &lt;code&gt;MSSQL&lt;&#x2F;code&gt;. It also contains some &lt;code&gt;python&lt;&#x2F;code&gt;
example code and &lt;code&gt;pyodbc&lt;&#x2F;code&gt; in the repo for debugging.&lt;&#x2F;p&gt;
&lt;p&gt;One final note, if you wish to explore code all the way into the driver manager
and&#x2F;or driver you will need a debug version of each. For Mac and Linux you can
do this with &lt;code&gt;unixodbc&lt;&#x2F;code&gt; found &lt;a href=&quot;http:&#x2F;&#x2F;www.unixodbc.org&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lurcher&#x2F;unixODBC&quot;&gt;here&lt;&#x2F;a&gt; and specify debug with &lt;code&gt;make&lt;&#x2F;code&gt;
similar to CPython above. For a debug driver build checkout
&lt;a href=&quot;https:&#x2F;&#x2F;odbc.postgresql.org&#x2F;&quot;&gt;Postgres psqlodbc&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stepping-through&quot;&gt;Stepping through&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m writing this on OSX, but the concepts are the same regardless of platform.
On OSX you can use LLDB or GDB (I used LLDB as a learning exercise), on Linux
GDB is probably your go to and on Windows you can use WinGDB or the debugger
built into Visual Studio for C&#x2F;C++.&lt;&#x2F;p&gt;
&lt;p&gt;From the command line start your debugger, or if using GDB&#x2F;LLDB call your tool
with the &lt;code&gt;-f&lt;&#x2F;code&gt; flag specifying you want to load a file and call Python with your
debugger so the Python interpreter will run the file inside your debugger.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lldb -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; -m pdb main.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From here you can execute the application, use normal step, thread and frame
functions to inspect the stack at different steps or get additional dump file
information. Some &lt;code&gt;breakpoints&lt;&#x2F;code&gt; I found interesting can be set with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;breakpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; connection.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 232
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;breakpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; connection.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 52
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;breakpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; cursor.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 1100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;breakpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; getdata.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 776

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case it is helpful you can find an &lt;code&gt;lldb&lt;&#x2F;code&gt; to &lt;code&gt;gdb&lt;&#x2F;code&gt; map
&lt;a href=&quot;https:&#x2F;&#x2F;lldb.llvm.org&#x2F;use&#x2F;map.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;If you have experience with ODBC internals, want to correct something I&#x27;ve
written or just want to reach out feel free to follow up via
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt; or on
.&lt;&#x2F;p&gt;
&lt;p&gt;I also have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;presentations&quot;&gt;repo&lt;&#x2F;a&gt; with the material
I used for a presentation on this at the
&lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;derbypy&#x2F;&quot;&gt;Louisville DerbyPy&lt;&#x2F;a&gt; meetup in March of 2019.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>What is ODBC Part 2 of 3</title>
            <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/what-is-odbc-pt2/</link>
            <guid>https://burningdaylight.io/posts/what-is-odbc-pt2/</guid>
            <description>&lt;p&gt;In the first article I mentioned that ODBC (Open Database Connectivity) is a
specification for a database API creating a standard way for applications to
interact with various databases via a series of translation and application
layers. To create this standard abstraction ODBC has two components, the driver
and the driver manager.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;odbc-driver&quot;&gt;ODBC Driver&lt;&#x2F;h2&gt;
&lt;p&gt;Within ODBC the driver encapsulates the functionality needed to map various
functions to underlying system calls. This functionality spans calls to connect,
query, disconnect and more depending on what the target data source provides.
While almost all drivers provide the prior basic interactivity others many
expose more advanced functionality like concurrent cursors, query translation,
encryption and more. It&#x27;s worth reviewing your ODBC driver docs to see what
features you might use specific to your data source. While ODBC provides a
useful abstraction for connecting to data sources it&#x27;s worth using whatever
additional functionality is available to make your application perform it&#x27;s
best and keep your data secure on the wire.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;odbc-driver-manager&quot;&gt;ODBC Driver Manager&lt;&#x2F;h2&gt;
&lt;p&gt;Ok so the ODBC driver encapsulates the functionality for interacting with our
data source what do we need a driver manager for? First it&#x27;s not uncommon that
you may want your application to interact with various different data sources
of the same type. When this happens the driver manager provides the management
and concept of the DSN. The DSN (data source name) contains the information
required to connect to the data source (host, port, user etc for more
information checkout &lt;a href=&quot;https:&#x2F;&#x2F;www.connectionstrings.com&#x2F;&quot;&gt;connection strings&lt;&#x2F;a&gt;
since the driver manager can save these to a name you specify. This way you can
have one driver (for instance Postgres or Elasticsearch) that can be used to
connect to various different data sources from the same vendor. In addition to
this the driver manager is responsible for keeping up with what drivers are
available on the system and exposing that information to applications. By
knowing what drivers and DSNs are available the driver manager can sit in
between your application and the ODBC driver making sure the connection
information and data passed back and forth is mapped to the right system and
that return calls from the driver get mapped back for use by applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-up&quot;&gt;Next Up&lt;&#x2F;h3&gt;
&lt;p&gt;Last up in post 3 I plan on exploring ODBC from the application layer to the
driver layer with Python and pyodbc looking to trace internals and see exactly
how and where different layers connect.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;If you have experience with ODBC internals, want to correct something I&#x27;ve
written or just want to reach out feel free to follow up via
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt; or on
.&lt;&#x2F;p&gt;
&lt;p&gt;I also have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;presentations&quot;&gt;repo&lt;&#x2F;a&gt; with the material
I used for a presentation on this at the
&lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;derbypy&#x2F;&quot;&gt;Louisville DerbyPy&lt;&#x2F;a&gt; meetup in March of 2019.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>What is ODBC Part 1 of 3</title>
            <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/what-is-odbc/</link>
            <guid>https://burningdaylight.io/posts/what-is-odbc/</guid>
            <description>&lt;p&gt;At my last job we used pyodbc to manage database interactions in a few
different projects. We did this because we interacted with 5 different
relational databases, and not all of them had native driver libraries for
Python. In addition to this our use of pyodbc meant that we had a nice
consistent database API for on-boarding, or when somebody needed to interact
with a database that might be new to them for their project. Recently though
I had somebody ask me what ODBC was, and to be honest I didn&#x27;t have a good
answer. I&#x27;ve used ODBC libraries in multiple languages, but I hadn&#x27;t really
dug into the nuts and bolts of what it was because I hadn&#x27;t needed to. I knew
enough to use it, it worked well and there were bigger problems to solve. It&#x27;s
a good question though. What is ODBC?&lt;&#x2F;p&gt;
&lt;p&gt;At a high level ODBC (Open Database Connectivity) is a specification for a
database API creating a standard way for applications to interact with various
databases via a series of translation and application layers. It is independent
of any specific database, language or operating system. The specification lays
out a series of functions that expose database functionality across systems.
It&#x27;s an interesting, and I would say fairly successful abstraction since many
programmers know how to connect, query and process data (via ODBC) in their
language, but maybe they have never read &lt;code&gt;sql.h&lt;&#x2F;code&gt; or the &lt;code&gt;SQLBrowseConnect&lt;&#x2F;code&gt;
function. For the full API Reference check
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;sql&#x2F;odbc&#x2F;reference&#x2F;syntax&#x2F;odbc-api-reference?view=sql-server-2017&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-vs-protocol&quot;&gt;API vs Protocol&lt;&#x2F;h2&gt;
&lt;p&gt;Quick side note. You may have heard about wire protocols and databases. ODBC is
not a protocol; it is an API. This is important because databases tend to
define their own wire protocols (some share this now with things like the
Postgres wire protocol being OSS) that dictate the sequence in which events or
bytes must happen for communication to work. ODBC as an API doesn&#x27;t dictate
this kind of detail, instead it describes how to expose the database
functionality to the programmer consistently independent of the database.&lt;&#x2F;p&gt;
&lt;p&gt;API: describes all valid functionality and interactions
Protocol: defines the sequence of operations and bytes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-odbc&quot;&gt;Why ODBC&lt;&#x2F;h2&gt;
&lt;p&gt;If databases define their own protocols and have their own way of communicating
why should we worry about ODBC? Turns out there are a
&lt;a href=&quot;https:&#x2F;&#x2F;hpi.de&#x2F;naumann&#x2F;projects&#x2F;rdbms-genealogy.html&quot;&gt;lot&lt;&#x2F;a&gt; of databases you
can use. Factor in an explosion of languages and operating systems and suddenly
you have as many developers writing low level wrappers for database drivers as
you do building your actual product. Instead ODBC provides a standard for
database developers to expose functionality without developers having to
reinvent new bindings for each new language, database, operating system
combination. You can read more
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;sql&#x2F;odbc&#x2F;reference&#x2F;why-was-odbc-created?view=sql-server-2017&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-up&quot;&gt;Next Up&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we know ODBC is an API I want to look at the architecture of ODBC. In
my next post I will cover the driver manager, ODBC drivers and the ODBC API.
After that I plan on exploring ODBC from the application layer through the
driver layer with Python and pyodbc looking to trace internals and see exactly
how and where different layers connect.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;If you have experience with ODBC internals, want to correct something I&#x27;ve
written or just want to reach out feel free to follow up via
&lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt; or on
.&lt;&#x2F;p&gt;
&lt;p&gt;I also have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;presentations&quot;&gt;repo&lt;&#x2F;a&gt; with the material
I used for a presentation on this at the
&lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;derbypy&#x2F;&quot;&gt;Louisville DerbyPy&lt;&#x2F;a&gt; meetup in March of 2019.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Subdomain SSL with Gitlab Pages</title>
            <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/wildcard-letsencrypt/</link>
            <guid>https://burningdaylight.io/posts/wildcard-letsencrypt/</guid>
            <description>&lt;p&gt;&lt;strong&gt;This is out of date, I have since switched to self hosting gitea and AWS.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A few months ago I decided to migrate my Pelican site from Github to Gitlab.
This was motivated largely by that fact that Gitlab has CI&#x2F;CD built in by
default. During this migration I also decided it was time to setup my own
SSL certificate for &lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&quot;&gt;burningdaylight.io&lt;&#x2F;a&gt;. Since this
was new I looked around to see if there was any documentation readily available
, and I found
&lt;a href=&quot;https:&#x2F;&#x2F;fedoramagazine.org&#x2F;gitlab-pelican-lets-encrypt-secure-blog&#x2F;&quot;&gt;this&lt;&#x2F;a&gt;
wonderful tutorial from Fedora Magazine.&lt;&#x2F;p&gt;
&lt;p&gt;Between that and the Gitlab
&lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;pages&#x2F;getting_started_part_three.html&quot;&gt;custom domain and ssl&lt;&#x2F;a&gt;
I was able to get up and running pretty quickly. I had accomplished my goals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;migrate to Gitlab&lt;&#x2F;li&gt;
&lt;li&gt;setup CI&#x2F;CD of the Pelican site project&lt;&#x2F;li&gt;
&lt;li&gt;setup ssl&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Good to go, done in an afternoon with plenty of time to work on a new post.
I thought.&lt;&#x2F;p&gt;
&lt;p&gt;About a week later I was on a different computer and instead of browsing to
&lt;a href=&quot;https:&#x2F;&#x2F;burningdaylight.io&quot;&gt;https:&#x2F;&#x2F;burningdaylight.io&lt;&#x2F;a&gt; I went to &lt;a href=&quot;https:&#x2F;&#x2F;www.burningdaylight.io&quot;&gt;https:&#x2F;&#x2F;www.burningdaylight.io&lt;&#x2F;a&gt; and Firefox
blocked my request citing an SSL certificate error. Wondering what I had done
wrong I started tracing back through what I had done and realized that I had
only setup SSL certificate for my primary domain. Luckily last year lets
encrypt added support for
&lt;a href=&quot;https:&#x2F;&#x2F;community.letsencrypt.org&#x2F;t&#x2F;certbot-0-22-0-release-with-acmev2-and-wildcard-support&#x2F;55061&quot;&gt;wildcard&lt;&#x2F;a&gt;
certificates to certbot. Unfortunately that has not been included in a
&lt;a href=&quot;https:&#x2F;&#x2F;community.letsencrypt.org&#x2F;t&#x2F;certbot-the-currently-selected-acme-ca-endpoint-does-not-support-issuing-wildcard-certificates&#x2F;55667&#x2F;8&quot;&gt;release&lt;&#x2F;a&gt;
so there&#x27;s a couple steps that differ from the original Fedora article above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup-instructions&quot;&gt;Setup Instructions&lt;&#x2F;h2&gt;
&lt;p&gt;Below are the steps to use certbot, gitlab pages and your domain management
console to setup SSL for your subdomains. This assumes you are using a Debian
based OS (I&#x27;m using Ubuntu 18.04) to install Certbot. If not swap out the
certbot install steps for your OS and continue.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If you read the Fedora article linked above you do not need another key in
&lt;code&gt;.well-known&lt;&#x2F;code&gt;. Instead for your subdomain you will validate with certbot by a
DNS record setup via your Domain Management Console.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; aptget install certbot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;certbot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certonly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; manual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;yourdomainhere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;topleveldomainhere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
--config-dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;letsencrypt&#x2F;config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --work-dir ~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;letsencrypt&#x2F;work \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--logs-dir ~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;letsencrypt&#x2F;logs \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; https:&#x2F;&#x2F;acme-v02.api.letsencrypt.org&#x2F;directory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Follow the instructions entering your email, reviewing ToS, etc&lt;&#x2F;p&gt;
&lt;p&gt;You will then see this prompt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Please&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; deploy a DNS TXT record under the name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_acme-challenge.burningdaylight.io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; with the following value:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Login to your domain management console and setup a txt record similar to:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;NAME&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;TYPE&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;TTL&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;VALUE&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;_acme-challenge&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TXT&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;1800&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;your code from the terminal prompt above&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Once you have this setup it&#x27;s a good idea to wait a couple minutes since this
record will populate via DNS and then return to your console and hit enter.&lt;&#x2F;p&gt;
&lt;p&gt;Once certbot validates the &lt;code&gt;TXT&lt;&#x2F;code&gt; record is available as part of your domain it
will provide you the new location of your &lt;code&gt;fullchain.pem&lt;&#x2F;code&gt; and &lt;code&gt;privkey.pem&lt;&#x2F;code&gt;
files for use with Gitlab pages.&lt;&#x2F;p&gt;
&lt;p&gt;With these files ready to go browse to your Gitlab page settings and setup your
subdomains as documented here and
&lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;pages&#x2F;getting_started_part_three.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I highly recommend reading the Gitlab documentation above, but to summarize:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In your Gitlab pages project settings click add a new site&lt;&#x2F;li&gt;
&lt;li&gt;Enter the url&lt;&#x2F;li&gt;
&lt;li&gt;Add the data from your &lt;code&gt;fullchain.pem&lt;&#x2F;code&gt; and &lt;code&gt;privkey.pem&lt;&#x2F;code&gt; files generated via
certbot&lt;&#x2F;li&gt;
&lt;li&gt;Copy the &lt;code&gt;gitlab-pages-verfication-code=&lt;&#x2F;code&gt; section from the Gitlab validation
record box&lt;&#x2F;li&gt;
&lt;li&gt;Login to your domain management console&lt;&#x2F;li&gt;
&lt;li&gt;Setup a new &lt;code&gt;TXT&lt;&#x2F;code&gt; record for your subdomain:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;NAME&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;TYPE&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;TTL&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;VALUE&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;WWW&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TXT&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;1800&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;gitlab-pages-verification-code=&lt;gitlabcode&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;Setup a new &lt;code&gt;A&lt;&#x2F;code&gt; record for&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;pages&#x2F;getting_started_part_three.html&quot;&gt;Gitlab&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;NAME&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;TYPE&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;TTL&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;VALUE&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;WWW&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;A&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;1800&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;35.185.44.232&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;Return to your Gitlab Pages settings console and click the verify button.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;With that you pages should show green and verified. If you browse to the
different subdomains you setup then you should get through without any SSL
problems.&lt;&#x2F;p&gt;
&lt;p&gt;One thing to note is that you will need to renew your certbot certificate
every 90 days. This is done via the &lt;code&gt;certbot renew&lt;&#x2F;code&gt; command. I&#x27;ve setup an
Airflow dag to take care of this since I have Airflow managing various other
things for me. You can see that &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;n0mn0m&#x2F;docker-airflow&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully you find the above helpful. If you run into issues I recommend:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you used the &lt;code&gt;*&lt;&#x2F;code&gt; wildcard in the domain cert setup&lt;&#x2F;li&gt;
&lt;li&gt;Setup your _acme-challenge record correctly in your domain management console
and left it there&lt;&#x2F;li&gt;
&lt;li&gt;Setup the right &lt;code&gt;TXT&lt;&#x2F;code&gt; and &lt;code&gt;A&lt;&#x2F;code&gt; records for Gitlab&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Vim and Rust in 2019</title>
            <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/vim-rust-2019/</link>
            <guid>https://burningdaylight.io/posts/vim-rust-2019/</guid>
            <description>&lt;p&gt;I&#x27;ve been using Vim as my primary editor for a few months now. Recently I
wanted to revisit some project work in Rust, but I hadn&#x27;t setup any tooling in
Vim for rust yet. The first couple of hits I got on Google were great resources
that I&#x27;ll provide links to, but they were also over a year old, so while using
them as a starting point I&#x27;m documenting my setup since some things have
changed from 2017.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tooling&quot;&gt;Tooling&lt;&#x2F;h1&gt;
&lt;p&gt;Core Installs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot;&gt;Rust with rustup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;racer-rust&#x2F;racer&quot;&gt;Racer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Autocomplete:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Valloric&#x2F;YouCompleteMe&quot;&gt;YouCompleteMe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Language Server Protocol&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prabirshrestha&#x2F;vim-lsp&quot;&gt;vim-lsp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rls&quot;&gt;RLS - Rust Language Server&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So far this has been a fairly pain free experience. As I use this (and vim)
more I will likely add some updates related to packaging, compiling and
debugging in Vim, but for now these are the tools that got me started. One
thing to note is that I recommend installing in the order above and following
the install directions (especially for the lsp) since those appear to have
made some QoL changes in the last year.&lt;&#x2F;p&gt;
&lt;p&gt;Source Articles:
&lt;a href=&quot;https:&#x2F;&#x2F;kadekillary.work&#x2F;post&#x2F;rust-ide&#x2F;&quot;&gt;https:&#x2F;&#x2F;kadekillary.work&#x2F;post&#x2F;rust-ide&#x2F;&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;ddrscott.github.io&#x2F;blog&#x2F;2018&#x2F;getting-rusty-with-vim&#x2F;&quot;&gt;https:&#x2F;&#x2F;ddrscott.github.io&#x2F;blog&#x2F;2018&#x2F;getting-rusty-with-vim&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Building Vim with Anaconda Python Support</title>
            <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/vim-anaconda-build/</link>
            <guid>https://burningdaylight.io/posts/vim-anaconda-build/</guid>
            <description>&lt;p&gt;This morning I was setting up a RHEL 7 box for development using my normal dot
files, but when I was ready to sit down and start working on my project I
noticed I got an error from &lt;code&gt;You Complete Me&lt;&#x2F;code&gt; letting me know that the version
of vim that was installed wasn&#x27;t compatible. After checking EPEL for a more up
to date install I decided to try pulling vim from source and building it
myself.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily this wasn&#x27;t too hard, but I did run into a small issue related to the
vim &lt;code&gt;.config --with-python*&lt;&#x2F;code&gt; flags since I&#x27;m using &lt;code&gt;conda&lt;&#x2F;code&gt; as my Python
environment manager. The short story is the vim needs some information from the
Python config directory to enable &lt;code&gt;python&lt;&#x2F;code&gt; and &lt;code&gt;python3&lt;&#x2F;code&gt; support. When you use
Anaconda or Minionda to manage your environments these are in slightly
different locations than the normal &lt;code&gt;&#x2F;usr&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;lib64&lt;&#x2F;code&gt; paths you may find in
vim build documentation. Instead they will be in your conda environment lib as
seen below.&lt;&#x2F;p&gt;
&lt;p&gt;Install additional build dependencies.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; yum install cmake gcc-c++ make ncurses-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Clone vim source, configure and build. Specifically pay attention to the
--with-python* flags and the config directory they use in your &lt;code&gt;conda&lt;&#x2F;code&gt;
environment.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; clone https:&#x2F;&#x2F;github.com&#x2F;vim&#x2F;vim.git

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;pushd ~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;vim&#x2F;src

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;.&#x2F;configure --with-features&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;huge \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-multibyte &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-rubyinterp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;yes \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-pythoninterp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;yes \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--with-python-config-dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;work&#x2F;alex&#x2F;miniconda3&#x2F;envs&#x2F;py27&#x2F;lib&#x2F;python2.7&#x2F;config \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-python3interp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;yes \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--with-python3-config-dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;work&#x2F;alex&#x2F;miniconda3&#x2F;lib&#x2F;python3.6&#x2F;config-3.6m-x86_64-linux-gnu \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-perlinterp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;yes \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-luainterp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;yes \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--enable-cscope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;--prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;home&#x2F;alex&#x2F;.local&#x2F;vim &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grep -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; python

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;make &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; install

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;popd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally if you use a custom prefix as seen above (prevents system level changes
and conflicts impacting others) you probably want to add the below to you
&lt;code&gt;.bashrc&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;.local&#x2F;vim&#x2F;bin&#x2F;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;.local&#x2F;vim&#x2F;bin&#x2F;:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that&#x27;s it. You should now have an up to date vim install with Python.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>docker-airflow</title>
            <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/docker-airflow/</link>
            <guid>https://burningdaylight.io/posts/docker-airflow/</guid>
            <description>&lt;p&gt;If you&#x27;ve spent time using Python for ETL processes or working with data
pipelines using tools from the Apache ecosystem then you&#x27;ve probably heard
about &lt;a href=&quot;https:&#x2F;&#x2F;airflow.apache.org&#x2F;&quot;&gt;Apache Airflow&lt;&#x2F;a&gt;. In this post I&#x27;m going
to briefly write about why I&#x27;m using Airflow, show how you can get started with
Airflow using docker and I will show how I customized this setup so that you
can do the same. Finally at the end I&#x27;ll talk about a couple of issues I ran
into getting started with Airflow and docker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-apache-airflow&quot;&gt;What is  &lt;a href=&quot;https:&#x2F;&#x2F;airflow.apache.org&#x2F;&quot;&gt;Apache Airflow&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;From the home page:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Airflow is a platform to programmatically author, schedule and monitor
workflows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Programatically&lt;&#x2F;strong&gt; being a key part so that you can create and orchestrate
worflows&#x2F;data pipelines using the same processes and tools that let you create
reliable, scaling software.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-airflow&quot;&gt;Why  &lt;a href=&quot;https:&#x2F;&#x2F;airflow.apache.org&#x2F;&quot;&gt;Airflow&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t plan to write much on this subject since it&#x27;s been covered in depth
else where, but at work and often times when talking about Airflow the question
of why Airflow versus X traditional solution where X is something like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SSIS&lt;&#x2F;li&gt;
&lt;li&gt;Informatica&lt;&#x2F;li&gt;
&lt;li&gt;Streamsets&lt;&#x2F;li&gt;
&lt;li&gt;Snaplogic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;inevitably comes up. The primary reason I prefer a solution like Airflow to
more traditional solutions is because my ETL is code. While there are numerous
benefits to ETL as code my talking points are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your data pipes&#x2F;workflows go through the same processes that helps you create
better products like TDD&lt;&#x2F;li&gt;
&lt;li&gt;Your ETL development and production can be integrated with your CI&#x2F;CD process&lt;&#x2F;li&gt;
&lt;li&gt;Better debugging tools&lt;&#x2F;li&gt;
&lt;li&gt;Flexibility&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s not to say the traditional tools don&#x27;t have their place, but my
experience is that any significantly complex data pipeline ends up making use
of that tools script task (C# for SSIS, Java for Informatica) and now you have
an amalgamation of GUI product and untested, undocumented and non versioned
code in production data pipelines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-conda&quot;&gt;Why &lt;a href=&quot;https:&#x2F;&#x2F;docs.conda.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;conda&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Conda is a cross-platform, Python-agnostic binary package manager. It is the
package manager used by Anaconda installations, but it may be used for other
systems as well. Conda makes environments first-class citizens, making it easy
to create independent environments even for C libraries.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By day I&#x27;m a data engineer helping to build platforms, applications and
pipelines to enable data scientist. Because of this conda is a tool I&#x27;ve become
familiar with and it let&#x27;s me work across languages, but easily integrate those
various languages into my Airflow dags.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker-airflow&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;puckel&#x2F;docker-airflow&quot;&gt;docker-airflow&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To get started with Airflow I highly recommend reading
&lt;a href=&quot;https:&#x2F;&#x2F;airflow.apache.org&#x2F;index.html&quot;&gt;the homepage&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;airflow.apache.org&#x2F;tutorial.html&quot;&gt;tutorial&lt;&#x2F;a&gt; to get an idea of the core
concepts and pick up on the vocabulary used within the framework.&lt;&#x2F;p&gt;
&lt;p&gt;After that there is a great project called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;puckel&#x2F;docker-airflow&quot;&gt;docker-airflow&lt;&#x2F;a&gt; that you can get
started with. This provides a quick way to get started with Airflow in an
environment with sane defaults making use of Postgres and Redis.&lt;&#x2F;p&gt;
&lt;p&gt;This project provides an example dag and also allows you to load the Airflow
example dags via the &lt;code&gt;LOAD_EX&lt;&#x2F;code&gt; environment variable. Additionally you might
want to open up the Airflow dashboard and checkout the Connections tab where
you can setup things such as SSH an SSH connection to reference in your dags.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;customizing-the-setup&quot;&gt;Customizing the setup&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;puckel&#x2F;docker-airflow&quot;&gt;docker-airflow&lt;&#x2F;a&gt; project is a
great start, but it makes assumptions that may not be true of your environment
such as which database you plan to use, use of environment variables, etc.&lt;&#x2F;p&gt;
&lt;p&gt;If all you&#x27;re needing to tweak is the behavior of the environment or Airflow
your first stop should be &lt;code&gt;airflow.cfg&lt;&#x2F;code&gt; in the &lt;code&gt;&#x2F;config&lt;&#x2F;code&gt; directory. This is a
centralized location for Airflow settings and is checked after any settings
from the environment are loaded. If you&#x27;re trying to change settings related to
work pools, ssl, kerberos, etc this is probably the best place to get started.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re looking to change things related to your containers such as when to
restart, dependencies, etc then your going to want to checkout either the
&lt;code&gt;LocalExecutor&lt;&#x2F;code&gt; or &lt;code&gt;CeleryExecutor&lt;&#x2F;code&gt; docker-compose files.&lt;&#x2F;p&gt;
&lt;p&gt;Finally you might want to make bigger changes like I did such as using a
different database, base docker image etc. Doing this requires changing quite a
few items. The changes I made were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;switch to miniconda for my base image to use Intel Dist Python&lt;&#x2F;li&gt;
&lt;li&gt;switch to Microsoft SQL Server for the database&lt;&#x2F;li&gt;
&lt;li&gt;switch the task queue to RabbitMQ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most of this was driven by a desire to experiment and to learn more about tools
that I use day to day. Since I work in a data engineering shop there are
packages from &lt;code&gt;conda-forge&lt;&#x2F;code&gt; that I like to use driving the miniconda switch,
I&#x27;ve used MS SQL for the last 8 years professionally and I&#x27;ve been working on
scaling with RabbitMQ over the last year.&lt;&#x2F;p&gt;
&lt;p&gt;The switch to miniconda was a one liner in the Dockfile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; continuumio&#x2F;miniconda3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then to use IDP (Intel Distribution of Python) within the container I added
this towards the bottom:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; conda config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; channels intel\
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; channels conda-forge \
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;  -y -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; intelpython3_core=2019.1 python=3 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; clean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that I can make use of conda packages alongside traditional Python
packages within my Airflow environment.&lt;&#x2F;p&gt;
&lt;p&gt;Next up I wanted to switch to MSSQL. Doing this was a matter of switching
from Postgres in docker-compose and adding the MSSQL Linux drivers to the base
docker-airflow Dockerfile.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#docker-compose

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;mssql:
        image:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; microsoft&#x2F;mssql-server-linux:latest
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;environment:
            -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ACCEPT_EULA=Y
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; SA_PASSWORD=YourStrong!Passw0rd
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ports:
            -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 1433:1433
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;volumes:
            -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;var&#x2F;opt&#x2F;mssql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may or may not want to preserver your database volume so keep that in mind.&lt;&#x2F;p&gt;
&lt;p&gt;Setting up the MSSQL Linux drivers is fairly straight forward following the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;sql&#x2F;connect&#x2F;odbc&#x2F;linux-mac&#x2F;installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017&quot;&gt;documentation&lt;&#x2F;a&gt;
from Microsoft.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#Dockerfile

# MS SQL EULA
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ACCEPT_EULA=Y

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; curl https:&#x2F;&#x2F;packages.microsoft.com&#x2F;keys&#x2F;microsoft.asc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;apt-key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; add - \
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; https:&#x2F;&#x2F;packages.microsoft.com&#x2F;config&#x2F;ubuntu&#x2F;16.04&#x2F;prod.list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;msprod.list

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -yqq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;apt-get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -yqq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; mssql-tools unixodbc-dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing to note if you&#x27;re using a Debian based image is that Microsoft has a
somewhat obscure dependency on &lt;code&gt;libssl1.0.0&lt;&#x2F;code&gt;. Without that installed you will
get some obscure &lt;code&gt;unixodbc&lt;&#x2F;code&gt; error connecting to MSSQL with sql-alchemy. To
remedy this add the below to your Dockerfile.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#Dockerfile

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;export PATH=&amp;quot;$PATH:&#x2F;opt&#x2F;mssql-tools&#x2F;bin&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.bash_profile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;deb http:&#x2F;&#x2F;httpredir.debian.org&#x2F;debian jessie main contrib non-free\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;deb-src http:&#x2F;&#x2F;httpredir.debian.org&#x2F;debian jessie main contrib non-free\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;deb http:&#x2F;&#x2F;security.debian.org&#x2F; jessie&#x2F;updates main contrib non-free\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;deb-src http:&#x2F;&#x2F;security.debian.org&#x2F; jessie&#x2F;updates main contrib non-free&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;jessie.list

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt update \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; install libssl1.0.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally setup your connection string either in &lt;code&gt;airflow.cfg&lt;&#x2F;code&gt; or an Airflow
&lt;a href=&quot;https:&#x2F;&#x2F;airflow.readthedocs.io&#x2F;en&#x2F;stable&#x2F;howto&#x2F;set-config.html&quot;&gt;environment variable&lt;&#x2F;a&gt;
. I like to use the Airflow environment variables and pass them in from a &lt;code&gt;.env&lt;&#x2F;code&gt;
file with docker-compose.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#docker-compose

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;environment:
            -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; LOAD_EX=n
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; EXECUTOR=Celery
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; AIRFLOW__CELERY__BROKER_URL=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CELERY_RABBIT_BROKER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; AIRFLOW__CORE__SQL_ALCHEMY_CONN=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SQL_ALCHEMY_CONN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; AIRFLOW__CELERY__RESULT_BACKEND=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CELERY_RESULTS_BACKEND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally the last big change I implemented was the switch to RabbitMQ
instead of Redis. Similar to the MSSQL switch this was just an update to the
docker-compose file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rabbitmq:
        image:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rabbitmq:3-management
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;hostname:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rabbitmq
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;environment:
        -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; RABBITMQ_ERLANG_COOKIE=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RABBITMQ_ERLANG_COOKIE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; RABBITMQ_DEFAULT_USER=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RABBITMQ_DEFAULT_USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; RABBITMQ_DEFAULT_PASS=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RABBITMQ_DEFAULT_PASS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; RABBITMQ_DEFAULT_VHOST=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RABBITMQ_DEFAULT_VHOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And setting up the right connection string for Celery to talk with rabbitmq.
Similar to the MSSQL connection string I put this in my &lt;code&gt;.env&lt;&#x2F;code&gt; file and
reference it in my docker-compose file as seen above.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# .env

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CELERY_RABBIT_BROKER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;amqp:&#x2F;&#x2F;user:pass@host:port&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing to note is anytime you are referencing the host and running with
docker-compose you can reference the service id in this case rabbitmq as the
host name.&lt;&#x2F;p&gt;
&lt;p&gt;And with that I have a nice Airflow environment that lets me make use of the
database I&#x27;m familiar with, a durable queue and packages across the Python and
Data Science ecosystems via &lt;code&gt;conda&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can find these changes in my fork of the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;airflow-docker&quot;&gt;docker-airflow&lt;&#x2F;a&gt; project. I&#x27;ve also
opened a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;puckel&#x2F;docker-airflow&#x2F;issues&#x2F;289&quot;&gt;GitHub issue&lt;&#x2F;a&gt;
with the goal of creating some way to track other community variations of
docker-airflow with the hope of helping others discover setups specific to
their need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;issues-so-far&quot;&gt;Issues so far&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been using the setup above for a couple weeks now with pretty good results.
I&#x27;ve made use of some libraries like hdfs3 that have their latest releases in
conda-forge and my familiarity with MSSQL has saved me some maintenance time.
The experience hasn&#x27;t been without it&#x27;s issues. The highlights are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;airflow.apache.org&#x2F;installation.html#extra-packages&quot;&gt;Airflow packages&lt;&#x2F;a&gt;
may not be what you want. See &lt;code&gt;librabbitmq&lt;&#x2F;code&gt; and celery. It&#x27;s best to manage a
requirements.txt or conda.txt with your dependencies still.&lt;&#x2F;li&gt;
&lt;li&gt;Dependency management across multiple dags. In short with a standard setup
you need one package version and it needs to be installed everywhere. For an
interesting approach to this read
&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;bluecore-engineering&#x2F;were-all-using-airflow-wrong-and-how-to-fix-it-a56f14cb0753&quot;&gt;We’re All Using Airflow Wrong and How to Fix It&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Silent failures. Be aware of all the reasons why a worker may provide exit
code 0 especially with docker. This took a minute to catch when an NFS mount
stopped showing new files being available, but the exit code 0 made things
seem ok. This isn&#x27;t Airflows fault, but just something to keep in mind when
using Airflow in an environment with docker and remote resources.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reaching-out&quot;&gt;Reaching out&lt;&#x2F;h3&gt;
&lt;p&gt;Hopefully this post helps you get started with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;puckel&#x2F;docker-airflow&quot;&gt;docker-airflow&lt;&#x2F;a&gt;. If you have
questions or want to share something cool that you end up doing feel free to
open up an &lt;a href=&quot;https:&#x2F;&#x2F;todo.sr.ht&#x2F;%7En0mn0m&#x2F;Airflow-Bugs&quot;&gt;issue&lt;&#x2F;a&gt; on Sourcehut or
reach out to me &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;n0mn0m@burningdaylight.io&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Dealing with NULL in PySpark transformations</title>
            <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/dealing-with-null-transformations-in-pyspark/</link>
            <guid>https://burningdaylight.io/posts/dealing-with-null-transformations-in-pyspark/</guid>
            <description>&lt;p&gt;Lately I&#x27;ve been dealing with nested data on a semi regular basis with PySpark.
One of the scenarios that tends to come up a lot is to apply transformations to
semi&#x2F;unstructured data to generate a tabular dataset for consumption by data
scientist. When processing and transforming data I&#x27;ve previously found it
beneficial to make use of the RDD data structure so that I have the ability to
easily apply custom transformations the same way I would if I was interacting
with normal Python data structures, but with the benefit of Spark and the
functionality provided by the RDD API.&lt;&#x2F;p&gt;
&lt;p&gt;With my most recent project though I decided to spend more time working with
the Spark Dataframe data structure specifically for the potential performance
gains from Catalyst and Tungeston. Along with this Spark offers a set of
complex types for Spark Dataframe columns to make interaction with collection
types a little bit easier.&lt;&#x2F;p&gt;
&lt;p&gt;Diving in I immediately used the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;databricks&#x2F;spark-xml&quot;&gt;Databricks XML&lt;&#x2F;a&gt; library to load some
data into my dataframe which had a similar shape (although different contents)
to this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyspark.sql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Row
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyspark.sql.functions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;explode, first, col, monotonically_increasing_id, when, array, lit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyspark.sql.column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Column, _to_java_column

df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;spark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;createDataFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dataCells&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;square&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)]),
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]),
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;circle&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)])
    ])
])

df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;printSchema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    root
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;containsNull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;posx: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;posy: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;posz: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;shape: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;containsNull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;_len: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;_type: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+--------------------+
    |           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------------+
    |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, [[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perfect. Nothing too crazy, but I wanted to transform the nested array of
structs into column representing the members of each struct type. So I started
by looking at the options available to flatten my array column and I came
across &lt;a href=&quot;https:&#x2F;&#x2F;spark.apache.org&#x2F;docs&#x2F;latest&#x2F;api&#x2F;python&#x2F;pyspark.sql.html?highlight=date#pyspark.sql.functions.explode&quot;&gt;&lt;code&gt;explode&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
which appeared to do exactly what I needed. Next I needed to take the member
attributes of the structs and turn those into columns. I wasn&#x27;t able to find a
built in function for this, but using the &lt;code&gt;select&lt;&#x2F;code&gt; syntax available on
dataframes along with the &lt;code&gt;*&lt;&#x2F;code&gt; wildcard available on structs I was able to write
my own function to do this.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;flatten_struct_cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
    flat_cols &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[column[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.dtypes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;struct&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;column[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;][:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]]
    struct_columns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[column[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.dtypes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;struct&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;column[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;][:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]]

    df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_cols &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(sc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;.&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;c).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(sc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;_&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;c)
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;struct_columns
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(sc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;.*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).columns])

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that out of the way I&#x27;m ready to go.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;explode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))
flat_df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;flatten_struct_cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_df)
flat_df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+--------------|--------------|--------------|---------------|---------------+
    |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|---------------+
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, square]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[[, circle]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|---------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;printSchema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    root
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posx: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posy: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posz: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;containsNull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;_len: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    |    |-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;_type: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;nullable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;true)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far so good. Let&#x27;s try it again, and if all goes well we can throw this in a
loop, flatten nested columns and be on our way.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells_shape&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;explode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells_shape&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))
flat_df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;flatten_struct_cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_df)
flat_df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+--------------|--------------|--------------|---------------|--------------------|---------------------+
    |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape__len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape__type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|--------------------|---------------------+
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;square&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|--------------------|---------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we have a problem. After back tracking I found that &lt;code&gt;explode&lt;&#x2F;code&gt; is
silently dropping out my row with null in it. Let&#x27;s check the
&lt;a href=&quot;https:&#x2F;&#x2F;spark.apache.org&#x2F;docs&#x2F;2.2.0&#x2F;api&#x2F;python&#x2F;pyspark.sql.html?highlight=date#pyspark.sql.functions.explode&quot;&gt;docs&lt;&#x2F;a&gt;.
Interestingly I didn&#x27;t see anything about this. So I checked the latest docs
and just so happened to notice
&lt;a href=&quot;https:&#x2F;&#x2F;spark.apache.org&#x2F;docs&#x2F;latest&#x2F;api&#x2F;python&#x2F;pyspark.sql.html?highlight=date#pyspark.sql.functions.explode_outer&quot;&gt;&lt;code&gt;explode_outer&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
listed right below this. It turns out in 2.2.0 a set of &lt;code&gt;_outer&lt;&#x2F;code&gt; functions
where added that retain &lt;code&gt;null&lt;&#x2F;code&gt; for certain operations such as explode.
Unfortunately some of these are not available in PySpark until 2.3 and I didn&#x27;t
have the option to migrate from 2.2.x to 2.3.x.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;52747258&#x2F;pyspark-2-2-explode-dropping-null-rows-how-to-implement-explode-outer&quot;&gt;&lt;code&gt;StackOverflow&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
to the rescue. After reviewing the PySpark tag I didn&#x27;t find any solutions with
accepted answers so I went ahead and wrote my own question. Thanks to that I
learned a lot about PySpark&#x2F;JVM interop and about some of the disparities
between the JVM API and other language APIs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;otherwise&quot;&gt;Otherwise()&lt;&#x2F;h2&gt;
&lt;p&gt;Based on some responses to my question I found another question that provided a
scala solution involving &lt;code&gt;.otherwise&lt;&#x2F;code&gt; and casting the nested structure with a
&lt;code&gt;null&lt;&#x2F;code&gt; literal. &lt;code&gt;None&lt;&#x2F;code&gt; in Python. This seemed like the more direct solution
without making use of private functionality in the library, so I opted to try
implementing the scala solution in PySpark first.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;explode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))
flat_df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;flatten_struct_cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_df)
flat_df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells_shape_test&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;explode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells_shape&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isNotNull&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells_shape&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
                                          .otherwise(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells_shape&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
                                          .getItem(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
                                          .dtypes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]))))).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+--------------|--------------|--------------|---------------|---------------|--------------------+
|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape_test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
+--------------|--------------|--------------|---------------|---------------|--------------------+
|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, square]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, square]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[[, circle]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[, circle]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
+--------------|--------------|--------------|---------------|---------------|--------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But unfortunately it appears that the &lt;code&gt;explode&lt;&#x2F;code&gt; may have a precedence behind
the scenes that drops the row before &lt;code&gt;otherwise&lt;&#x2F;code&gt; is evaluated. With a quickly
approaching deadline I unfortunately did not have time to dig deep into why
this was with other options on the table.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;into-the-jvm&quot;&gt;Into the JVM&lt;&#x2F;h2&gt;
&lt;p&gt;While reviewing suggested solutions I found out that &lt;code&gt;SparkContext&lt;&#x2F;code&gt; has a
&lt;code&gt;_jvm&lt;&#x2F;code&gt; object that provides access to &lt;code&gt;org.apache.*&lt;&#x2F;code&gt; functionality. Along with
this I also noticed that Databricks has an entire &amp;quot;private&amp;quot; api used with
Python and Java. Part of this API is &lt;code&gt;_to_java_column&lt;&#x2F;code&gt; which makes it possible
to transform a PySpark column to a Java column to match Java method signatures.&lt;&#x2F;p&gt;
&lt;p&gt;Learning all of this, and knowing that the Java API already had &lt;code&gt;explode_outer&lt;&#x2F;code&gt;
implemented I reviewed the Java &lt;a href=&quot;https:&#x2F;&#x2F;spark.apache.org&#x2F;docs&#x2F;2.3.0&#x2F;api&#x2F;java&#x2F;index.html&quot;&gt;&lt;code&gt;explode_outer&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
method to verify the type signature and built my own function in Python to call
the Java function and return the column with &lt;code&gt;null&lt;&#x2F;code&gt; in place.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;explode_outer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Calling the explode_outer Java function from PySpark
    &amp;quot;&amp;quot;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;_explode_outer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sc._jvm.org.apache.spark.sql.functions.explode_outer
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_explode_outer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_to_java_column&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(col)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df_with_null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;explode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;dataCells&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))
flat_df_with_null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;flatten_struct_cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_df_with_null)
flat_df_with_null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df_with_null.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;withColumn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dataCells_shape&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;explode_outer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dataCells_shape&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)))
flat_df_with_null.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+--------------|--------------|--------------|---------------|---------------+
    |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|---------------+
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, square]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[, circle]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|---------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;flat_df_with_null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;flatten_struct_cols&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(flat_df_with_null)
flat_df_with_null.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+--------------|--------------|--------------|---------------|--------------------|---------------------+
    |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_posz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape__len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;dataCells_shape__type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|--------------------|---------------------+
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;square&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;7.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|
    +--------------|--------------|--------------|---------------|--------------------|---------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And it works! With that I am able to flatten out arbitrarily nested collections
in PySpark dataframes while retaining nulls when using Spark 2.2.x.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h3&gt;
&lt;p&gt;A couple things to note; if you have an array with more than one struct as a
member this will fail, and if you have a deeply nested structure the growth of
this transformation is typically not sustainable on a large dataset.&lt;&#x2F;p&gt;
&lt;p&gt;Finally I have questions that I hope to continue spending time on. For instance
why are rows with &lt;code&gt;null&lt;&#x2F;code&gt; dropped at all? I wonder if the operation makes a new
dataframe from the column to apply the operation to and then joins it back on
an index and along the way that join loses &lt;code&gt;nulls&lt;&#x2F;code&gt;. Why are functions that are
lossy not identified as such? Is there always a version lag between the JVM api
and the PySpark api? I&#x27;m also curious how Catalyst handles denesting operations
and adding new columns from the result of exploding arrays or flattening
structs.&lt;&#x2F;p&gt;
&lt;p&gt;Finally instead of adding new columns I want to try using the &lt;code&gt;MapType&lt;&#x2F;code&gt; to
instead create a new column of key, value pairs that allows me to flatten out
arbitrarily deep collections into a MapType so that I can use the same
methodology on much deeper structures without adding a lot of columns that are
mostly null.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;additional-links&quot;&gt;Additional Links&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;52747258&#x2F;pyspark-2-2-explode-dropping-null-rows-how-to-implement-explode-outer&quot;&gt;Original Question&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;31684842&#x2F;calling-java-scala-function-from-a-task&quot;&gt;PySpark Data Flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;39739072&#x2F;spark-sql-how-to-explode-without-losing-null-values&quot;&gt;Calling Java&#x2F;Scala from PySpark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;0x0fff.com&#x2F;spark-architecture&#x2F;&quot;&gt;Spark Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cwiki.apache.org&#x2F;confluence&#x2F;display&#x2F;SPARK&#x2F;PySpark+Internals&quot;&gt;PySpark Internals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>DerbyPy Intro to PySpark</title>
            <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/pyspark-intro/</link>
            <guid>https://burningdaylight.io/posts/pyspark-intro/</guid>
            <description>&lt;p&gt;This month at &lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;derbypy&#x2F;&quot;&gt;DerbyPy&lt;&#x2F;a&gt; I provided a high
level introduction to PySpark. For this talk I went over the Spark execution
model at a high level, talked about the difference between the PySpark
Dataframe and RDD api, and provided some examples of how to use both. As part
of this I put together a jupyter notebook and some scripts that can be used via
&lt;code&gt;spark-submit&lt;&#x2F;code&gt; along with instructions on how to run &lt;code&gt;PySpark&lt;&#x2F;code&gt; locally.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re interested in the material and presentation they can be found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0mn0m&#x2F;presentations&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>DerbyPy Introduction to Python Modules and Packages</title>
            <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/modules-and-packages/</link>
            <guid>https://burningdaylight.io/posts/modules-and-packages/</guid>
            <description>&lt;p&gt;Most programming languages offer ways to organize your code into namespaces.
These namespaces are logical containers that group different names and
behaviors together and isolate them to that namespace. By organizing your code
with namespaces it makes it easier to structure your application without naming
collisions and it can make it easier for you and others to maintain your code
by adding some additional organization to your project.&lt;&#x2F;p&gt;
&lt;p&gt;In Python we can use modules and packages to create namespaces that we can then
reference in other modules as we build our application.&lt;&#x2F;p&gt;
&lt;p&gt;A Python module is a &lt;code&gt;.py&lt;&#x2F;code&gt; file containing Python definitions and statements.
The file name is the module name with the suffix &lt;code&gt;.py&lt;&#x2F;code&gt; appended.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;modules.html#modules&quot;&gt;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;modules.html#modules&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As with all things in Python when we import a module it is an object, and just
like other objects it has dunder (double underscore) attributes that define
additional data about that module. We can use that to learn more about the
module before we ever start to use it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_ext

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(pprint_ext.__doc__)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(pprint_ext))

    A module providing extensions to pretty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;structures that pprint may &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;handle well.

    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__builtins__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__cached__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__doc__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__file__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__loader__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__name__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__package__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__spec__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;list_directory&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;os&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From the output of &lt;code&gt;dir()&lt;&#x2F;code&gt; we can see there is a function called
&lt;code&gt;list_directory&lt;&#x2F;code&gt; that is part of this module.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_ext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;list_directory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;plugins&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)

    plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ipynb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.py
            liquid.py
            markup.py
            requirements.txt
            .git
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;README&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.md
            ipynb.py
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LICENSE
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.gitignore
            core.py
            __pycache__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;core.cpython&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;36.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyc
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.cpython&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;36.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyc
                markup.cpython&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;36.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyc
                ipynb.cpython&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;36.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pyc
            tests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pelican&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pelicanconf_markup.py
                    pelicanconf_liquid.py
                    theme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;base.html
                    content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;file.ipynb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;meta
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;liquid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tag.ipynb
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;metacell.ipynb
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;file.ipynb
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;liquid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;tag.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we can see where we are importing this module from with &lt;code&gt;.__file__&lt;&#x2F;code&gt; and
we see that this is a module local to our application.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_ext.__file__

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;projects&#x2F;alexhagerman.github.io&#x2F;pprint_ext.py&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;&#x2F;h2&gt;
&lt;p&gt;For the sake of brevity and simplicity tonight we can say that a Python package
is a collection of Python modules. It is a folder that contains .py file and
provides a parent namespace for the modules in the folder.&lt;&#x2F;p&gt;
&lt;p&gt;Another way of saying this is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Python packages are a way of structuring Python’s module namespace by using
“dotted module names” &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;modules.html#packages&quot;&gt;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;modules.html#packages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Just like we did with our module we can call &lt;code&gt;dir()&lt;&#x2F;code&gt; on our package to see
associated attributes and objects.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_extension
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(pprint_extension)

    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__all__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__builtins__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__cached__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__doc__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__file__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__loader__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__name__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__package__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__path__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__spec__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;network&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;pprint_extension&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Additionally we can call help which may provide more information about the
package defined in &lt;code&gt;__init__.py&lt;&#x2F;code&gt;. You can think of &lt;code&gt;__init__.py&lt;&#x2F;code&gt; as a place to
put initialization behavior and documentation for your package. In the way that
&lt;code&gt;__init__&lt;&#x2F;code&gt; handles initializing your class &lt;code&gt;__init__.py&lt;&#x2F;code&gt; handles the
initialization of your package during import. &lt;code&gt;__init__.py&lt;&#x2F;code&gt; used to be required
to make a directory a package, but as of Python 3.3 thanks to &lt;code&gt;pep-420&lt;&#x2F;code&gt; it is
no longer required. More links and information are provided at the end of the
notebook.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(pprint_extension)

    Help on package pprint_extension:

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;NAME
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_extension

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;DESCRIPTION
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;A package providing functions to pretty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;structures that may have alternative renderings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;the standard
        pprint package.

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PACKAGE CONTENTS
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;file_system
        network

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;DATA
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;__all__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;file_system&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;FILE
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;alex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;projects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;modules&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_extension&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Additionally we can import modules from packages and refer to them directly
instead of using the fully qualified namespacing syntax
&lt;code&gt;&amp;lt;package&amp;gt;.&amp;lt;module&amp;gt;.&amp;lt;object&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;pprint_extension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;file_system
file_system.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;list_hidden_directory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()

    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        .ipynb_checkpoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        .git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        .idea&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Packages go way beyond what we have covered here. As you build packages you
want to consider their structure relative to the public API you&#x27;re creating.
Publishing and distributing packages is a talk or series of talks on its own.
For now what we have covered is how we can group modules together in a package
and some basics for how to control the initialization behavior of a package.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;finishing-up&quot;&gt;Finishing up&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we know what a Python &lt;code&gt;module&lt;&#x2F;code&gt; and &lt;code&gt;package&lt;&#x2F;code&gt; is next month we will
look at the &lt;code&gt;import&lt;&#x2F;code&gt; statement. As a sneak peak I&#x27;ll leave you with &lt;code&gt;sys.path&lt;&#x2F;code&gt;
and you can begin exploring how this relates to our own packages and modules
that make up our application as well as those we might install with tools such
as &lt;code&gt;pip&lt;&#x2F;code&gt; or &lt;code&gt;conda&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;sys.html#sys.path&quot;&gt;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;sys.html#sys.path&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sys
sys.path

    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;miniconda3&#x2F;envs&#x2F;blogging&#x2F;lib&#x2F;python36.zip&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;miniconda3&#x2F;envs&#x2F;blogging&#x2F;lib&#x2F;python3.6&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;miniconda3&#x2F;envs&#x2F;blogging&#x2F;lib&#x2F;python3.6&#x2F;lib-dynload&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;miniconda3&#x2F;envs&#x2F;blogging&#x2F;lib&#x2F;python3.6&#x2F;site-packages&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;miniconda3&#x2F;envs&#x2F;blogging&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;IPython&#x2F;extensions&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;home&#x2F;alex&#x2F;.ipython&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;additional-reading&quot;&gt;Additional Reading&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;modules.html&quot;&gt;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;tutorial&#x2F;modules.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;packaging.python.org&#x2F;guides&#x2F;packaging-namespace-packages&#x2F;&quot;&gt;https:&#x2F;&#x2F;packaging.python.org&#x2F;guides&#x2F;packaging-namespace-packages&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0420&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0420&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-modules-packages&#x2F;&quot;&gt;https:&#x2F;&#x2F;realpython.com&#x2F;python-modules-packages&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Recursive Search with Python</title>
            <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/recurse/</link>
            <guid>https://burningdaylight.io/posts/recurse/</guid>
            <description>&lt;p&gt;Recently I received from JSON like data that I needed to transform into a
tabular dataset. As part of that there was a specific key that could occur as a
child of different keys at different depths in the structure. Not only could
the key I needed appear at different locations and depths, but when it was
located it was possible that it would have N sibling occurrences I needed to
retrieve at the same location. Finally for all of these there were a set of id
and date keys at the top level of the structure that I was asked to include
with each search key result.&lt;&#x2F;p&gt;
&lt;p&gt;I took a couple different paths on my way to solving this. One of the first
things I found was the total depth was inconsistent across the structures. Not
only that, but it wasn&#x27;t uncommon to find the key scattered across depths up
to 5 or 6 levels deep. The function below is what I ended up using. It&#x27;s a
recursive search that relies on the fact that the data is JSON like. Instead
of trying to pull the parent keys out as part of the search I have a function
that parses out the id and date keys passing those into this function as base.
Then a search is performed on the input object checking the dictionary
collections for all instances of the search key and when located appending the
search keys value to the base data, which is then added to a list of results
which is returned when the entire collection has been searched.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;This needed to be Python 2 and 3 compatible so pay attention to iterating
dictionary keys and values when you have this requirement. There are
different ways to handle this. I used &lt;code&gt;future&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The way that Python appends to list can be tricky. This bit me when I found
that results contained the right number of results, but all of my results
where the same and where based on the last hit. This is because I was calling
&lt;code&gt;append&lt;&#x2F;code&gt; on base which was creating bindings that I mutated on each search
result. Luckily Python has a &lt;code&gt;copy&lt;&#x2F;code&gt; module in the standard library to help
with this scenario.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;problem-solved&quot;&gt;Problem Solved&lt;&#x2F;h2&gt;
&lt;p&gt;The function below represents my final result. This worked well on the sample
data, and eventually was used on PySpark RDDs to process hundreds of millions
of structures quickly.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;copy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;future.utils &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;iteritems

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;row_base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;search_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
A search function to help transform nested JSON like objects into tabular rows.

The function takes a JSON like object as input along with a search key and
returns a row for each occurrence of the key in the object.

row_base is expected to be a list containing any base data you would like associated
with the search_key data.
&amp;quot;&amp;quot;&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# If input contains a list run it through search again since it
            # may contain dictionaries with the key being searched
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(i, list):
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(i, row_base, search_key, results)
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# If input contains a dictionary check if it contains the search_key
            # Also check if any of the values are list or dictionaries that need
            # to be searched
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(i, dict):
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;k, v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;iteritems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(i):
                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# If the search_key is located deepcopy row_base to prevent changing
                    # row_base on future hits. Create full row and append to results
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;search_key:
                        row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;copy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;deepcopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row_base)
                        row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(i)
                        results.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(row)
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;continue
                    elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(v, list):
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(v, row_base, search_key, results)
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(v, dict):
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(v, row_base, search_key, results)

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Search has been exhausted return search results to caller.
    # Results will be a list of list.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;results
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h3&gt;
&lt;p&gt;Since this works there are a couple of ideas I want to explore with it.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;This seems like a good place to gain experience with Python type annotations.&lt;&#x2F;li&gt;
&lt;li&gt;Since this needs to work in a pure Python environment as well as a PySpark
environment I want to do some profiling, but I&#x27;m not sure how tools like
Cython or Numba will work&#x2F;interact with the PySpark piece of this. That will
be interesting to explore.&lt;&#x2F;li&gt;
&lt;li&gt;It would be interesting to add depth tracking and see if there are any
levels where the search key never occurs so that the function could
potentially skip &lt;code&gt;iteritems&lt;&#x2F;code&gt; at that level.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;docs&quot;&gt;Docs&lt;&#x2F;h3&gt;
&lt;p&gt;For more information documentation on &lt;code&gt;copy&lt;&#x2F;code&gt; and &lt;code&gt;future&lt;&#x2F;code&gt; you can
check out the documentation.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.6&#x2F;library&#x2F;copy.html&quot;&gt;https:&#x2F;&#x2F;docs.python.org&#x2F;3.6&#x2F;library&#x2F;copy.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;python-future.org&#x2F;&quot;&gt;http:&#x2F;&#x2F;python-future.org&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m sure others will have different ideas and approaches to something like
this. Or you might have suggestions on something that could be done to make
this faster or easier to read. If you have feedback or suggestion feel free to
send them my way via up via &lt;a href=&quot;mailto:n0mn0m@burningdaylight.io&quot;&gt;email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Publishing with Pelican on Windows</title>
            <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/pelican-on-windows/</link>
            <guid>https://burningdaylight.io/posts/pelican-on-windows/</guid>
            <description>&lt;p&gt;Before jumping in here are the links I used while setting this up. I recommend
at least reading through the Pelican and Github pages documentation before
jumping in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference-material&quot;&gt;Reference Material&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.getpelican.com&#x2F;en&#x2F;3.6.3&#x2F;install.html&quot;&gt;http:&#x2F;&#x2F;docs.getpelican.com&#x2F;en&#x2F;3.6.3&#x2F;install.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.getpelican.com&#x2F;en&#x2F;3.6.3&#x2F;publish.html&quot;&gt;http:&#x2F;&#x2F;docs.getpelican.com&#x2F;en&#x2F;3.6.3&#x2F;publish.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.getpelican.com&#x2F;en&#x2F;3.6.3&#x2F;tips.html#publishing-to-github&quot;&gt;http:&#x2F;&#x2F;docs.getpelican.com&#x2F;en&#x2F;3.6.3&#x2F;tips.html#publishing-to-github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;pages.github.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;user-organization-and-project-pages&#x2F;&quot;&gt;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;user-organization-and-project-pages&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;setting-up-an-apex-domain&#x2F;&quot;&gt;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;setting-up-an-apex-domain&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.gandi.net&#x2F;en&#x2F;dns&#x2F;zone&#x2F;a-record&quot;&gt;https:&#x2F;&#x2F;wiki.gandi.net&#x2F;en&#x2F;dns&#x2F;zone&#x2F;a-record&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;To get things started I thought it might be a good idea to document using
Pelican on Windows with Github and Gandi for blog publishing. I&#x27;ll start by
configuring Pelican and Github. Once that&#x27;s working I&#x27;ll then talk about
configuring Gandi so you can use a custom domain. If you&#x27;re using a different
domain provider you may need to use different settings, but Github has plenty
of documentation around this that I&#x27;ll provide links for. Using Pelican on
Windows isn&#x27;t that much different than macOS or Linux, but you won&#x27;t find as
many tutorials or be able to use the quickstart makefile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;github-pages-setup&quot;&gt;Github Pages Setup&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing you should do is login to Github and then setup a Github pages
repo. You can read more detailed istructions here:
&lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;pages.github.com&#x2F;&lt;&#x2F;a&gt; or create a repo that
follows the pattern:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;reponame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.github.io
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I followed a pattern for User Github pages. This will be important when
publishing with Pelican.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;user-organization-and-project-pages&#x2F;&quot;&gt;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;user-organization-and-project-pages&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pelican-local&quot;&gt;Pelican Local&lt;&#x2F;h2&gt;
&lt;p&gt;With that out of the way we want to move on to setting up our project on
Windows. I&#x27;m using Anaconda and I will be creating a new conda environment for
this project.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; C:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;sers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;ource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;epos
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pelican_blog
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; blogging python=3.6
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; activate blogging
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; install pelican ghp-import markdown
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pelican_blog
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;pelican-quickstart
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main thing to pay attention to when you go through the quickstart prompts
is that you won&#x27;t need or be able to use the makefile with Windows. Once you
have completed the quikstart there are a couple things to pay attention to.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Your articles should be markdown documents in the content folder.&lt;&#x2F;li&gt;
&lt;li&gt;pelicanconf.py contains various settings related to you blog.&lt;&#x2F;li&gt;
&lt;li&gt;publishconf.py can be left alone because we are using ghp-import&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;publishing&quot;&gt;Publishing&lt;&#x2F;h2&gt;
&lt;p&gt;Go ahead and create a file under content. Something like getting_started.md
and add some text. Once you&#x27;ve done that switch back to the terminal prompt.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;pelican&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pelicanconf.py
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; add .
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;initial commit&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ghp-import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; output
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; push git@github.com:alexhagerman&#x2F;alexhagerman.github.io.git gh-pages:main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;custom-domain-url&quot;&gt;Custom Domain URL&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, now that we have Github setup and we can see our blog pages I want to
look at the steps required to use my custom domain hosted by Gandi with the
Github pages. With Gandi we want to modify our A Records to allow routing to
Github. Logging into your Gandi dashboard, select domains from the menu and
then DNS records. On this page you should be able to edit your DNS record and
add the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.gandi.net&#x2F;en&#x2F;dns&#x2F;zone&#x2F;a-record&quot;&gt;https:&#x2F;&#x2F;wiki.gandi.net&#x2F;en&#x2F;dns&#x2F;zone&#x2F;a-record&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 10800 IN A 185.199.108.153
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 10800 IN A 185.199.109.153
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 10800 IN A 185.199.110.153
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 10800 IN A 185.199.111.153
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok finally navigate back to your Github repo and go to the settings page. Under
settings scroll down until you see Github pages. You should see a textbox
allowing you to enter a custom domain. Add that, and if possible I recommend
checking the enforce https box below this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h3&gt;
&lt;p&gt;With that done you should be good to go. Whenever you want to write a new
article create a markdown document in the content folder and follow the same
steps above for publishing. One last note if this doesn&#x27;t work immediately you
might want to wait before beginning to change settings since your A record
changes can take some time to replicate.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Getting Started</title>
            <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/posts/first/</link>
            <guid>https://burningdaylight.io/posts/first/</guid>
            <description>&lt;p&gt;I&#x27;ve needed to start this for a while. I think most programmers, sys admins,
dbas and others work on projects large and small where we quickly find out
how to make x work with y or a produce b. Then we check into source control,
walk away and forget until we need to remember a detail 6 weeks later. So
that&#x27;s what I plan to record here. Little notes and snippets of code,
settings, whatever might have been on my mind or come across my keyboard in
recent days or weeks. Often times it will have something to do with Python, SQL
or clustered systems.&lt;&#x2F;p&gt;
&lt;p&gt;The first few post will be on getting Pelican setup with Github Pages and Gandi.
After that I&#x27;ll probably jump into PySpark, HBase, Python and execution plans.
Chances are if databases, Python or distributed systems are involved I&#x27;m
interested in learning and writing about it. If that sounds interesting
definitely keep an eye out for more post here.&lt;&#x2F;p&gt;
&lt;p&gt;A little bit about myself. I am currently a data engineer at Humana writing a
lot of Python and SQL mixing software engineering practices with data science
projects. Before that I worked at a few different companies focused on the
Microsoft Data Stack mixing SQL Server, SSIS, SSAS and C# to build data
intensive applications. There&#x27;s more information on my LinkedIn and GitHub
pages.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all for now. More to come soon.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>certificates</title>
            <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/docs/certs/</link>
            <guid>https://burningdaylight.io/docs/certs/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;Bachelor of Science in Computer Information Technology - Western Kentucky University 2011&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;certifications&#x2F;MCSA_WebApps.pdf&quot;&gt;Microsoft® Certified Solutions Associate: Web Applications Charter Member&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;certifications&#x2F;MCSD_WebApps.pdf&quot;&gt;Microsoft Certified Solutions Developer: Web Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;certifications&#x2F;MCP.pdf&quot;&gt;Microsoft Certified Professional&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;triplebyte.com&#x2F;tb&#x2F;alexander-dale-hagerman-vzj8gxa&#x2F;certificate&#x2F;track&#x2F;generalist&quot;&gt;Triplebyte Certified Generalist Software Engineer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;certifications&#x2F;Embedded_601.pdf&quot;&gt;UT.6.10x: Embedded Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>podcast</title>
            <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://burningdaylight.io/docs/podcast/</link>
            <guid>https://burningdaylight.io/docs/podcast/</guid>
            <description>&lt;h1 id=&quot;now-listening&quot;&gt;Now Listening&lt;&#x2F;h1&gt;
&lt;p&gt;Below are some of the podcast I have enjoyed. Let me know if you have
any recommendations.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bsdnow.tv&#x2F;&quot;&gt;BSD Now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;corecursive.com&#x2F;&quot;&gt;Corecursive&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;changelog.com&quot;&gt;Changelog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.devgameclub.com&#x2F;&quot;&gt;Dev Game Club&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;embedded.fm&#x2F;&quot;&gt;Embedded&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;category&#x2F;podcasts&#x2F;&quot;&gt;Hackaday&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythonpodcast.com&#x2F;&quot;&gt;Podcast Init&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theamphour.com&#x2F;&quot;&gt;The Amp Hour&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.stuffyoushouldknow.com&#x2F;&quot;&gt;Stuff You Should Know&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
    </channel>
</rss>
